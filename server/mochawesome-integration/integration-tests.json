{
  "stats": {
    "suites": 11,
    "tests": 47,
    "passes": 40,
    "pending": 0,
    "failures": 7,
    "start": "2025-07-02T03:12:46.752Z",
    "end": "2025-07-02T03:12:55.811Z",
    "duration": 9059,
    "testsRegistered": 47,
    "passPercent": 85.1063829787234,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "19e9e510-292f-4bce-9c11-b0a73687cd35",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "477ecdb2-cf25-4aaa-a2d1-78bb6f876972",
          "title": "Auth API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\auth.test.ts",
          "file": "\\src\\tests\\integration\\auth.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"before all\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/auth', auth_1.default);",
              "err": {},
              "uuid": "30911b1c-8473-4276-8091-00dcfe1e1637",
              "parentUUID": "477ecdb2-cf25-4aaa-a2d1-78bb6f876972",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"after each\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "c26d126b-72a0-4ec8-8233-59440bc748c1",
              "parentUUID": "477ecdb2-cf25-4aaa-a2d1-78bb6f876972",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "bd02688b-0148-40f2-9400-80c7841140b5",
              "title": "/api/auth/register POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\auth.test.ts",
              "file": "\\src\\tests\\integration\\auth.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing name",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing name",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "db4f2dd2-d454-4362-9b68-85f9946e01b8",
                  "parentUUID": "bd02688b-0148-40f2-9400-80c7841140b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "2b70db1a-b134-4e80-884e-c77d6131f9a1",
                  "parentUUID": "bd02688b-0148-40f2-9400-80c7841140b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing password",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing password",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 'test@example.com',\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "3bbf96ce-41d2-4488-b65e-427136d61e6e",
                  "parentUUID": "bd02688b-0148-40f2-9400-80c7841140b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string name",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string name",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 123,\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "0aca47f1-d116-43e1-a9ea-96e978b61f5b",
                  "parentUUID": "bd02688b-0148-40f2-9400-80c7841140b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 123,\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "61ee081e-471f-43a8-bd90-97b582d5f6fe",
                  "parentUUID": "bd02688b-0148-40f2-9400-80c7841140b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string password",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string password",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 'test@example.com',\n                password: 123\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "7d4a246c-9338-4ef5-87df-619bc6f5c8a0",
                  "parentUUID": "bd02688b-0148-40f2-9400-80c7841140b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed email validation",
                  "fullTitle": "Auth API /api/auth/register POST should return 500 for failed email validation",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').throws(new Error(\"Error related to searching user with email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to determine validity of email'\n            });\n        })",
                  "err": {},
                  "uuid": "6882f40b-1bb8-4b93-8d9c-1e73925c4a32",
                  "parentUUID": "bd02688b-0148-40f2-9400-80c7841140b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for existing account",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for existing account",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves({\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: true\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'existing@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Email already exists. Pleast try logging in instead'\n            });\n        })",
                  "err": {},
                  "uuid": "58994379-d3ea-4f38-b34a-156781e1e01e",
                  "parentUUID": "bd02688b-0148-40f2-9400-80c7841140b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed register",
                  "fullTitle": "Auth API /api/auth/register POST should return 500 for failed register",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            sinon_1.default.stub(authService_1.AuthService, 'register').throws(new Error(\"Unknown error in register\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Registration failed. Please try again'\n            });\n        })",
                  "err": {},
                  "uuid": "f202d485-f183-4fb4-8b61-439b37a840f2",
                  "parentUUID": "bd02688b-0148-40f2-9400-80c7841140b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 201 on successful register",
                  "fullTitle": "Auth API /api/auth/register POST should return 201 on successful register",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUser = {\n                _id: 'test user id',\n                name: 'test user',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test token',\n                verificationTokenExpires: (new Date(Date.now() + 24 * 60 * 60 * 1000)).toISOString(),\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            sinon_1.default.stub(authService_1.AuthService, 'register').resolves({\n                token: '123abc',\n                user: fakeUser\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(201);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Registration successful! Your account has been created and verified',\n                data: fakeUser,\n                token: '123abc'\n            });\n        })",
                  "err": {},
                  "uuid": "ef7931c8-6623-466a-9782-98174f34e379",
                  "parentUUID": "bd02688b-0148-40f2-9400-80c7841140b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db4f2dd2-d454-4362-9b68-85f9946e01b8",
                "2b70db1a-b134-4e80-884e-c77d6131f9a1",
                "3bbf96ce-41d2-4488-b65e-427136d61e6e",
                "0aca47f1-d116-43e1-a9ea-96e978b61f5b",
                "61ee081e-471f-43a8-bd90-97b582d5f6fe",
                "7d4a246c-9338-4ef5-87df-619bc6f5c8a0",
                "6882f40b-1bb8-4b93-8d9c-1e73925c4a32",
                "58994379-d3ea-4f38-b34a-156781e1e01e",
                "f202d485-f183-4fb4-8b61-439b37a840f2",
                "ef7931c8-6623-466a-9782-98174f34e379"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 141,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "482cd91f-7fe5-467e-9c84-ff362f3df243",
              "title": "/api/auth/login POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\auth.test.ts",
              "file": "\\src\\tests\\integration\\auth.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                password: 'hashed-password'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password are required\"\n            });\n        })",
                  "err": {},
                  "uuid": "6e2c8f3b-a9e1-48e8-a82e-12afba703dbc",
                  "parentUUID": "482cd91f-7fe5-467e-9c84-ff362f3df243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing password",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for missing password",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: \"test@example.com\"\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password are required\"\n            });\n        })",
                  "err": {},
                  "uuid": "a19d4bef-8feb-4cb6-aac9-90ce6c8f8279",
                  "parentUUID": "482cd91f-7fe5-467e-9c84-ff362f3df243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 123,\n                password: 'test-hash'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password must be strings\"\n            });\n        })",
                  "err": {},
                  "uuid": "e1278d4a-4d6d-4b95-a58c-4a4458c67c50",
                  "parentUUID": "482cd91f-7fe5-467e-9c84-ff362f3df243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string password",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for non string password",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 123\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password must be strings\"\n            });\n        })",
                  "err": {},
                  "uuid": "c95669ef-b47c-4e96-a3b0-14ceedfb60bc",
                  "parentUUID": "482cd91f-7fe5-467e-9c84-ff362f3df243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for bad email",
                  "fullTitle": "Auth API /api/auth/login POST should return 401 for bad email",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Invalid email or password\"\n            });\n        })",
                  "err": {},
                  "uuid": "efaeaf96-d6c7-45b1-be9a-896564a90178",
                  "parentUUID": "482cd91f-7fe5-467e-9c84-ff362f3df243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for unverified email",
                  "fullTitle": "Auth API /api/auth/login POST should return 401 for unverified email",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const unverifiedUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                password: 'test-hash',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(unverifiedUser);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Please verify your email before logging in\"\n            });\n        })",
                  "err": {},
                  "uuid": "21008411-9cae-494e-afc8-c6f10df7acd6",
                  "parentUUID": "482cd91f-7fe5-467e-9c84-ff362f3df243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error during login",
                  "fullTitle": "Auth API /api/auth/login POST should return 500 for unknown error during login",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                _id: 'test_id',\n                email: 'test@example.com',\n                password: 'test-hash',\n                isEmailVerified: true\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(userWithPassword);\n            sinon_1.default.stub(authService_1.AuthService, 'login').throws(new Error(\"Some error during login\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Unknown authentication error\"\n            });\n        })",
                  "err": {},
                  "uuid": "b800a5ba-547e-46e4-89a2-1a9a317aa452",
                  "parentUUID": "482cd91f-7fe5-467e-9c84-ff362f3df243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 with token and user for successful login",
                  "fullTitle": "Auth API /api/auth/login POST should return 200 with token and user for successful login",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                email: 'test@example.com',\n                password: 'hashed-password',\n                isEmailVerified: true,\n            };\n            const { password } = userWithPassword, userWithoutPassword = __rest(userWithPassword, [\"password\"]);\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(userWithPassword);\n            sinon_1.default.stub(authService_1.AuthService, 'login').resolves({\n                token: 'token123',\n                user: userWithoutPassword\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'hashed-password'\n            })\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Login successful',\n                data: userWithoutPassword,\n                token: 'token123'\n            });\n        })",
                  "err": {},
                  "uuid": "87ae008f-1baf-4086-830c-161feb57fbbb",
                  "parentUUID": "482cd91f-7fe5-467e-9c84-ff362f3df243",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e2c8f3b-a9e1-48e8-a82e-12afba703dbc",
                "a19d4bef-8feb-4cb6-aac9-90ce6c8f8279",
                "e1278d4a-4d6d-4b95-a58c-4a4458c67c50",
                "c95669ef-b47c-4e96-a3b0-14ceedfb60bc",
                "efaeaf96-d6c7-45b1-be9a-896564a90178",
                "21008411-9cae-494e-afc8-c6f10df7acd6",
                "b800a5ba-547e-46e4-89a2-1a9a317aa452",
                "87ae008f-1baf-4086-830c-161feb57fbbb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 47,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "8340efb7-0737-48ea-b05e-1589d93ec7ee",
          "title": "Chat API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chat.test.ts",
          "file": "\\src\\tests\\integration\\chat.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Chat API\"",
              "fullTitle": "Chat API \"before all\" hook in \"Chat API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/chat', chat_1.default);",
              "err": {},
              "uuid": "7e6e293c-40da-4a59-8091-d71aeeb3d584",
              "parentUUID": "8340efb7-0737-48ea-b05e-1589d93ec7ee",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Chat API\"",
              "fullTitle": "Chat API \"after each\" hook in \"Chat API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "f8a1e550-ad54-40a2-a81e-427d43c36944",
              "parentUUID": "8340efb7-0737-48ea-b05e-1589d93ec7ee",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "268c0f0f-85fd-4116-9cbd-cce1badfe17f",
              "title": "/api/chat POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chat.test.ts",
              "file": "\\src\\tests\\integration\\chat.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing messages",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'test@example.com'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages and email required'\n            });\n        })",
                  "err": {},
                  "uuid": "6f388bc2-68ce-44f0-847a-18da10e523b4",
                  "parentUUID": "268c0f0f-85fd-4116-9cbd-cce1badfe17f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                messages: [\n                    {\n                        speaker: 'user',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'bot',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages and email required'\n            });\n        })",
                  "err": {},
                  "uuid": "1f598715-b843-4955-afa8-3aa76ae8df56",
                  "parentUUID": "268c0f0f-85fd-4116-9cbd-cce1badfe17f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 123,\n                messages: [\n                    {\n                        speaker: 'user',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'bot',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email needs to be a string'\n            });\n        })",
                  "err": {},
                  "uuid": "df8d3a2a-4959-4bc6-b6de-cef210794d04",
                  "parentUUID": "268c0f0f-85fd-4116-9cbd-cce1badfe17f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non array messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non array messages",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: 'filler'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages needs to be an array'\n            });\n        })",
                  "err": {},
                  "uuid": "cfa8d140-3a9a-4b1e-a5d6-2798b0d11584",
                  "parentUUID": "268c0f0f-85fd-4116-9cbd-cce1badfe17f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing text in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing text in messages",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                    },\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "9a37d904-2861-4322-b535-a475d71f230b",
                  "parentUUID": "268c0f0f-85fd-4116-9cbd-cce1badfe17f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing speaker in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing speaker in messages",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        text: 'first reply'\n                    },\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "36147238-e104-406c-a7f5-dbec0551f78f",
                  "parentUUID": "268c0f0f-85fd-4116-9cbd-cce1badfe17f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid speaker in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for invalid speaker in messages",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'NOT A BOT OR A USER',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "2804df79-d997-4f3b-92a9-2d8dd8ab8338",
                  "parentUUID": "268c0f0f-85fd-4116-9cbd-cce1badfe17f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string text in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non string text in messages",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                        text: 12345\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "c15471b5-63e8-47f0-94c7-982edf8f9d6e",
                  "parentUUID": "268c0f0f-85fd-4116-9cbd-cce1badfe17f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed save chat",
                  "fullTitle": "Chat API /api/chat POST should return 500 for failed save chat",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(ChatService_1.ChatService, 'saveChat').throws(new Error(\"Some error in save chat\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to save chat'\n            });\n        })",
                  "err": {},
                  "uuid": "73fd6c37-1640-4c19-b0d4-2a29932d0d07",
                  "parentUUID": "268c0f0f-85fd-4116-9cbd-cce1badfe17f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for working save chat",
                  "fullTitle": "Chat API /api/chat POST should return 200 for working save chat",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const testDate = new Date('2025-06-30T01:14:27.853Z').toISOString();\n            const messagesData = [\n                {\n                    speaker: 'bot',\n                    text: 'first message',\n                    timestamp: testDate\n                },\n                {\n                    speaker: 'user',\n                    text: 'first reply',\n                    timestamp: testDate\n                }\n            ];\n            const mockChat = {\n                messages: messagesData,\n                email: 'text@example.com',\n                createdAt: testDate\n            };\n            sinon_1.default.stub(ChatService_1.ChatService, 'saveChat').resolves(mockChat);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: messagesData\n            })\n                .expect(201);\n            (0, chai_1.expect)(response.body).to.deep.equal(mockChat);\n        })",
                  "err": {},
                  "uuid": "6218a8b7-c5a5-4e2c-8ca4-f6eb9cc6b456",
                  "parentUUID": "268c0f0f-85fd-4116-9cbd-cce1badfe17f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f388bc2-68ce-44f0-847a-18da10e523b4",
                "1f598715-b843-4955-afa8-3aa76ae8df56",
                "df8d3a2a-4959-4bc6-b6de-cef210794d04",
                "cfa8d140-3a9a-4b1e-a5d6-2798b0d11584",
                "9a37d904-2861-4322-b535-a475d71f230b",
                "36147238-e104-406c-a7f5-dbec0551f78f",
                "2804df79-d997-4f3b-92a9-2d8dd8ab8338",
                "c15471b5-63e8-47f0-94c7-982edf8f9d6e",
                "73fd6c37-1640-4c19-b0d4-2a29932d0d07",
                "6218a8b7-c5a5-4e2c-8ca4-f6eb9cc6b456"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 58,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "b956773c-c606-4954-b1a6-b3b312f55f2b",
          "title": "Chatbot API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts",
          "file": "\\src\\tests\\integration\\chatbot.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Chatbot API\"",
              "fullTitle": "Chatbot API \"before all\" hook in \"Chatbot API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.post('/api/chatbot', chatbot_1.postChat);",
              "err": {},
              "uuid": "3ef1e26b-3a0c-4845-bdc0-c670c6a01d0e",
              "parentUUID": "b956773c-c606-4954-b1a6-b3b312f55f2b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Chatbot API\"",
              "fullTitle": "Chatbot API \"after each\" hook in \"Chatbot API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "291ae480-9b5d-40cd-a725-c218d07db5cf",
              "parentUUID": "b956773c-c606-4954-b1a6-b3b312f55f2b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "8f65fd6b-cefa-413d-85b4-b5f8bbe4d430",
              "title": "/api/chatbot POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts",
              "file": "\\src\\tests\\integration\\chatbot.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 400 code for missing message",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for missing message",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({})\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message is required' });\n        })",
                  "err": {},
                  "uuid": "16d747e2-31c9-4b40-bcc8-ab5d19e06b34",
                  "parentUUID": "8f65fd6b-cefa-413d-85b4-b5f8bbe4d430",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 400 code for wrong data type",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for wrong data type",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: 0 })\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message must be a string' });\n        })",
                  "err": {
                    "message": "AssertionError: expected { error: 'Message is required' } to deeply equal { error: 'Message must be a string' }",
                    "estack": "AssertionError: expected { error: 'Message is required' } to deeply equal { error: 'Message must be a string' }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:51:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"error\": \"Message is required\"\n+   \"error\": \"Message must be a string\"\n }\n"
                  },
                  "uuid": "f0f961ad-caa3-4a77-8403-564d4b43a3d3",
                  "parentUUID": "8f65fd6b-cefa-413d-85b4-b5f8bbe4d430",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 400 code for empty message",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for empty message",
                  "timedOut": false,
                  "duration": 5,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"\" })\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message cannot be empty' });\n        })",
                  "err": {
                    "message": "AssertionError: expected { error: 'Message is required' } to deeply equal { error: 'Message cannot be empty' }",
                    "estack": "AssertionError: expected { error: 'Message is required' } to deeply equal { error: 'Message cannot be empty' }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:60:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"error\": \"Message is required\"\n+   \"error\": \"Message cannot be empty\"\n }\n"
                  },
                  "uuid": "0d0b1195-9d66-41f7-893e-f34d60f72dd5",
                  "parentUUID": "8f65fd6b-cefa-413d-85b4-b5f8bbe4d430",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 500 code for failed chatbot API call",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 500 code for failed chatbot API call",
                  "timedOut": false,
                  "duration": 2100,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').throws(new Error(\"some API error message\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"hi\" })\n                .expect(500);\n            expect(response.body).to.deep.equal({ error: 'Unable to call chatbot API' });\n        })",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:68:10\n    at Generator.next (<anonymous>)\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:41:71\n    at new Promise (<anonymous>)\n    at __awaiter (src\\tests\\integration\\chatbot.test.ts:37:12)\n    at Context.<anonymous> (src\\tests\\integration\\chatbot.test.ts:63:67)\n    at processImmediate (node:internal/timers:485:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:267:14)\n    at D:\\Uni\\C455\\Project\\team10\\server\\node_modules\\supertest\\lib\\test.js:323:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:300:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:179:23)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:135:14)\n    at Object.onceWrapper (node:events:632:28)\n    at Server.emit (node:events:518:28)\n    at Server.emit (node:domain:489:12)\n    at emitCloseNT (node:net:2419:8)\n    at processTicksAndRejections (node:internal/process/task_queues:89:21)",
                    "diff": null
                  },
                  "uuid": "6563935f-9546-44ac-8b27-dbbbd49be468",
                  "parentUUID": "8f65fd6b-cefa-413d-85b4-b5f8bbe4d430",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 500 code for incomplete chatbot response",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 500 code for incomplete chatbot response",
                  "timedOut": false,
                  "duration": 1290,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"\",\n                productRequested: false,\n                productQuery: \"\"\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"give me an incomplete response\" })\n                .expect(500);\n            expect(response.body).to.deep.equal({ error: 'AI unable to respond' });\n        })",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:83:10\n    at Generator.next (<anonymous>)\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:41:71\n    at new Promise (<anonymous>)\n    at __awaiter (src\\tests\\integration\\chatbot.test.ts:37:12)\n    at Context.<anonymous> (src\\tests\\integration\\chatbot.test.ts:73:71)\n    at processImmediate (node:internal/timers:485:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:267:14)\n    at D:\\Uni\\C455\\Project\\team10\\server\\node_modules\\supertest\\lib\\test.js:323:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:300:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:179:23)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:135:14)\n    at Object.onceWrapper (node:events:632:28)\n    at Server.emit (node:events:518:28)\n    at Server.emit (node:domain:489:12)\n    at emitCloseNT (node:net:2419:8)\n    at processTicksAndRejections (node:internal/process/task_queues:89:21)",
                    "diff": null
                  },
                  "uuid": "456a18a8-ddee-45e6-9eeb-31016aa85a72",
                  "parentUUID": "8f65fd6b-cefa-413d-85b4-b5f8bbe4d430",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API without products",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API without products",
                  "timedOut": false,
                  "duration": 1358,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"What would you like to search for?\",\n                productRequested: false,\n                productQuery: \"\"\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"test message\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"What would you like to search for?\",\n                productData: null\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:99:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"I'm BuyWise, your shopping assistant for laptops, phones, and computers. I can help you find the perfect tech products, compare prices, and get recommendations. What device are you looking for?\"\n+   \"chatbotMessage\": \"What would you like to search for?\"\n   \"productData\": [null]\n }\n"
                  },
                  "uuid": "7b50e6bd-4322-408b-88a7-20c610ca747c",
                  "parentUUID": "8f65fd6b-cefa-413d-85b4-b5f8bbe4d430",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API and failed product API",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API and failed product API",
                  "timedOut": false,
                  "duration": 2261,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productRequested: true,\n                productQuery: \"macbook\"\n            });\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').throws(new Error(\"some API error message\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"I want some macbooks\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productData: []\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:118:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"You asked about MacBooks. I have searched for MacBook options for you. Would you like to see specific models or compare prices?\"\n-   \"productData\": [null]\n+   \"chatbotMessage\": \"Here are some macbooks I found.\"\n+   \"productData\": []\n }\n"
                  },
                  "uuid": "378d0e28-8298-4ec4-ab20-82ac6d406777",
                  "parentUUID": "8f65fd6b-cefa-413d-85b4-b5f8bbe4d430",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API and product API",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API and product API",
                  "timedOut": false,
                  "duration": 1620,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const mockProduct = {\n                product_id: \"123\",\n                source: \"Best Buy\",\n                title: \"MacBook Pro\",\n                thumbnail: \"image.jpg\",\n                extracted_price: 1299,\n                seller_details: { direct_link: \"http://example.com\" },\n                rating: 4.5,\n                reviews: 120\n            };\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productRequested: true,\n                productQuery: \"macbook\"\n            });\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').resolves([mockProduct]);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"I want some macbooks\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productData: [{\n                        id: mockProduct.product_id,\n                        source: mockProduct.source,\n                        title: mockProduct.title,\n                        image: mockProduct.thumbnail,\n                        price: mockProduct.extracted_price,\n                        url: mockProduct.seller_details.direct_link,\n                        rating: mockProduct.rating,\n                        reviews: mockProduct.reviews\n                    }]\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:147:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"I found a MacBook Pro available for $1299 at Best Buy. Would you like more options or details about this model?\"\n+   \"chatbotMessage\": \"Here are some macbooks I found.\"\n   \"productData\": [\n     {\n       \"id\": \"123\"\n       \"image\": \"image.jpg\"\n"
                  },
                  "uuid": "3afed4ed-e964-4ff7-82a3-5566c997f75d",
                  "parentUUID": "8f65fd6b-cefa-413d-85b4-b5f8bbe4d430",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16d747e2-31c9-4b40-bcc8-ab5d19e06b34"
              ],
              "failures": [
                "f0f961ad-caa3-4a77-8403-564d4b43a3d3",
                "0d0b1195-9d66-41f7-893e-f34d60f72dd5",
                "6563935f-9546-44ac-8b27-dbbbd49be468",
                "456a18a8-ddee-45e6-9eeb-31016aa85a72",
                "7b50e6bd-4322-408b-88a7-20c610ca747c",
                "378d0e28-8298-4ec4-ab20-82ac6d406777",
                "3afed4ed-e964-4ff7-82a3-5566c997f75d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8650,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "567fc199-aaa9-49f7-86be-ec1292aa561e",
          "title": "Products API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\products.test.ts",
          "file": "\\src\\tests\\integration\\products.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Products API\"",
              "fullTitle": "Products API \"before all\" hook in \"Products API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use('/api/products', products_1.default);",
              "err": {},
              "uuid": "7e36f39a-1f71-48c8-a3fc-c4b0896e144b",
              "parentUUID": "567fc199-aaa9-49f7-86be-ec1292aa561e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Products API\"",
              "fullTitle": "Products API \"after each\" hook in \"Products API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "83c9cedc-330e-4508-ac8c-3dfbd15a8edb",
              "parentUUID": "567fc199-aaa9-49f7-86be-ec1292aa561e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c7a189d7-30e2-452b-8403-f1e7c1421a90",
              "title": "GET /api/products/search",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\products.test.ts",
              "file": "\\src\\tests\\integration\\products.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 and products for a valid search query",
                  "fullTitle": "Products API GET /api/products/search should return 200 and products for a valid search query",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProducts = [\n                {\n                    category: 'Popular products',\n                    thumbnail: 'https://example.com/image.jpg',\n                    source_logo: 'https://example.com/logo.png',\n                    source: 'Best Buy',\n                    title: 'HP 14\" Intel Celeron Laptop',\n                    rating: 4.2,\n                    reviews: 148,\n                    price: '$199.99',\n                    extracted_price: 199.99,\n                    location: 'Nearby, 13 mi',\n                    product_id: '2197135960910078338',\n                    seller_details: [\n                        {\n                            position: 1,\n                            name: 'Best Buy',\n                            top_quality_store: true,\n                            payment_methods: 'PayPal, Zip accepted',\n                            rating: 4.6,\n                            reviews: 532,\n                            reviews_original: '(532)',\n                            link: 'https://google.com/redirect',\n                            direct_link: 'https://bestbuy.com/product',\n                            details_and_offers: [{ text: '5.3 mi · In stock at GainesvilleToday: 10:00 AM - 8:00 PM' }],\n                            base_price: '$199.99',\n                            additional_price: { shipping: 'See website' },\n                            total_price: '$199.99',\n                        }\n                    ],\n                },\n            ];\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').resolves(fakeProducts);\n            const res = yield (0, supertest_1.default)(app)\n                .get('/api/products/search')\n                .query({ q: 'Laptop under $400', device: 'desktop', location: 'Canada' });\n            (0, chai_1.expect)(res.status).to.equal(200);\n            (0, chai_1.expect)(res.body.success).to.be.true;\n            (0, chai_1.expect)(res.body.products).to.deep.equal(fakeProducts);\n        })",
                  "err": {},
                  "uuid": "4eb1874f-89bb-4aa4-86ee-486402ac1174",
                  "parentUUID": "c7a189d7-30e2-452b-8403-f1e7c1421a90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if the search query is missing",
                  "fullTitle": "Products API GET /api/products/search should return 400 if the search query is missing",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const res = yield (0, supertest_1.default)(app).get('/api/products/search');\n            (0, chai_1.expect)(res.status).to.equal(400);\n            (0, chai_1.expect)(res.body.success).to.be.false;\n            (0, chai_1.expect)(res.body.error).to.equal('Search query is required');\n        })",
                  "err": {},
                  "uuid": "cb96a3a5-1464-42b9-a894-f08ba1a35589",
                  "parentUUID": "c7a189d7-30e2-452b-8403-f1e7c1421a90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if the ProductService throws an error",
                  "fullTitle": "Products API GET /api/products/search should return 500 if the ProductService throws an error",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').throws(new Error('SerpAPI error'));\n            const res = yield (0, supertest_1.default)(app)\n                .get('/api/products/search')\n                .query({ q: 'Laptop' });\n            (0, chai_1.expect)(res.status).to.equal(500);\n            (0, chai_1.expect)(res.body.success).to.be.false;\n            (0, chai_1.expect)(res.body.error).to.equal('SerpAPI error');\n        })",
                  "err": {},
                  "uuid": "0935b7a0-623c-4334-868b-1ab459df833b",
                  "parentUUID": "c7a189d7-30e2-452b-8403-f1e7c1421a90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4eb1874f-89bb-4aa4-86ee-486402ac1174",
                "cb96a3a5-1464-42b9-a894-f08ba1a35589",
                "0935b7a0-623c-4334-868b-1ab459df833b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "a2f3967e-0aeb-4863-9e8c-ef20039de659",
          "title": "Profile API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
          "file": "\\src\\tests\\integration\\profile.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"before all\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/profiles', profile_1.default);",
              "err": {},
              "uuid": "1afbd5aa-43f4-48b2-bfe0-33287ed403bb",
              "parentUUID": "a2f3967e-0aeb-4863-9e8c-ef20039de659",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"after each\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "487b35e3-45c8-472f-8790-29b415cf69f6",
              "parentUUID": "a2f3967e-0aeb-4863-9e8c-ef20039de659",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1cd35e2e-478a-4354-ac05-a0c94f970260",
              "title": "/api/profiles/:userId GET",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"/api/profiles/:userId GET\"",
                  "fullTitle": "Profile API /api/profiles/:userId GET \"before each\" hook in \"/api/profiles/:userId GET\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "originalSecret = process.env.JWT_SECRET;",
                  "err": {},
                  "uuid": "e52660d8-d56e-4244-b47a-4f398b83bed4",
                  "parentUUID": "1cd35e2e-478a-4354-ac05-a0c94f970260",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"/api/profiles/:userId GET\"",
                  "fullTitle": "Profile API /api/profiles/:userId GET \"after each\" hook in \"/api/profiles/:userId GET\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.JWT_SECRET = originalSecret; // restore",
                  "err": {},
                  "uuid": "56a811ec-92eb-4fea-91c4-d9136d57516b",
                  "parentUUID": "1cd35e2e-478a-4354-ac05-a0c94f970260",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return 401 for no auth token on header",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 401 for no auth token on header",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/')\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No auth token in header'\n            });\n        })",
                  "err": {},
                  "uuid": "2588361a-c82d-4d0c-add4-e731a5ec7a9d",
                  "parentUUID": "1cd35e2e-478a-4354-ac05-a0c94f970260",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unconfigured JWT",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for unconfigured JWT",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            delete process.env.JWT_SECRET;\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'JWT not figured'\n            });\n        })",
                  "err": {},
                  "uuid": "0d333cce-c3d3-425c-8157-d2f7b266a857",
                  "parentUUID": "1cd35e2e-478a-4354-ac05-a0c94f970260",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for JWT error",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 401 for JWT error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new jsonwebtoken_1.JsonWebTokenError(\"Some JWT verification error\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid JWT'\n            });\n        })",
                  "err": {},
                  "uuid": "c24656cc-72eb-44fd-8045-57782ab252e0",
                  "parentUUID": "1cd35e2e-478a-4354-ac05-a0c94f970260",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for JWT error",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for JWT error",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new Error(\"Some other error during JWT verification\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error'\n            });\n        })",
                  "err": {},
                  "uuid": "6cff4cdb-ef1f-4d77-8cec-90ef33c2caaa",
                  "parentUUID": "1cd35e2e-478a-4354-ac05-a0c94f970260",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing userId on params",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 400 for missing userId on params",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "98aac322-62dc-42ab-8849-2cf909d989e3",
                  "parentUUID": "1cd35e2e-478a-4354-ac05-a0c94f970260",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for error during getting profile",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for error during getting profile",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error during getting profile'\n            });\n        })",
                  "err": {},
                  "uuid": "f2d81bf3-7865-469d-864a-037aceb09a06",
                  "parentUUID": "1cd35e2e-478a-4354-ac05-a0c94f970260",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for missing profile for userId",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 404 for missing profile for userId",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get profile with userId'\n            });\n        })",
                  "err": {},
                  "uuid": "7b1d5abd-f32f-49d4-a12f-4343519280ef",
                  "parentUUID": "1cd35e2e-478a-4354-ac05-a0c94f970260",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully getting profile",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 200 for successfully getting profile",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            const fakeProfile = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(fakeProfile);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Successfully retrieved profile',\n                data: fakeProfile\n            });\n        })",
                  "err": {},
                  "uuid": "26ba5363-09a3-4623-9035-1e765e645091",
                  "parentUUID": "1cd35e2e-478a-4354-ac05-a0c94f970260",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2588361a-c82d-4d0c-add4-e731a5ec7a9d",
                "0d333cce-c3d3-425c-8157-d2f7b266a857",
                "c24656cc-72eb-44fd-8045-57782ab252e0",
                "6cff4cdb-ef1f-4d77-8cec-90ef33c2caaa",
                "98aac322-62dc-42ab-8849-2cf909d989e3",
                "f2d81bf3-7865-469d-864a-037aceb09a06",
                "7b1d5abd-f32f-49d4-a12f-4343519280ef",
                "26ba5363-09a3-4623-9035-1e765e645091"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 62,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "integration-tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-integration",
        "reportFilename": "integration-tests"
      },
      "version": "6.2.0"
    }
  }
}