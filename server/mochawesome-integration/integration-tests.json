{
  "stats": {
    "suites": 14,
    "tests": 69,
    "passes": 64,
    "pending": 0,
    "failures": 5,
    "start": "2025-07-02T20:36:08.720Z",
    "end": "2025-07-02T20:36:19.043Z",
    "duration": 10323,
    "testsRegistered": 69,
    "passPercent": 92.7536231884058,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "33f79871-c5e2-4018-a1b8-8d4fd51f15cb",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6356d5f4-3856-4b94-9177-fa521b0eeeff",
          "title": "Auth API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\auth.test.ts",
          "file": "\\src\\tests\\integration\\auth.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"before all\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/auth', auth_1.default);",
              "err": {},
              "uuid": "27401211-5b97-4dae-891e-6a43a0e9f901",
              "parentUUID": "6356d5f4-3856-4b94-9177-fa521b0eeeff",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"after each\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "482c9c2d-8d3a-47c4-832b-dba4e88d5c31",
              "parentUUID": "6356d5f4-3856-4b94-9177-fa521b0eeeff",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b904cab2-17ce-4fd8-819d-1a8b725c35e9",
              "title": "/api/auth/register POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\auth.test.ts",
              "file": "\\src\\tests\\integration\\auth.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing name",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing name",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "fc77c3e5-2904-40b7-807c-5dc1cea38746",
                  "parentUUID": "b904cab2-17ce-4fd8-819d-1a8b725c35e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "a6c38714-c2dd-4ec4-b65c-fb4344a74658",
                  "parentUUID": "b904cab2-17ce-4fd8-819d-1a8b725c35e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing password",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing password",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 'test@example.com',\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "81ec49be-05ce-4937-bca1-dfec6c92f440",
                  "parentUUID": "b904cab2-17ce-4fd8-819d-1a8b725c35e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string name",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string name",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 123,\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "52bf9e51-6091-44d6-8492-b0bdead58662",
                  "parentUUID": "b904cab2-17ce-4fd8-819d-1a8b725c35e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 123,\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "b68378b3-a800-4cfc-8eaf-9b45bf5583b0",
                  "parentUUID": "b904cab2-17ce-4fd8-819d-1a8b725c35e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string password",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string password",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 'test@example.com',\n                password: 123\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "cadd43e5-9c8f-48fc-ae60-9479b301c542",
                  "parentUUID": "b904cab2-17ce-4fd8-819d-1a8b725c35e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed email validation",
                  "fullTitle": "Auth API /api/auth/register POST should return 500 for failed email validation",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').throws(new Error(\"Error related to searching user with email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to determine validity of email'\n            });\n        })",
                  "err": {},
                  "uuid": "cb4c4788-0a1f-492f-a1af-bed7bbc9b750",
                  "parentUUID": "b904cab2-17ce-4fd8-819d-1a8b725c35e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for existing account",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for existing account",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves({\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: true\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'existing@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Email already exists. Pleast try logging in instead'\n            });\n        })",
                  "err": {},
                  "uuid": "e90b6011-4ee7-4319-9a5e-0af0cedf609b",
                  "parentUUID": "b904cab2-17ce-4fd8-819d-1a8b725c35e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed register",
                  "fullTitle": "Auth API /api/auth/register POST should return 500 for failed register",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            sinon_1.default.stub(authService_1.AuthService, 'register').throws(new Error(\"Unknown error in register\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Registration failed. Please try again'\n            });\n        })",
                  "err": {},
                  "uuid": "ba335309-7c51-4c1a-b0cd-907c4da18066",
                  "parentUUID": "b904cab2-17ce-4fd8-819d-1a8b725c35e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 201 on successful register",
                  "fullTitle": "Auth API /api/auth/register POST should return 201 on successful register",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUser = {\n                _id: 'test user id',\n                name: 'test user',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test token',\n                verificationTokenExpires: (new Date(Date.now() + 24 * 60 * 60 * 1000)).toISOString(),\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            sinon_1.default.stub(authService_1.AuthService, 'register').resolves({\n                token: '123abc',\n                user: fakeUser\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(201);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Registration successful! Your account has been created and verified',\n                data: fakeUser,\n                token: '123abc'\n            });\n        })",
                  "err": {},
                  "uuid": "fd640ea7-8aa2-4f1f-9c1c-1e349feb1c1a",
                  "parentUUID": "b904cab2-17ce-4fd8-819d-1a8b725c35e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc77c3e5-2904-40b7-807c-5dc1cea38746",
                "a6c38714-c2dd-4ec4-b65c-fb4344a74658",
                "81ec49be-05ce-4937-bca1-dfec6c92f440",
                "52bf9e51-6091-44d6-8492-b0bdead58662",
                "b68378b3-a800-4cfc-8eaf-9b45bf5583b0",
                "cadd43e5-9c8f-48fc-ae60-9479b301c542",
                "cb4c4788-0a1f-492f-a1af-bed7bbc9b750",
                "e90b6011-4ee7-4319-9a5e-0af0cedf609b",
                "ba335309-7c51-4c1a-b0cd-907c4da18066",
                "fd640ea7-8aa2-4f1f-9c1c-1e349feb1c1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 116,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "42f66b8a-406f-4409-b4b6-5dd67704395c",
              "title": "/api/auth/login POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\auth.test.ts",
              "file": "\\src\\tests\\integration\\auth.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                password: 'hashed-password'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password are required\"\n            });\n        })",
                  "err": {},
                  "uuid": "97b1c928-fd2d-47da-ba62-2eb6138ca25d",
                  "parentUUID": "42f66b8a-406f-4409-b4b6-5dd67704395c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing password",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for missing password",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: \"test@example.com\"\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password are required\"\n            });\n        })",
                  "err": {},
                  "uuid": "d8725c96-918d-4524-a0fd-c82025029dba",
                  "parentUUID": "42f66b8a-406f-4409-b4b6-5dd67704395c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 123,\n                password: 'test-hash'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password must be strings\"\n            });\n        })",
                  "err": {},
                  "uuid": "f5b5a236-0822-4c80-bbf4-d22bb54ca4ed",
                  "parentUUID": "42f66b8a-406f-4409-b4b6-5dd67704395c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string password",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for non string password",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 123\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password must be strings\"\n            });\n        })",
                  "err": {},
                  "uuid": "a6ff19d7-edbc-49f9-afd0-27cdffd4c8f7",
                  "parentUUID": "42f66b8a-406f-4409-b4b6-5dd67704395c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for bad email",
                  "fullTitle": "Auth API /api/auth/login POST should return 401 for bad email",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Invalid email or password\"\n            });\n        })",
                  "err": {},
                  "uuid": "b45d5d3f-7894-4615-86bb-59b480104253",
                  "parentUUID": "42f66b8a-406f-4409-b4b6-5dd67704395c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for unverified email",
                  "fullTitle": "Auth API /api/auth/login POST should return 401 for unverified email",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const unverifiedUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                password: 'test-hash',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(unverifiedUser);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Please verify your email before logging in\"\n            });\n        })",
                  "err": {},
                  "uuid": "57e877eb-a119-4ebf-8268-cfd391533393",
                  "parentUUID": "42f66b8a-406f-4409-b4b6-5dd67704395c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error during login",
                  "fullTitle": "Auth API /api/auth/login POST should return 500 for unknown error during login",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                _id: 'test_id',\n                email: 'test@example.com',\n                password: 'test-hash',\n                isEmailVerified: true\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(userWithPassword);\n            sinon_1.default.stub(authService_1.AuthService, 'login').throws(new Error(\"Some error during login\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Unknown authentication error\"\n            });\n        })",
                  "err": {},
                  "uuid": "e322ebe5-3130-4f23-9cca-2a3a4b13ff6f",
                  "parentUUID": "42f66b8a-406f-4409-b4b6-5dd67704395c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 with token and user for successful login",
                  "fullTitle": "Auth API /api/auth/login POST should return 200 with token and user for successful login",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                email: 'test@example.com',\n                password: 'hashed-password',\n                isEmailVerified: true,\n            };\n            const { password } = userWithPassword, userWithoutPassword = __rest(userWithPassword, [\"password\"]);\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(userWithPassword);\n            sinon_1.default.stub(authService_1.AuthService, 'login').resolves({\n                token: 'token123',\n                user: userWithoutPassword\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'hashed-password'\n            })\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Login successful',\n                data: userWithoutPassword,\n                token: 'token123'\n            });\n        })",
                  "err": {},
                  "uuid": "1e94787b-c1f8-4b0e-9da4-400a15a1b15f",
                  "parentUUID": "42f66b8a-406f-4409-b4b6-5dd67704395c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97b1c928-fd2d-47da-ba62-2eb6138ca25d",
                "d8725c96-918d-4524-a0fd-c82025029dba",
                "f5b5a236-0822-4c80-bbf4-d22bb54ca4ed",
                "a6ff19d7-edbc-49f9-afd0-27cdffd4c8f7",
                "b45d5d3f-7894-4615-86bb-59b480104253",
                "57e877eb-a119-4ebf-8268-cfd391533393",
                "e322ebe5-3130-4f23-9cca-2a3a4b13ff6f",
                "1e94787b-c1f8-4b0e-9da4-400a15a1b15f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 49,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "600a9b50-83b9-40ee-b78d-fac5cf6380a8",
          "title": "Chat API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chat.test.ts",
          "file": "\\src\\tests\\integration\\chat.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Chat API\"",
              "fullTitle": "Chat API \"before all\" hook in \"Chat API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/chat', chat_1.default);",
              "err": {},
              "uuid": "5d90da39-5fcd-4bfb-930d-753b90e2971e",
              "parentUUID": "600a9b50-83b9-40ee-b78d-fac5cf6380a8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Chat API\"",
              "fullTitle": "Chat API \"after each\" hook in \"Chat API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "af6c9e1f-7677-480f-97e5-e2f55aa51376",
              "parentUUID": "600a9b50-83b9-40ee-b78d-fac5cf6380a8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "d0d85642-667d-4791-b530-19919dfea087",
              "title": "/api/chat POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chat.test.ts",
              "file": "\\src\\tests\\integration\\chat.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing messages",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'test@example.com'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages and email required'\n            });\n        })",
                  "err": {},
                  "uuid": "4983c38f-ad7a-4614-bca2-7c585d8f233d",
                  "parentUUID": "d0d85642-667d-4791-b530-19919dfea087",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                messages: [\n                    {\n                        speaker: 'user',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'bot',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages and email required'\n            });\n        })",
                  "err": {},
                  "uuid": "d8a01130-2853-439b-ba81-9279c8fbe1e0",
                  "parentUUID": "d0d85642-667d-4791-b530-19919dfea087",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 123,\n                messages: [\n                    {\n                        speaker: 'user',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'bot',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email needs to be a string'\n            });\n        })",
                  "err": {},
                  "uuid": "ac620cb0-c31a-4fcd-a203-f1d57aefd114",
                  "parentUUID": "d0d85642-667d-4791-b530-19919dfea087",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non array messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non array messages",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: 'filler'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages needs to be an array'\n            });\n        })",
                  "err": {},
                  "uuid": "1bd50079-4962-4c0e-bab8-511bcfb711f0",
                  "parentUUID": "d0d85642-667d-4791-b530-19919dfea087",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing text in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing text in messages",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                    },\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "332b5e6f-e1a4-4c9f-b13e-3e0c03739626",
                  "parentUUID": "d0d85642-667d-4791-b530-19919dfea087",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing speaker in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing speaker in messages",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        text: 'first reply'\n                    },\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "d48fb2c2-995e-4da3-9351-270efd4f7815",
                  "parentUUID": "d0d85642-667d-4791-b530-19919dfea087",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid speaker in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for invalid speaker in messages",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'NOT A BOT OR A USER',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "981779cd-0148-4cbf-b604-69f9a260325f",
                  "parentUUID": "d0d85642-667d-4791-b530-19919dfea087",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string text in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non string text in messages",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                        text: 12345\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "569f7988-308b-486a-b424-e26275723def",
                  "parentUUID": "d0d85642-667d-4791-b530-19919dfea087",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed save chat",
                  "fullTitle": "Chat API /api/chat POST should return 500 for failed save chat",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(ChatService_1.ChatService, 'saveChat').throws(new Error(\"Some error in save chat\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to save chat'\n            });\n        })",
                  "err": {},
                  "uuid": "a41943f5-4b55-421a-805a-f1af53451169",
                  "parentUUID": "d0d85642-667d-4791-b530-19919dfea087",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for working save chat",
                  "fullTitle": "Chat API /api/chat POST should return 200 for working save chat",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const testDate = new Date('2025-06-30T01:14:27.853Z').toISOString();\n            const messagesData = [\n                {\n                    speaker: 'bot',\n                    text: 'first message',\n                    timestamp: testDate\n                },\n                {\n                    speaker: 'user',\n                    text: 'first reply',\n                    timestamp: testDate\n                }\n            ];\n            const mockChat = {\n                messages: messagesData,\n                email: 'text@example.com',\n                createdAt: testDate\n            };\n            sinon_1.default.stub(ChatService_1.ChatService, 'saveChat').resolves(mockChat);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: messagesData\n            })\n                .expect(201);\n            (0, chai_1.expect)(response.body).to.deep.equal(mockChat);\n        })",
                  "err": {},
                  "uuid": "fcfacfa8-83c1-43b5-8558-d228552a4a8d",
                  "parentUUID": "d0d85642-667d-4791-b530-19919dfea087",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4983c38f-ad7a-4614-bca2-7c585d8f233d",
                "d8a01130-2853-439b-ba81-9279c8fbe1e0",
                "ac620cb0-c31a-4fcd-a203-f1d57aefd114",
                "1bd50079-4962-4c0e-bab8-511bcfb711f0",
                "332b5e6f-e1a4-4c9f-b13e-3e0c03739626",
                "d48fb2c2-995e-4da3-9351-270efd4f7815",
                "981779cd-0148-4cbf-b604-69f9a260325f",
                "569f7988-308b-486a-b424-e26275723def",
                "a41943f5-4b55-421a-805a-f1af53451169",
                "fcfacfa8-83c1-43b5-8558-d228552a4a8d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "47b29d29-2423-48cd-925c-c715efd9fe57",
          "title": "Chatbot API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts",
          "file": "\\src\\tests\\integration\\chatbot.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Chatbot API\"",
              "fullTitle": "Chatbot API \"before all\" hook in \"Chatbot API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.post('/api/chatbot', chatbot_1.postChat);",
              "err": {},
              "uuid": "0c9523ed-4ddf-4e45-aa19-977355dbd2bf",
              "parentUUID": "47b29d29-2423-48cd-925c-c715efd9fe57",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Chatbot API\"",
              "fullTitle": "Chatbot API \"after each\" hook in \"Chatbot API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "6f402907-aebc-48a4-a96f-b41f95ee0866",
              "parentUUID": "47b29d29-2423-48cd-925c-c715efd9fe57",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "6675d7ff-219c-4ef1-997d-ffa6fc1ce9d1",
              "title": "/api/chatbot POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts",
              "file": "\\src\\tests\\integration\\chatbot.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 400 code for missing message",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for missing message",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({})\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message is required' });\n        })",
                  "err": {},
                  "uuid": "21f90b84-f550-44b6-b98d-fbca61ce1317",
                  "parentUUID": "6675d7ff-219c-4ef1-997d-ffa6fc1ce9d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 400 code for wrong data type",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for wrong data type",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: 0 })\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message is required' });\n        })",
                  "err": {},
                  "uuid": "64ff9ead-69b9-441d-aa37-a34d04b790b5",
                  "parentUUID": "6675d7ff-219c-4ef1-997d-ffa6fc1ce9d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 400 code for empty message",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for empty message",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"\" })\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message is required' });\n        })",
                  "err": {},
                  "uuid": "ebae96fb-8fa2-43f3-93df-81a409fc292b",
                  "parentUUID": "6675d7ff-219c-4ef1-997d-ffa6fc1ce9d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 500 code for failed chatbot API call",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 500 code for failed chatbot API call",
                  "timedOut": false,
                  "duration": 2809,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').throws(new Error(\"some API error message\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"hi\" })\n                .expect(500);\n            expect(response.body).to.deep.equal({ error: 'Unable to call chatbot API' });\n        })",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:68:10\n    at Generator.next (<anonymous>)\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:41:71\n    at new Promise (<anonymous>)\n    at __awaiter (src\\tests\\integration\\chatbot.test.ts:37:12)\n    at Context.<anonymous> (src\\tests\\integration\\chatbot.test.ts:63:67)\n    at processImmediate (node:internal/timers:485:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:267:14)\n    at D:\\Uni\\C455\\Project\\team10\\server\\node_modules\\supertest\\lib\\test.js:323:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:300:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:179:23)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:135:14)\n    at Object.onceWrapper (node:events:632:28)\n    at Server.emit (node:events:518:28)\n    at Server.emit (node:domain:489:12)\n    at emitCloseNT (node:net:2419:8)\n    at processTicksAndRejections (node:internal/process/task_queues:89:21)",
                    "diff": null
                  },
                  "uuid": "d388638f-7749-44d6-aee8-8b17e81401cd",
                  "parentUUID": "6675d7ff-219c-4ef1-997d-ffa6fc1ce9d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 500 code for incomplete chatbot response",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 500 code for incomplete chatbot response",
                  "timedOut": false,
                  "duration": 1741,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"\",\n                productRequested: false,\n                productQuery: \"\"\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"give me an incomplete response\" })\n                .expect(500);\n            expect(response.body).to.deep.equal({ error: 'AI unable to respond' });\n        })",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:83:10\n    at Generator.next (<anonymous>)\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:41:71\n    at new Promise (<anonymous>)\n    at __awaiter (src\\tests\\integration\\chatbot.test.ts:37:12)\n    at Context.<anonymous> (src\\tests\\integration\\chatbot.test.ts:73:71)\n    at processImmediate (node:internal/timers:485:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:267:14)\n    at D:\\Uni\\C455\\Project\\team10\\server\\node_modules\\supertest\\lib\\test.js:323:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:300:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:179:23)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:135:14)\n    at Object.onceWrapper (node:events:632:28)\n    at Server.emit (node:events:518:28)\n    at Server.emit (node:domain:489:12)\n    at emitCloseNT (node:net:2419:8)\n    at processTicksAndRejections (node:internal/process/task_queues:89:21)",
                    "diff": null
                  },
                  "uuid": "58af1dda-6a06-45a7-a6c2-8473a3066346",
                  "parentUUID": "6675d7ff-219c-4ef1-997d-ffa6fc1ce9d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API without products",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API without products",
                  "timedOut": false,
                  "duration": 2057,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"What would you like to search for?\",\n                productRequested: false,\n                productQuery: \"\"\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"test message\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"What would you like to search for?\",\n                productData: null\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:99:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"I'm here to help you find the perfect laptops, phones, or computers! What specific device are you interested in today?\"\n+   \"chatbotMessage\": \"What would you like to search for?\"\n   \"productData\": [null]\n }\n"
                  },
                  "uuid": "afc9ba79-dfb4-4946-899d-fcb0d851a469",
                  "parentUUID": "6675d7ff-219c-4ef1-997d-ffa6fc1ce9d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API and failed product API",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API and failed product API",
                  "timedOut": false,
                  "duration": 1328,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productRequested: true,\n                productQuery: \"macbook\"\n            });\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').throws(new Error(\"some API error message\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"I want some macbooks\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productData: null\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:118:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"I found some MacBook options for you! Would you like to see the latest models, or do you have a specific budget or use case in mind?\"\n+   \"chatbotMessage\": \"Here are some macbooks I found.\"\n   \"productData\": [null]\n }\n"
                  },
                  "uuid": "a5573f6e-615c-4647-b27c-932ccbebd57d",
                  "parentUUID": "6675d7ff-219c-4ef1-997d-ffa6fc1ce9d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API and product API",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API and product API",
                  "timedOut": false,
                  "duration": 1683,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const mockProduct = {\n                product_id: \"123\",\n                source: \"Best Buy\",\n                title: \"MacBook Pro\",\n                thumbnail: \"image.jpg\",\n                extracted_price: 1299,\n                seller_details: { direct_link: \"http://example.com\" },\n                rating: 4.5,\n                reviews: 120\n            };\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productRequested: true,\n                productQuery: \"macbook\"\n            });\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').resolves([mockProduct]);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"I want some macbooks\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productData: [{\n                        id: mockProduct.product_id,\n                        source: mockProduct.source,\n                        title: mockProduct.title,\n                        image: mockProduct.thumbnail,\n                        price: mockProduct.extracted_price,\n                        url: mockProduct.seller_details.direct_link,\n                        rating: mockProduct.rating,\n                        reviews: mockProduct.reviews\n                    }]\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:147:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"I found a MacBook Pro available for $1299 with a good rating of 4.5 stars from over 120 reviews. Would you like more options or details about this model?\"\n+   \"chatbotMessage\": \"Here are some macbooks I found.\"\n   \"productData\": [\n     {\n       \"id\": \"123\"\n       \"image\": \"image.jpg\"\n"
                  },
                  "uuid": "e8f1d82f-dd5c-4d16-a9db-c306e2c65c7e",
                  "parentUUID": "6675d7ff-219c-4ef1-997d-ffa6fc1ce9d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "21f90b84-f550-44b6-b98d-fbca61ce1317",
                "64ff9ead-69b9-441d-aa37-a34d04b790b5",
                "ebae96fb-8fa2-43f3-93df-81a409fc292b"
              ],
              "failures": [
                "d388638f-7749-44d6-aee8-8b17e81401cd",
                "58af1dda-6a06-45a7-a6c2-8473a3066346",
                "afc9ba79-dfb4-4946-899d-fcb0d851a469",
                "a5573f6e-615c-4647-b27c-932ccbebd57d",
                "e8f1d82f-dd5c-4d16-a9db-c306e2c65c7e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 9645,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "86a1a881-8f19-4de5-9182-14bc6b13f176",
          "title": "Products API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\products.test.ts",
          "file": "\\src\\tests\\integration\\products.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Products API\"",
              "fullTitle": "Products API \"before all\" hook in \"Products API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use('/api/products', products_1.default);",
              "err": {},
              "uuid": "18e72dfb-a26a-4071-88df-17aa0cd1baac",
              "parentUUID": "86a1a881-8f19-4de5-9182-14bc6b13f176",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Products API\"",
              "fullTitle": "Products API \"after each\" hook in \"Products API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "333af162-f446-42b7-93f2-16907bbe791e",
              "parentUUID": "86a1a881-8f19-4de5-9182-14bc6b13f176",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "8e146b1e-099d-4926-9b31-08229aee33f6",
              "title": "GET /api/products/search",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\products.test.ts",
              "file": "\\src\\tests\\integration\\products.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 and products for a valid search query",
                  "fullTitle": "Products API GET /api/products/search should return 200 and products for a valid search query",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProducts = [\n                {\n                    category: 'Popular products',\n                    thumbnail: 'https://example.com/image.jpg',\n                    source_logo: 'https://example.com/logo.png',\n                    source: 'Best Buy',\n                    title: 'HP 14\" Intel Celeron Laptop',\n                    rating: 4.2,\n                    reviews: 148,\n                    price: '$199.99',\n                    extracted_price: 199.99,\n                    location: 'Nearby, 13 mi',\n                    product_id: '2197135960910078338',\n                    seller_details: [\n                        {\n                            position: 1,\n                            name: 'Best Buy',\n                            top_quality_store: true,\n                            payment_methods: 'PayPal, Zip accepted',\n                            rating: 4.6,\n                            reviews: 532,\n                            reviews_original: '(532)',\n                            link: 'https://google.com/redirect',\n                            direct_link: 'https://bestbuy.com/product',\n                            details_and_offers: [{ text: '5.3 mi · In stock at GainesvilleToday: 10:00 AM - 8:00 PM' }],\n                            base_price: '$199.99',\n                            additional_price: { shipping: 'See website' },\n                            total_price: '$199.99',\n                        }\n                    ],\n                },\n            ];\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').resolves(fakeProducts);\n            const res = yield (0, supertest_1.default)(app)\n                .get('/api/products/search')\n                .query({ q: 'Laptop under $400', device: 'desktop', location: 'Canada' });\n            (0, chai_1.expect)(res.status).to.equal(200);\n            (0, chai_1.expect)(res.body.success).to.be.true;\n            (0, chai_1.expect)(res.body.products).to.deep.equal(fakeProducts);\n        })",
                  "err": {},
                  "uuid": "3bd8190e-5973-4083-826d-370be8d25d04",
                  "parentUUID": "8e146b1e-099d-4926-9b31-08229aee33f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if the search query is missing",
                  "fullTitle": "Products API GET /api/products/search should return 400 if the search query is missing",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const res = yield (0, supertest_1.default)(app).get('/api/products/search');\n            (0, chai_1.expect)(res.status).to.equal(400);\n            (0, chai_1.expect)(res.body.success).to.be.false;\n            (0, chai_1.expect)(res.body.error).to.equal('Search query is required');\n        })",
                  "err": {},
                  "uuid": "39a0526a-5acc-4c7d-9991-60b404a96665",
                  "parentUUID": "8e146b1e-099d-4926-9b31-08229aee33f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if the ProductService throws an error",
                  "fullTitle": "Products API GET /api/products/search should return 500 if the ProductService throws an error",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').throws(new Error('SerpAPI error'));\n            const res = yield (0, supertest_1.default)(app)\n                .get('/api/products/search')\n                .query({ q: 'Laptop' });\n            (0, chai_1.expect)(res.status).to.equal(500);\n            (0, chai_1.expect)(res.body.success).to.be.false;\n            (0, chai_1.expect)(res.body.error).to.equal('SerpAPI error');\n        })",
                  "err": {},
                  "uuid": "9d5fd47f-e39d-4abb-aada-07952f8c5ee2",
                  "parentUUID": "8e146b1e-099d-4926-9b31-08229aee33f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3bd8190e-5973-4083-826d-370be8d25d04",
                "39a0526a-5acc-4c7d-9991-60b404a96665",
                "9d5fd47f-e39d-4abb-aada-07952f8c5ee2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "1dece940-a17c-4a46-8ed5-5b510f8952ad",
          "title": "Profile API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
          "file": "\\src\\tests\\integration\\profile.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"before all\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/profiles', profile_1.default);",
              "err": {},
              "uuid": "17784f89-5b01-460e-9911-f4f3d1bfe50d",
              "parentUUID": "1dece940-a17c-4a46-8ed5-5b510f8952ad",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"after each\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "1f27b6ea-3abf-4ea0-a94c-bcf1838e5f14",
              "parentUUID": "1dece940-a17c-4a46-8ed5-5b510f8952ad",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1c0604f5-e3d1-4df9-a928-3e96c1b4b7a1",
              "title": "/api/profiles/verify/:token GET",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing token",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 400 for missing token",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify')\n                .query({})\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'token missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "94d41c48-d922-4d71-91c5-dd0951bbf0fc",
                  "parentUUID": "1c0604f5-e3d1-4df9-a928-3e96c1b4b7a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failing to get user",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 500 for failing to get user",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get user'\n            });\n        })",
                  "err": {},
                  "uuid": "61a314c3-bcb3-4a1d-9cc7-3c9019989bef",
                  "parentUUID": "1c0604f5-e3d1-4df9-a928-3e96c1b4b7a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for not finding valid user",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 404 for not finding valid user",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid or expired verification token'\n            });\n        })",
                  "err": {},
                  "uuid": "b1828e4a-8523-477e-a41e-bb5bf92d2790",
                  "parentUUID": "1c0604f5-e3d1-4df9-a928-3e96c1b4b7a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failing to verify email",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 500 for failing to verify email",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeDate = new Date();\n            const fakeUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test123',\n                verificationTokenExpires: fakeDate,\n                createdAt: fakeDate,\n                updatedAt: fakeDate,\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(fakeUser);\n            sinon_1.default.stub(UserService_1.UserService, 'verifyEmail').throws(new Error(\"Some error related to verifying email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to verify email'\n            });\n        })",
                  "err": {},
                  "uuid": "4570a93b-ed42-4202-acaf-ddc3c6d3fe6b",
                  "parentUUID": "1c0604f5-e3d1-4df9-a928-3e96c1b4b7a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully verifying email",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 200 for successfully verifying email",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeDate = new Date();\n            const fakeUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test123',\n                verificationTokenExpires: fakeDate,\n                createdAt: fakeDate,\n                updatedAt: fakeDate,\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(fakeUser);\n            sinon_1.default.stub(UserService_1.UserService, 'verifyEmail').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Email verified successfully'\n            });\n        })",
                  "err": {},
                  "uuid": "4196cec4-214f-4586-ac0a-5896e2c304a0",
                  "parentUUID": "1c0604f5-e3d1-4df9-a928-3e96c1b4b7a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "94d41c48-d922-4d71-91c5-dd0951bbf0fc",
                "61a314c3-bcb3-4a1d-9cc7-3c9019989bef",
                "b1828e4a-8523-477e-a41e-bb5bf92d2790",
                "4570a93b-ed42-4202-acaf-ddc3c6d3fe6b",
                "4196cec4-214f-4586-ac0a-5896e2c304a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 29,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1cff87d5-70ef-4371-a890-5f08087c5c51",
              "title": "/api/profiles/resend-verification POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({})\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email is required'\n            });\n        })",
                  "err": {},
                  "uuid": "00b858ee-f6b7-4e2d-9fc4-b3ada77f780f",
                  "parentUUID": "1cff87d5-70ef-4371-a890-5f08087c5c51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 123 })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email must be a string'\n            });\n        })",
                  "err": {},
                  "uuid": "b1081f55-6aa6-4648-af14-eb3718abafff",
                  "parentUUID": "1cff87d5-70ef-4371-a890-5f08087c5c51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error while getting user",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 500 for unknown error while getting user",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get user while verifying email'\n            });\n        })",
                  "err": {},
                  "uuid": "d8a5e563-95ed-40b2-9a54-44771aaaadf4",
                  "parentUUID": "1cff87d5-70ef-4371-a890-5f08087c5c51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for unknown user",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 404 for unknown user",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'user cannot be found'\n            });\n        })",
                  "err": {},
                  "uuid": "099c0e5b-c905-4f42-9189-eae378ad652b",
                  "parentUUID": "1cff87d5-70ef-4371-a890-5f08087c5c51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for user with verified email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for user with verified email",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: true\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email is already verified'\n            });\n        })",
                  "err": {},
                  "uuid": "7df8ea30-e81b-4599-874c-f505aa791ba6",
                  "parentUUID": "1cff87d5-70ef-4371-a890-5f08087c5c51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error during resending verification email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 500 for unknown error during resending verification email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'resendVerificationEmail').throws(new Error(\"Some error related to resending verification email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to resend verification email'\n            });\n        })",
                  "err": {},
                  "uuid": "1aff3571-c8ce-4510-8504-88d560a5ea86",
                  "parentUUID": "1cff87d5-70ef-4371-a890-5f08087c5c51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully resending email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 200 for successfully resending email",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'resendVerificationEmail').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Verification email sent'\n            });\n        })",
                  "err": {},
                  "uuid": "3af1f15f-67e5-414d-a9b4-79d54c36c098",
                  "parentUUID": "1cff87d5-70ef-4371-a890-5f08087c5c51",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00b858ee-f6b7-4e2d-9fc4-b3ada77f780f",
                "b1081f55-6aa6-4648-af14-eb3718abafff",
                "d8a5e563-95ed-40b2-9a54-44771aaaadf4",
                "099c0e5b-c905-4f42-9189-eae378ad652b",
                "7df8ea30-e81b-4599-874c-f505aa791ba6",
                "1aff3571-c8ce-4510-8504-88d560a5ea86",
                "3af1f15f-67e5-414d-a9b4-79d54c36c098"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 34,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c6206da1-d1c2-48f5-bec9-1b49b0dfe0c1",
              "title": "/api/profiles/:userId GET",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"/api/profiles/:userId GET\"",
                  "fullTitle": "Profile API /api/profiles/:userId GET \"before each\" hook in \"/api/profiles/:userId GET\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "originalSecret = process.env.JWT_SECRET;",
                  "err": {},
                  "uuid": "5e2a143a-8629-4dea-b84d-ad53f0efe026",
                  "parentUUID": "c6206da1-d1c2-48f5-bec9-1b49b0dfe0c1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"/api/profiles/:userId GET\"",
                  "fullTitle": "Profile API /api/profiles/:userId GET \"after each\" hook in \"/api/profiles/:userId GET\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.JWT_SECRET = originalSecret; // restore",
                  "err": {},
                  "uuid": "3eb245f3-6817-441b-919f-8da71768ee27",
                  "parentUUID": "c6206da1-d1c2-48f5-bec9-1b49b0dfe0c1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return 401 for no auth token on header",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 401 for no auth token on header",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/')\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No auth token in header'\n            });\n        })",
                  "err": {},
                  "uuid": "c71480cf-73a5-4724-bc6d-a64142b88382",
                  "parentUUID": "c6206da1-d1c2-48f5-bec9-1b49b0dfe0c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unconfigured JWT",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for unconfigured JWT",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            delete process.env.JWT_SECRET;\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'JWT not configured'\n            });\n        })",
                  "err": {},
                  "uuid": "4385b5ae-b7a9-4157-bb96-c2a0d9380ccb",
                  "parentUUID": "c6206da1-d1c2-48f5-bec9-1b49b0dfe0c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for JWT verification error",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 401 for JWT verification error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new jsonwebtoken_1.JsonWebTokenError(\"Some JWT verification error\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid JWT'\n            });\n        })",
                  "err": {},
                  "uuid": "17b4945f-6e1a-40d1-b769-c0583d49bc4b",
                  "parentUUID": "c6206da1-d1c2-48f5-bec9-1b49b0dfe0c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error JWT",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for unknown error JWT",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new Error(\"Some other error during JWT verification\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error'\n            });\n        })",
                  "err": {},
                  "uuid": "37a014b5-d789-44d6-8ac2-9715f94baf7c",
                  "parentUUID": "c6206da1-d1c2-48f5-bec9-1b49b0dfe0c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing userId on params",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 400 for missing userId on params",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "9d545800-ab69-4d93-b708-26f31c1016aa",
                  "parentUUID": "c6206da1-d1c2-48f5-bec9-1b49b0dfe0c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for error during getting profile",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for error during getting profile",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error during getting profile'\n            });\n        })",
                  "err": {},
                  "uuid": "a09d9c35-6785-4485-bd17-6df4c36bb49b",
                  "parentUUID": "c6206da1-d1c2-48f5-bec9-1b49b0dfe0c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for missing profile for userId",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 404 for missing profile for userId",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get profile with userId'\n            });\n        })",
                  "err": {},
                  "uuid": "b9316f3a-bebd-446e-90cf-b6b827b67b1a",
                  "parentUUID": "c6206da1-d1c2-48f5-bec9-1b49b0dfe0c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully getting profile",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 200 for successfully getting profile",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            const fakeProfile = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(fakeProfile);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Successfully retrieved profile',\n                data: fakeProfile\n            });\n        })",
                  "err": {},
                  "uuid": "aa46c535-b088-4f77-ab59-636ec4d848c8",
                  "parentUUID": "c6206da1-d1c2-48f5-bec9-1b49b0dfe0c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c71480cf-73a5-4724-bc6d-a64142b88382",
                "4385b5ae-b7a9-4157-bb96-c2a0d9380ccb",
                "17b4945f-6e1a-40d1-b769-c0583d49bc4b",
                "37a014b5-d789-44d6-8ac2-9715f94baf7c",
                "9d545800-ab69-4d93-b708-26f31c1016aa",
                "a09d9c35-6785-4485-bd17-6df4c36bb49b",
                "b9316f3a-bebd-446e-90cf-b6b827b67b1a",
                "aa46c535-b088-4f77-ab59-636ec4d848c8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 50,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c8890327-293a-435e-b0a7-dba281a57922",
              "title": "/api/profiles/:userId PATCH",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"/api/profiles/:userId PATCH\"",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH \"before each\" hook in \"/api/profiles/:userId PATCH\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "originalSecret = process.env.JWT_SECRET;",
                  "err": {},
                  "uuid": "a68241a1-36a8-495b-b2b2-e34a7ad12eb1",
                  "parentUUID": "c8890327-293a-435e-b0a7-dba281a57922",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"/api/profiles/:userId PATCH\"",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH \"after each\" hook in \"/api/profiles/:userId PATCH\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.JWT_SECRET = originalSecret; // restore",
                  "err": {},
                  "uuid": "90808348-6341-49db-9688-95145e545084",
                  "parentUUID": "c8890327-293a-435e-b0a7-dba281a57922",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return 401 for no auth token on header",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 401 for no auth token on header",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/')\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No auth token in header'\n            });\n        })",
                  "err": {},
                  "uuid": "d801ff2d-3782-479c-bf59-f77d854c23fc",
                  "parentUUID": "c8890327-293a-435e-b0a7-dba281a57922",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unconfigured JWT",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for unconfigured JWT",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            delete process.env.JWT_SECRET;\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'JWT not configured'\n            });\n        })",
                  "err": {},
                  "uuid": "11b164f7-973d-4006-9312-12f486614dee",
                  "parentUUID": "c8890327-293a-435e-b0a7-dba281a57922",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for JWT verification error",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 401 for JWT verification error",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new jsonwebtoken_1.JsonWebTokenError(\"Some JWT verification error\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid JWT'\n            });\n        })",
                  "err": {},
                  "uuid": "1e2b178b-8101-4490-aa2c-9780d98ba236",
                  "parentUUID": "c8890327-293a-435e-b0a7-dba281a57922",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error JWT",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for unknown error JWT",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new Error(\"Some other error during JWT verification\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error'\n            });\n        })",
                  "err": {},
                  "uuid": "5b2f937f-478a-440e-9056-563986613120",
                  "parentUUID": "c8890327-293a-435e-b0a7-dba281a57922",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing userId on params",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 400 for missing userId on params",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "e561d6e3-3032-4117-ad29-5e98f3c2e985",
                  "parentUUID": "c8890327-293a-435e-b0a7-dba281a57922",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing updateData in body",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 400 for missing updateData in body",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: null })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'updated profile missing from body'\n            });\n        })",
                  "err": {},
                  "uuid": "a6078f34-8f31-4735-9372-20ffc1f7da34",
                  "parentUUID": "c8890327-293a-435e-b0a7-dba281a57922",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for error during getting profile",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for error during getting profile",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error during getting profile'\n            });\n        })",
                  "err": {},
                  "uuid": "c16cb653-91d7-461e-a416-df9783f160f1",
                  "parentUUID": "c8890327-293a-435e-b0a7-dba281a57922",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for missing profile for userId",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 404 for missing profile for userId",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(null);\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No profile found'\n            });\n        })",
                  "err": {},
                  "uuid": "1e740c93-b860-40a7-a03c-7fc0a1b778c4",
                  "parentUUID": "c8890327-293a-435e-b0a7-dba281a57922",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for error with updating profile",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for error with updating profile",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '1TB',\n                RAM_preference: '32GB',\n                brand_preference: 'NVidia, Intel',\n                min_budget: 200,\n                max_budget: 1000,\n                rating_preference: 3,\n                country: 'US',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            const existingProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(existingProfileData);\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'updateProfile').throws(new Error(\"Some error related to updating profile\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to update profile'\n            });\n        })",
                  "err": {},
                  "uuid": "5b387b48-a1d1-4c6f-b5d9-5fce39e3b993",
                  "parentUUID": "c8890327-293a-435e-b0a7-dba281a57922",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully updating profile",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 200 for successfully updating profile",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'userId123',\n                storage_preference: '1TB',\n                RAM_preference: '32GB',\n                brand_preference: 'NVidia, Intel',\n                min_budget: 200,\n                max_budget: 1000,\n                rating_preference: 3,\n                country: 'US',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            const existingProfileData = {\n                _id: 'test id',\n                userId: 'userId123',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(existingProfileData);\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'updateProfile').resolves(fakeProfileData);\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Profile updated successfully',\n                data: fakeProfileData\n            });\n        })",
                  "err": {},
                  "uuid": "a2f23874-ad9a-4ed6-ac56-b2da1b20e1d4",
                  "parentUUID": "c8890327-293a-435e-b0a7-dba281a57922",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d801ff2d-3782-479c-bf59-f77d854c23fc",
                "11b164f7-973d-4006-9312-12f486614dee",
                "1e2b178b-8101-4490-aa2c-9780d98ba236",
                "5b2f937f-478a-440e-9056-563986613120",
                "e561d6e3-3032-4117-ad29-5e98f3c2e985",
                "a6078f34-8f31-4735-9372-20ffc1f7da34",
                "c16cb653-91d7-461e-a416-df9783f160f1",
                "1e740c93-b860-40a7-a03c-7fc0a1b778c4",
                "5b387b48-a1d1-4c6f-b5d9-5fce39e3b993",
                "a2f23874-ad9a-4ed6-ac56-b2da1b20e1d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 74,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "integration-tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-integration",
        "reportFilename": "integration-tests"
      },
      "version": "6.2.0"
    }
  }
}