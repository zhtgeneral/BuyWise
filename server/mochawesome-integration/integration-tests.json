{
  "stats": {
    "suites": 15,
    "tests": 83,
    "passes": 78,
    "pending": 0,
    "failures": 5,
    "start": "2025-07-04T01:09:50.781Z",
    "end": "2025-07-04T01:09:59.829Z",
    "duration": 9048,
    "testsRegistered": 83,
    "passPercent": 93.97590361445783,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "87c4d26c-6ef2-4eae-82e3-fa40b4fea529",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "329099f6-4a76-44a7-8535-e051bc58ace2",
          "title": "Auth API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\auth.test.ts",
          "file": "\\src\\tests\\integration\\auth.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"before all\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/auth', auth_1.default);",
              "err": {},
              "uuid": "f926e44f-5bf0-4263-aeff-fa6f3c8c12ca",
              "parentUUID": "329099f6-4a76-44a7-8535-e051bc58ace2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"after each\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "d60b0954-d56f-471c-8647-559fedf883ec",
              "parentUUID": "329099f6-4a76-44a7-8535-e051bc58ace2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "8a24b1f7-d7a9-4927-8f80-f8740e40457b",
              "title": "/api/auth/register POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\auth.test.ts",
              "file": "\\src\\tests\\integration\\auth.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing name",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing name",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "71b9c46b-0332-4ab9-9d72-f7bd6f9d4ebd",
                  "parentUUID": "8a24b1f7-d7a9-4927-8f80-f8740e40457b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "efe2fe17-f1b0-429a-82f7-b28e36765913",
                  "parentUUID": "8a24b1f7-d7a9-4927-8f80-f8740e40457b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing password",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing password",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 'test@example.com',\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "f259957d-5110-4769-b44e-d57b37a05f74",
                  "parentUUID": "8a24b1f7-d7a9-4927-8f80-f8740e40457b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string name",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string name",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 123,\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "9fb57793-3a73-4c25-b135-c8d726129ec5",
                  "parentUUID": "8a24b1f7-d7a9-4927-8f80-f8740e40457b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 123,\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "dc823069-18b7-4b6f-8b45-e21cf8228142",
                  "parentUUID": "8a24b1f7-d7a9-4927-8f80-f8740e40457b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string password",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string password",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 'test@example.com',\n                password: 123\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "2c956006-6d67-4933-8c34-c0104db7fb01",
                  "parentUUID": "8a24b1f7-d7a9-4927-8f80-f8740e40457b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed email validation",
                  "fullTitle": "Auth API /api/auth/register POST should return 500 for failed email validation",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').throws(new Error(\"Error related to searching user with email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to determine validity of email'\n            });\n        })",
                  "err": {},
                  "uuid": "1a59d3dc-dc6f-417b-bc14-4533e77ce2b6",
                  "parentUUID": "8a24b1f7-d7a9-4927-8f80-f8740e40457b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for existing account",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for existing account",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves({\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: true\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'existing@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Email already exists. Pleast try logging in instead'\n            });\n        })",
                  "err": {},
                  "uuid": "979bda4e-12e7-47ce-9039-be3db2463ed6",
                  "parentUUID": "8a24b1f7-d7a9-4927-8f80-f8740e40457b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed register",
                  "fullTitle": "Auth API /api/auth/register POST should return 500 for failed register",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            sinon_1.default.stub(authService_1.AuthService, 'register').throws(new Error(\"Unknown error in register\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Registration failed. Please try again'\n            });\n        })",
                  "err": {},
                  "uuid": "9f667911-df06-4c83-adf2-3ee3a20a565d",
                  "parentUUID": "8a24b1f7-d7a9-4927-8f80-f8740e40457b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 201 on successful register",
                  "fullTitle": "Auth API /api/auth/register POST should return 201 on successful register",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUser = {\n                _id: 'test user id',\n                name: 'test user',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test token',\n                verificationTokenExpires: (new Date(Date.now() + 24 * 60 * 60 * 1000)).toISOString(),\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            sinon_1.default.stub(authService_1.AuthService, 'register').resolves({\n                token: '123abc',\n                user: fakeUser\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(201);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Registration successful! Your account has been created and verified',\n                data: fakeUser,\n                token: '123abc'\n            });\n        })",
                  "err": {},
                  "uuid": "c66b754f-3770-4f00-ab21-d203f2a6fc39",
                  "parentUUID": "8a24b1f7-d7a9-4927-8f80-f8740e40457b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "71b9c46b-0332-4ab9-9d72-f7bd6f9d4ebd",
                "efe2fe17-f1b0-429a-82f7-b28e36765913",
                "f259957d-5110-4769-b44e-d57b37a05f74",
                "9fb57793-3a73-4c25-b135-c8d726129ec5",
                "dc823069-18b7-4b6f-8b45-e21cf8228142",
                "2c956006-6d67-4933-8c34-c0104db7fb01",
                "1a59d3dc-dc6f-417b-bc14-4533e77ce2b6",
                "979bda4e-12e7-47ce-9039-be3db2463ed6",
                "9f667911-df06-4c83-adf2-3ee3a20a565d",
                "c66b754f-3770-4f00-ab21-d203f2a6fc39"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 101,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "6a60811a-2a3f-4e7b-bdce-8dab1451cf32",
              "title": "/api/auth/login POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\auth.test.ts",
              "file": "\\src\\tests\\integration\\auth.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                password: 'hashed-password'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password are required\"\n            });\n        })",
                  "err": {},
                  "uuid": "5f0f0848-7c95-4944-b4cb-0aa219254551",
                  "parentUUID": "6a60811a-2a3f-4e7b-bdce-8dab1451cf32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing password",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for missing password",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: \"test@example.com\"\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password are required\"\n            });\n        })",
                  "err": {},
                  "uuid": "a72af59e-6fab-4a05-b26d-bc02d1a63200",
                  "parentUUID": "6a60811a-2a3f-4e7b-bdce-8dab1451cf32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 123,\n                password: 'test-hash'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password must be strings\"\n            });\n        })",
                  "err": {},
                  "uuid": "609bbf3c-6913-4bea-8fb5-911c7c1ea90b",
                  "parentUUID": "6a60811a-2a3f-4e7b-bdce-8dab1451cf32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string password",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for non string password",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 123\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password must be strings\"\n            });\n        })",
                  "err": {},
                  "uuid": "093676ad-8dc8-4753-bc6a-a169fd193947",
                  "parentUUID": "6a60811a-2a3f-4e7b-bdce-8dab1451cf32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for bad email",
                  "fullTitle": "Auth API /api/auth/login POST should return 401 for bad email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Invalid email or password\"\n            });\n        })",
                  "err": {},
                  "uuid": "52c0275e-1032-46aa-a75a-db8669183bf2",
                  "parentUUID": "6a60811a-2a3f-4e7b-bdce-8dab1451cf32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for unverified email",
                  "fullTitle": "Auth API /api/auth/login POST should return 401 for unverified email",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const unverifiedUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                password: 'test-hash',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(unverifiedUser);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Please verify your email before logging in\"\n            });\n        })",
                  "err": {},
                  "uuid": "47628235-5da0-4b73-9689-d87ee7500e74",
                  "parentUUID": "6a60811a-2a3f-4e7b-bdce-8dab1451cf32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error during login",
                  "fullTitle": "Auth API /api/auth/login POST should return 500 for unknown error during login",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                _id: 'test_id',\n                email: 'test@example.com',\n                password: 'test-hash',\n                isEmailVerified: true\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(userWithPassword);\n            sinon_1.default.stub(authService_1.AuthService, 'login').throws(new Error(\"Some error during login\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Unknown authentication error\"\n            });\n        })",
                  "err": {},
                  "uuid": "8ab5b731-6267-4152-ac29-545cbe74b642",
                  "parentUUID": "6a60811a-2a3f-4e7b-bdce-8dab1451cf32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 with token and user for successful login",
                  "fullTitle": "Auth API /api/auth/login POST should return 200 with token and user for successful login",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                email: 'test@example.com',\n                password: 'hashed-password',\n                isEmailVerified: true,\n            };\n            const { password } = userWithPassword, userWithoutPassword = __rest(userWithPassword, [\"password\"]);\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(userWithPassword);\n            sinon_1.default.stub(authService_1.AuthService, 'login').resolves({\n                token: 'token123',\n                user: userWithoutPassword\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'hashed-password'\n            })\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Login successful',\n                user: userWithoutPassword,\n                token: 'token123'\n            });\n        })",
                  "err": {},
                  "uuid": "94db23df-90ba-4046-95bf-dff26bfa6051",
                  "parentUUID": "6a60811a-2a3f-4e7b-bdce-8dab1451cf32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f0f0848-7c95-4944-b4cb-0aa219254551",
                "a72af59e-6fab-4a05-b26d-bc02d1a63200",
                "609bbf3c-6913-4bea-8fb5-911c7c1ea90b",
                "093676ad-8dc8-4753-bc6a-a169fd193947",
                "52c0275e-1032-46aa-a75a-db8669183bf2",
                "47628235-5da0-4b73-9689-d87ee7500e74",
                "8ab5b731-6267-4152-ac29-545cbe74b642",
                "94db23df-90ba-4046-95bf-dff26bfa6051"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 45,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "a4afc020-b481-4b8d-b224-2c28c80b53e4",
          "title": "Chat API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chat.test.ts",
          "file": "\\src\\tests\\integration\\chat.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Chat API\"",
              "fullTitle": "Chat API \"before all\" hook in \"Chat API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/chat', chat_1.default);",
              "err": {},
              "uuid": "44ff58ef-4699-4979-9897-6846dda06f09",
              "parentUUID": "a4afc020-b481-4b8d-b224-2c28c80b53e4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Chat API\"",
              "fullTitle": "Chat API \"after each\" hook in \"Chat API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "5b576b8a-d655-489d-b76f-810a7dd4f534",
              "parentUUID": "a4afc020-b481-4b8d-b224-2c28c80b53e4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "6f645428-8d95-411c-a9e9-704b52979562",
              "title": "/api/chat POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chat.test.ts",
              "file": "\\src\\tests\\integration\\chat.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing messages",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'test@example.com'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages and email required'\n            });\n        })",
                  "err": {},
                  "uuid": "982d45a1-6e77-475b-af39-31c70a743fe6",
                  "parentUUID": "6f645428-8d95-411c-a9e9-704b52979562",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                messages: [\n                    {\n                        speaker: 'user',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'bot',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages and email required'\n            });\n        })",
                  "err": {},
                  "uuid": "256148af-b072-4d99-8958-d63c211ea1ac",
                  "parentUUID": "6f645428-8d95-411c-a9e9-704b52979562",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 123,\n                messages: [\n                    {\n                        speaker: 'user',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'bot',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email needs to be a string'\n            });\n        })",
                  "err": {},
                  "uuid": "343e9c7c-1ec5-4488-88a0-dab561f20f91",
                  "parentUUID": "6f645428-8d95-411c-a9e9-704b52979562",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non array messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non array messages",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: 'filler'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages needs to be an array'\n            });\n        })",
                  "err": {},
                  "uuid": "eadec754-15d9-496b-9bdc-1bdb1e0e0e06",
                  "parentUUID": "6f645428-8d95-411c-a9e9-704b52979562",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing text in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing text in messages",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                    },\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "c9b94c5f-bfde-4a26-831d-b4eeabb4bcd4",
                  "parentUUID": "6f645428-8d95-411c-a9e9-704b52979562",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing speaker in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing speaker in messages",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        text: 'first reply'\n                    },\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "dd84bd99-38aa-458b-850b-30a0a49af4a7",
                  "parentUUID": "6f645428-8d95-411c-a9e9-704b52979562",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid speaker in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for invalid speaker in messages",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'NOT A BOT OR A USER',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "97990065-2334-4a00-9c0d-8362d9835b30",
                  "parentUUID": "6f645428-8d95-411c-a9e9-704b52979562",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string text in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non string text in messages",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                        text: 12345\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "96c41db9-58af-4a17-ba14-b368b5142067",
                  "parentUUID": "6f645428-8d95-411c-a9e9-704b52979562",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed save chat",
                  "fullTitle": "Chat API /api/chat POST should return 500 for failed save chat",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(ChatService_1.ChatService, 'saveChat').throws(new Error(\"Some error in save chat\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to save chat'\n            });\n        })",
                  "err": {},
                  "uuid": "3c979abf-f7e7-4bca-9b65-1091476a116d",
                  "parentUUID": "6f645428-8d95-411c-a9e9-704b52979562",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for working save chat",
                  "fullTitle": "Chat API /api/chat POST should return 200 for working save chat",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const testDate = new Date('2025-06-30T01:14:27.853Z').toISOString();\n            const messagesData = [\n                {\n                    speaker: 'bot',\n                    text: 'first message',\n                    timestamp: testDate\n                },\n                {\n                    speaker: 'user',\n                    text: 'first reply',\n                    timestamp: testDate\n                }\n            ];\n            const mockChat = {\n                messages: messagesData,\n                email: 'text@example.com',\n                createdAt: testDate\n            };\n            sinon_1.default.stub(ChatService_1.ChatService, 'saveChat').resolves(mockChat);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: messagesData\n            })\n                .expect(201);\n            (0, chai_1.expect)(response.body).to.deep.equal(mockChat);\n        })",
                  "err": {},
                  "uuid": "5a115fd0-62b8-41c2-b980-a026c92836b7",
                  "parentUUID": "6f645428-8d95-411c-a9e9-704b52979562",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "982d45a1-6e77-475b-af39-31c70a743fe6",
                "256148af-b072-4d99-8958-d63c211ea1ac",
                "343e9c7c-1ec5-4488-88a0-dab561f20f91",
                "eadec754-15d9-496b-9bdc-1bdb1e0e0e06",
                "c9b94c5f-bfde-4a26-831d-b4eeabb4bcd4",
                "dd84bd99-38aa-458b-850b-30a0a49af4a7",
                "97990065-2334-4a00-9c0d-8362d9835b30",
                "96c41db9-58af-4a17-ba14-b368b5142067",
                "3c979abf-f7e7-4bca-9b65-1091476a116d",
                "5a115fd0-62b8-41c2-b980-a026c92836b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 51,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "db4640b9-0f40-451e-ada7-911d225b75ee",
          "title": "Chatbot API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts",
          "file": "\\src\\tests\\integration\\chatbot.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Chatbot API\"",
              "fullTitle": "Chatbot API \"before all\" hook in \"Chatbot API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.post('/api/chatbot', chatbot_1.postChat);",
              "err": {},
              "uuid": "a318e8e2-8a6b-4455-a10b-d97862f94680",
              "parentUUID": "db4640b9-0f40-451e-ada7-911d225b75ee",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Chatbot API\"",
              "fullTitle": "Chatbot API \"after each\" hook in \"Chatbot API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "de839f1d-96d6-4b4f-af6a-7b752793a9ae",
              "parentUUID": "db4640b9-0f40-451e-ada7-911d225b75ee",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "055e0185-46ad-4f7e-9378-36857e1f5de7",
              "title": "/api/chatbot POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts",
              "file": "\\src\\tests\\integration\\chatbot.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 400 code for missing message",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for missing message",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({})\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message is required' });\n        })",
                  "err": {},
                  "uuid": "fe2a7cc7-e1af-45e3-bd69-4b96b6dca9b8",
                  "parentUUID": "055e0185-46ad-4f7e-9378-36857e1f5de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 400 code for wrong data type",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for wrong data type",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: 0 })\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message is required' });\n        })",
                  "err": {},
                  "uuid": "1d066d27-8d80-4098-b9a5-8d88fc6f1f89",
                  "parentUUID": "055e0185-46ad-4f7e-9378-36857e1f5de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 400 code for empty message",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for empty message",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"\" })\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message is required' });\n        })",
                  "err": {},
                  "uuid": "7e4449bc-8778-4a32-9b40-fd8dd0deaea1",
                  "parentUUID": "055e0185-46ad-4f7e-9378-36857e1f5de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 500 code for failed chatbot API call",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 500 code for failed chatbot API call",
                  "timedOut": false,
                  "duration": 1332,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').throws(new Error(\"some API error message\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"hi\" })\n                .expect(500);\n            expect(response.body).to.deep.equal({ error: 'Unable to call chatbot API' });\n        })",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:68:10\n    at Generator.next (<anonymous>)\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:41:71\n    at new Promise (<anonymous>)\n    at __awaiter (src\\tests\\integration\\chatbot.test.ts:37:12)\n    at Context.<anonymous> (src\\tests\\integration\\chatbot.test.ts:63:67)\n    at processImmediate (node:internal/timers:485:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:267:14)\n    at D:\\Uni\\C455\\Project\\team10\\server\\node_modules\\supertest\\lib\\test.js:323:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:300:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:179:23)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:135:14)\n    at Object.onceWrapper (node:events:632:28)\n    at Server.emit (node:events:518:28)\n    at Server.emit (node:domain:489:12)\n    at emitCloseNT (node:net:2419:8)\n    at processTicksAndRejections (node:internal/process/task_queues:89:21)",
                    "diff": null
                  },
                  "uuid": "fd45108f-b79c-49ed-b9e0-75c6fe8f5d51",
                  "parentUUID": "055e0185-46ad-4f7e-9378-36857e1f5de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 500 code for incomplete chatbot response",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 500 code for incomplete chatbot response",
                  "timedOut": false,
                  "duration": 1057,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"\",\n                productRequested: false,\n                productQuery: \"\"\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"give me an incomplete response\" })\n                .expect(500);\n            expect(response.body).to.deep.equal({ error: 'AI unable to respond' });\n        })",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:83:10\n    at Generator.next (<anonymous>)\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:41:71\n    at new Promise (<anonymous>)\n    at __awaiter (src\\tests\\integration\\chatbot.test.ts:37:12)\n    at Context.<anonymous> (src\\tests\\integration\\chatbot.test.ts:73:71)\n    at processImmediate (node:internal/timers:485:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:267:14)\n    at D:\\Uni\\C455\\Project\\team10\\server\\node_modules\\supertest\\lib\\test.js:323:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:300:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:179:23)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:135:14)\n    at Object.onceWrapper (node:events:632:28)\n    at Server.emit (node:events:518:28)\n    at Server.emit (node:domain:489:12)\n    at emitCloseNT (node:net:2419:8)\n    at processTicksAndRejections (node:internal/process/task_queues:89:21)",
                    "diff": null
                  },
                  "uuid": "ad5a1670-b4bd-4339-a35f-e3502720ca73",
                  "parentUUID": "055e0185-46ad-4f7e-9378-36857e1f5de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API without products",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API without products",
                  "timedOut": false,
                  "duration": 1623,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"What would you like to search for?\",\n                productRequested: false,\n                productQuery: \"\"\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"test message\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"What would you like to search for?\",\n                productData: null\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:99:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"I'm here to help you find the perfect laptops, phones, or computers. What device are you interested in today?\"\n+   \"chatbotMessage\": \"What would you like to search for?\"\n   \"productData\": [null]\n }\n"
                  },
                  "uuid": "df14afad-6981-4f04-99ef-6b2ed05c79fb",
                  "parentUUID": "055e0185-46ad-4f7e-9378-36857e1f5de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API and failed product API",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API and failed product API",
                  "timedOut": false,
                  "duration": 1332,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productRequested: true,\n                productQuery: \"macbook\"\n            });\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').throws(new Error(\"some API error message\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"I want some macbooks\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productData: null\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:118:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"I found some MacBook options for you! Would you like to see the latest models, or are you interested in specific features or price ranges?\"\n+   \"chatbotMessage\": \"Here are some macbooks I found.\"\n   \"productData\": [null]\n }\n"
                  },
                  "uuid": "dfd8c4df-9c49-419d-a969-22795f26793b",
                  "parentUUID": "055e0185-46ad-4f7e-9378-36857e1f5de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API and product API",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API and product API",
                  "timedOut": false,
                  "duration": 3094,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const mockProduct = {\n                product_id: \"123\",\n                source: \"Best Buy\",\n                title: \"MacBook Pro\",\n                thumbnail: \"image.jpg\",\n                extracted_price: 1299,\n                seller_details: { direct_link: \"http://example.com\" },\n                rating: 4.5,\n                reviews: 120\n            };\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productRequested: true,\n                productQuery: \"macbook\"\n            });\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').resolves([mockProduct]);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"I want some macbooks\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productData: [{\n                        id: mockProduct.product_id,\n                        source: mockProduct.source,\n                        title: mockProduct.title,\n                        image: mockProduct.thumbnail,\n                        price: mockProduct.extracted_price,\n                        url: mockProduct.seller_details.direct_link,\n                        rating: mockProduct.rating,\n                        reviews: mockProduct.reviews\n                    }]\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:147:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"I found a MacBook Pro available for $1299 with a 4.5-star rating and 120 reviews. You can view it [here](http://localhost:3000/api/buywise/redirect/1751591396873-ebl8es?data=eyJvcmlnaW5hbFVybCI6Imh0dHA6Ly9leGFtcGxlLmNvbSIsInBhcmFtcyI6eyJwcm9kdWN0X2lkIjoiMTIzIiwic291cmNlIjoiQmVzdCBCdXkiLCJ0aXRsZSI6Ik1hY0Jvb2sgUHJvIiwicHJpY2UiOjEyOTl9LCJyZWRpcmVjdFVybCI6Imh0dHA6Ly9leGFtcGxlLmNvbT9wcm9kdWN0X2lkPTEyMyZzb3VyY2U9QmVzdCtCdXkmdGl0bGU9TWFjQm9vaytQcm8mcHJpY2U9MTI5OSJ). Would you like to see more options or details?\"\n+   \"chatbotMessage\": \"Here are some macbooks I found.\"\n   \"productData\": [\n     {\n       \"id\": \"123\"\n       \"image\": \"image.jpg\"\n       \"rating\": 4.5\n       \"reviews\": 120\n       \"source\": \"Best Buy\"\n       \"title\": \"MacBook Pro\"\n-       \"url\": \"http://localhost:3000/api/buywise/redirect/1751591396873-ebl8es?data=eyJvcmlnaW5hbFVybCI6Imh0dHA6Ly9leGFtcGxlLmNvbSIsInBhcmFtcyI6eyJwcm9kdWN0X2lkIjoiMTIzIiwic291cmNlIjoiQmVzdCBCdXkiLCJ0aXRsZSI6Ik1hY0Jvb2sgUHJvIiwicHJpY2UiOjEyOTl9LCJyZWRpcmVjdFVybCI6Imh0dHA6Ly9leGFtcGxlLmNvbT9wcm9kdWN0X2lkPTEyMyZzb3VyY2U9QmVzdCtCdXkmdGl0bGU9TWFjQm9vaytQcm8mcHJpY2U9MTI5OSJ9\"\n+       \"url\": \"http://example.com\"\n     }\n   ]\n }\n"
                  },
                  "uuid": "4f30375e-53ea-4f3d-b471-973ae57fc8b6",
                  "parentUUID": "055e0185-46ad-4f7e-9378-36857e1f5de7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe2a7cc7-e1af-45e3-bd69-4b96b6dca9b8",
                "1d066d27-8d80-4098-b9a5-8d88fc6f1f89",
                "7e4449bc-8778-4a32-9b40-fd8dd0deaea1"
              ],
              "failures": [
                "fd45108f-b79c-49ed-b9e0-75c6fe8f5d51",
                "ad5a1670-b4bd-4339-a35f-e3502720ca73",
                "df14afad-6981-4f04-99ef-6b2ed05c79fb",
                "dfd8c4df-9c49-419d-a969-22795f26793b",
                "4f30375e-53ea-4f3d-b471-973ae57fc8b6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8453,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "c91a6168-f7ad-47a0-afb0-cb3c59785c21",
          "title": "Products API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\products.test.ts",
          "file": "\\src\\tests\\integration\\products.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Products API\"",
              "fullTitle": "Products API \"before all\" hook in \"Products API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use('/api/products', products_1.default);",
              "err": {},
              "uuid": "cf3521f8-c4ee-45a6-bb00-50bbdd16c62c",
              "parentUUID": "c91a6168-f7ad-47a0-afb0-cb3c59785c21",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Products API\"",
              "fullTitle": "Products API \"after each\" hook in \"Products API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "3c86abca-4795-407a-bd57-355783284c93",
              "parentUUID": "c91a6168-f7ad-47a0-afb0-cb3c59785c21",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "6b1c46c4-22cd-4bbe-8810-004f06e8bbcf",
              "title": "GET /api/products/search",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\products.test.ts",
              "file": "\\src\\tests\\integration\\products.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 and products for a valid search query",
                  "fullTitle": "Products API GET /api/products/search should return 200 and products for a valid search query",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProducts = [\n                {\n                    category: 'Popular products',\n                    thumbnail: 'https://example.com/image.jpg',\n                    source_logo: 'https://example.com/logo.png',\n                    source: 'Best Buy',\n                    title: 'HP 14\" Intel Celeron Laptop',\n                    rating: 4.2,\n                    reviews: 148,\n                    price: '$199.99',\n                    extracted_price: 199.99,\n                    location: 'Nearby, 13 mi',\n                    product_id: '2197135960910078338',\n                    seller_details: [\n                        {\n                            position: 1,\n                            name: 'Best Buy',\n                            top_quality_store: true,\n                            payment_methods: 'PayPal, Zip accepted',\n                            rating: 4.6,\n                            reviews: 532,\n                            reviews_original: '(532)',\n                            link: 'https://google.com/redirect',\n                            direct_link: 'https://bestbuy.com/product',\n                            details_and_offers: [{ text: '5.3 mi · In stock at GainesvilleToday: 10:00 AM - 8:00 PM' }],\n                            base_price: '$199.99',\n                            additional_price: { shipping: 'See website' },\n                            total_price: '$199.99',\n                        }\n                    ],\n                },\n            ];\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').resolves(fakeProducts);\n            const res = yield (0, supertest_1.default)(app)\n                .get('/api/products/search')\n                .query({ q: 'Laptop under $400', device: 'desktop', location: 'Canada' });\n            (0, chai_1.expect)(res.status).to.equal(200);\n            (0, chai_1.expect)(res.body.success).to.be.true;\n            (0, chai_1.expect)(res.body.products).to.deep.equal(fakeProducts);\n        })",
                  "err": {},
                  "uuid": "4c888fb6-09a6-4a21-9d09-8d33e53ad1ba",
                  "parentUUID": "6b1c46c4-22cd-4bbe-8810-004f06e8bbcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if the search query is missing",
                  "fullTitle": "Products API GET /api/products/search should return 400 if the search query is missing",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const res = yield (0, supertest_1.default)(app).get('/api/products/search');\n            (0, chai_1.expect)(res.status).to.equal(400);\n            (0, chai_1.expect)(res.body.success).to.be.false;\n            (0, chai_1.expect)(res.body.error).to.equal('Search query is required');\n        })",
                  "err": {},
                  "uuid": "3372a122-fe45-4e67-a8dc-61ea40d1d9b1",
                  "parentUUID": "6b1c46c4-22cd-4bbe-8810-004f06e8bbcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if the ProductService throws an error",
                  "fullTitle": "Products API GET /api/products/search should return 500 if the ProductService throws an error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').throws(new Error('SerpAPI error'));\n            const res = yield (0, supertest_1.default)(app)\n                .get('/api/products/search')\n                .query({ q: 'Laptop' });\n            (0, chai_1.expect)(res.status).to.equal(500);\n            (0, chai_1.expect)(res.body.success).to.be.false;\n            (0, chai_1.expect)(res.body.error).to.equal('SerpAPI error');\n        })",
                  "err": {},
                  "uuid": "ae5e99f7-5145-4942-af87-6c927a3842e1",
                  "parentUUID": "6b1c46c4-22cd-4bbe-8810-004f06e8bbcf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c888fb6-09a6-4a21-9d09-8d33e53ad1ba",
                "3372a122-fe45-4e67-a8dc-61ea40d1d9b1",
                "ae5e99f7-5145-4942-af87-6c927a3842e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "e161f932-e353-4b9b-855f-01ce90d09415",
          "title": "Profile API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
          "file": "\\src\\tests\\integration\\profile.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"before all\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/profiles', profile_1.default);",
              "err": {},
              "uuid": "ed5a7cb9-0498-4d37-9eaa-f484a0ef0c4a",
              "parentUUID": "e161f932-e353-4b9b-855f-01ce90d09415",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"after each\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "a7fd729a-94bd-4c15-92b5-14bbc6a84e4b",
              "parentUUID": "e161f932-e353-4b9b-855f-01ce90d09415",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "8003733a-2ca8-44fe-a475-12e7b0daafa0",
              "title": "/api/profiles/verify/:token GET",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing token",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 400 for missing token",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify')\n                .query({})\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'token missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "c30ca30b-918f-4ac3-83fd-3003625466a6",
                  "parentUUID": "8003733a-2ca8-44fe-a475-12e7b0daafa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failing to get user",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 500 for failing to get user",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get user'\n            });\n        })",
                  "err": {},
                  "uuid": "4bd8db36-c30c-4d9d-90ab-ce15d34fce0f",
                  "parentUUID": "8003733a-2ca8-44fe-a475-12e7b0daafa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for not finding valid user",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 404 for not finding valid user",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid or expired verification token'\n            });\n        })",
                  "err": {},
                  "uuid": "cd61d39f-2459-42f8-a077-64a767e37a89",
                  "parentUUID": "8003733a-2ca8-44fe-a475-12e7b0daafa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failing to verify email",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 500 for failing to verify email",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeDate = (new Date()).toISOString();\n            const fakeUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test123',\n                verificationTokenExpires: fakeDate,\n                createdAt: fakeDate,\n                updatedAt: fakeDate,\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(fakeUser);\n            sinon_1.default.stub(UserService_1.UserService, 'verifyEmail').throws(new Error(\"Some error related to verifying email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to verify email'\n            });\n        })",
                  "err": {},
                  "uuid": "0eb2aa13-1be0-4fa1-87f8-e86faa677548",
                  "parentUUID": "8003733a-2ca8-44fe-a475-12e7b0daafa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully verifying email",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 200 for successfully verifying email",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeDate = (new Date()).toISOString();\n            const fakeUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test123',\n                verificationTokenExpires: fakeDate,\n                createdAt: fakeDate,\n                updatedAt: fakeDate,\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(fakeUser);\n            sinon_1.default.stub(UserService_1.UserService, 'verifyEmail').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Email verified successfully'\n            });\n        })",
                  "err": {},
                  "uuid": "7c6be15b-956d-474b-8185-6242073f964a",
                  "parentUUID": "8003733a-2ca8-44fe-a475-12e7b0daafa0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c30ca30b-918f-4ac3-83fd-3003625466a6",
                "4bd8db36-c30c-4d9d-90ab-ce15d34fce0f",
                "cd61d39f-2459-42f8-a077-64a767e37a89",
                "0eb2aa13-1be0-4fa1-87f8-e86faa677548",
                "7c6be15b-956d-474b-8185-6242073f964a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 29,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "26ecb92b-838f-47de-a53e-80311986dae3",
              "title": "/api/profiles/resend-verification POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({})\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email is required'\n            });\n        })",
                  "err": {},
                  "uuid": "d25c1cf3-6f15-4d81-aeb3-65b59c7c4d0f",
                  "parentUUID": "26ecb92b-838f-47de-a53e-80311986dae3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 123 })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email must be a string'\n            });\n        })",
                  "err": {},
                  "uuid": "274fcabe-2383-44c7-af8a-a1a602badeef",
                  "parentUUID": "26ecb92b-838f-47de-a53e-80311986dae3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error while getting user",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 500 for unknown error while getting user",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get user while verifying email'\n            });\n        })",
                  "err": {},
                  "uuid": "f6c1ef46-ab48-4f37-9b42-b3991593e657",
                  "parentUUID": "26ecb92b-838f-47de-a53e-80311986dae3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for unknown user",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 404 for unknown user",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'user cannot be found'\n            });\n        })",
                  "err": {},
                  "uuid": "c982a2a9-5b69-4a59-8db8-17f36283a9a2",
                  "parentUUID": "26ecb92b-838f-47de-a53e-80311986dae3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for user with verified email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for user with verified email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: true\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email is already verified'\n            });\n        })",
                  "err": {},
                  "uuid": "2a7aab39-5edd-480a-9e09-0d26b63b347a",
                  "parentUUID": "26ecb92b-838f-47de-a53e-80311986dae3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error during resending verification email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 500 for unknown error during resending verification email",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'resendVerificationEmail').throws(new Error(\"Some error related to resending verification email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to resend verification email'\n            });\n        })",
                  "err": {},
                  "uuid": "7b19e732-d927-4686-bb3b-353af44a9846",
                  "parentUUID": "26ecb92b-838f-47de-a53e-80311986dae3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully resending email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 200 for successfully resending email",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'resendVerificationEmail').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Verification email sent'\n            });\n        })",
                  "err": {},
                  "uuid": "4d3b79c1-947c-4958-aa76-d0caeace079b",
                  "parentUUID": "26ecb92b-838f-47de-a53e-80311986dae3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d25c1cf3-6f15-4d81-aeb3-65b59c7c4d0f",
                "274fcabe-2383-44c7-af8a-a1a602badeef",
                "f6c1ef46-ab48-4f37-9b42-b3991593e657",
                "c982a2a9-5b69-4a59-8db8-17f36283a9a2",
                "2a7aab39-5edd-480a-9e09-0d26b63b347a",
                "7b19e732-d927-4686-bb3b-353af44a9846",
                "4d3b79c1-947c-4958-aa76-d0caeace079b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "2f4f7cc7-142c-4b6d-92da-4376cddb6081",
              "title": "/api/profiles/:userId GET",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"/api/profiles/:userId GET\"",
                  "fullTitle": "Profile API /api/profiles/:userId GET \"before each\" hook in \"/api/profiles/:userId GET\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "originalSecret = process.env.JWT_SECRET;",
                  "err": {},
                  "uuid": "c4ed8ef9-8e4c-4453-ae2b-a6a64765f470",
                  "parentUUID": "2f4f7cc7-142c-4b6d-92da-4376cddb6081",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"/api/profiles/:userId GET\"",
                  "fullTitle": "Profile API /api/profiles/:userId GET \"after each\" hook in \"/api/profiles/:userId GET\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.JWT_SECRET = originalSecret; // restore",
                  "err": {},
                  "uuid": "7cfcb5ca-21aa-47fa-b7be-2657d69878a9",
                  "parentUUID": "2f4f7cc7-142c-4b6d-92da-4376cddb6081",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return 401 for no auth token on header",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 401 for no auth token on header",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/')\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No auth token in header'\n            });\n        })",
                  "err": {},
                  "uuid": "3179222d-cdd3-442f-89c5-f657b63fbc33",
                  "parentUUID": "2f4f7cc7-142c-4b6d-92da-4376cddb6081",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unconfigured JWT",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for unconfigured JWT",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            delete process.env.JWT_SECRET;\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'JWT not configured'\n            });\n        })",
                  "err": {},
                  "uuid": "1244cfd4-179e-41f0-82ba-dbad179e699b",
                  "parentUUID": "2f4f7cc7-142c-4b6d-92da-4376cddb6081",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for JWT verification error",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 401 for JWT verification error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new jsonwebtoken_1.JsonWebTokenError(\"Some JWT verification error\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid JWT'\n            });\n        })",
                  "err": {},
                  "uuid": "a7f0286a-a1e4-43cb-ac85-dcb2533b92d7",
                  "parentUUID": "2f4f7cc7-142c-4b6d-92da-4376cddb6081",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error JWT",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for unknown error JWT",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new Error(\"Some other error during JWT verification\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error'\n            });\n        })",
                  "err": {},
                  "uuid": "c5f55db2-8ade-470c-8df7-f224ec85705b",
                  "parentUUID": "2f4f7cc7-142c-4b6d-92da-4376cddb6081",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing userId on params",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 400 for missing userId on params",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "62cb1ac7-3c8e-49c8-8f67-ce4a7454648c",
                  "parentUUID": "2f4f7cc7-142c-4b6d-92da-4376cddb6081",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for error during getting profile",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for error during getting profile",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error during getting profile'\n            });\n        })",
                  "err": {},
                  "uuid": "21677700-a468-45d3-a78c-231a2655df2c",
                  "parentUUID": "2f4f7cc7-142c-4b6d-92da-4376cddb6081",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for missing profile for userId",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 404 for missing profile for userId",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get profile with userId'\n            });\n        })",
                  "err": {},
                  "uuid": "dada5ee1-9728-401f-ac86-7592bd298a15",
                  "parentUUID": "2f4f7cc7-142c-4b6d-92da-4376cddb6081",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully getting profile",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 200 for successfully getting profile",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            const fakeProfile = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(fakeProfile);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Successfully retrieved profile',\n                profile: fakeProfile\n            });\n        })",
                  "err": {},
                  "uuid": "2a32f838-c1cd-49fb-9609-e211056be3b2",
                  "parentUUID": "2f4f7cc7-142c-4b6d-92da-4376cddb6081",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3179222d-cdd3-442f-89c5-f657b63fbc33",
                "1244cfd4-179e-41f0-82ba-dbad179e699b",
                "a7f0286a-a1e4-43cb-ac85-dcb2533b92d7",
                "c5f55db2-8ade-470c-8df7-f224ec85705b",
                "62cb1ac7-3c8e-49c8-8f67-ce4a7454648c",
                "21677700-a468-45d3-a78c-231a2655df2c",
                "dada5ee1-9728-401f-ac86-7592bd298a15",
                "2a32f838-c1cd-49fb-9609-e211056be3b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 55,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "be72c4af-d145-414d-862d-afe9566567f6",
              "title": "/api/profiles/:userId PATCH",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"/api/profiles/:userId PATCH\"",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH \"before each\" hook in \"/api/profiles/:userId PATCH\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "originalSecret = process.env.JWT_SECRET;",
                  "err": {},
                  "uuid": "da4d9396-d419-48df-8762-327db3ede069",
                  "parentUUID": "be72c4af-d145-414d-862d-afe9566567f6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"/api/profiles/:userId PATCH\"",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH \"after each\" hook in \"/api/profiles/:userId PATCH\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.JWT_SECRET = originalSecret; // restore",
                  "err": {},
                  "uuid": "604739ff-f2ec-4856-baaf-313d2696f432",
                  "parentUUID": "be72c4af-d145-414d-862d-afe9566567f6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return 401 for no auth token on header",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 401 for no auth token on header",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/')\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No auth token in header'\n            });\n        })",
                  "err": {},
                  "uuid": "5a013bf0-7ab1-4103-b79c-b440eca519df",
                  "parentUUID": "be72c4af-d145-414d-862d-afe9566567f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unconfigured JWT",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for unconfigured JWT",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            delete process.env.JWT_SECRET;\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'JWT not configured'\n            });\n        })",
                  "err": {},
                  "uuid": "671258bd-7f09-4eda-a204-f7b2040b61a8",
                  "parentUUID": "be72c4af-d145-414d-862d-afe9566567f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for JWT verification error",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 401 for JWT verification error",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new jsonwebtoken_1.JsonWebTokenError(\"Some JWT verification error\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid JWT'\n            });\n        })",
                  "err": {},
                  "uuid": "da0064e6-b1be-4d3c-81da-b41f3ff12f4e",
                  "parentUUID": "be72c4af-d145-414d-862d-afe9566567f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error JWT",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for unknown error JWT",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new Error(\"Some other error during JWT verification\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error'\n            });\n        })",
                  "err": {},
                  "uuid": "66847014-b2b8-41df-83e3-21ca7d9a386b",
                  "parentUUID": "be72c4af-d145-414d-862d-afe9566567f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing userId on params",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 400 for missing userId on params",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "99428d12-84f7-4f23-a2df-aee0a3ef8690",
                  "parentUUID": "be72c4af-d145-414d-862d-afe9566567f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing profileData in body",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 400 for missing profileData in body",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: null })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'profileData missing from body'\n            });\n        })",
                  "err": {},
                  "uuid": "4dc64eb3-74fb-4ecf-bb6b-d4ffd71619e8",
                  "parentUUID": "be72c4af-d145-414d-862d-afe9566567f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for error during getting profile",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for error during getting profile",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error during getting profile'\n            });\n        })",
                  "err": {},
                  "uuid": "a08a327c-3547-4447-a0e3-cfe5f45fd93f",
                  "parentUUID": "be72c4af-d145-414d-862d-afe9566567f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for missing profile for userId",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 404 for missing profile for userId",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(null);\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No profile found'\n            });\n        })",
                  "err": {},
                  "uuid": "9cf7b3c8-a534-49a2-afb1-a5c9ab3ec781",
                  "parentUUID": "be72c4af-d145-414d-862d-afe9566567f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for error with updating profile",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for error with updating profile",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '1TB',\n                RAM_preference: '32GB',\n                brand_preference: 'NVidia, Intel',\n                min_budget: 200,\n                max_budget: 1000,\n                rating_preference: 3,\n                country: 'US',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            const existingProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(existingProfileData);\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'updateProfile').throws(new Error(\"Some error related to updating profile\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to update profile'\n            });\n        })",
                  "err": {},
                  "uuid": "89d4e7d6-59d1-4ee2-aac7-248f7c65ec43",
                  "parentUUID": "be72c4af-d145-414d-862d-afe9566567f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully updating profile",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 200 for successfully updating profile",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'userId123',\n                storage_preference: '1TB',\n                RAM_preference: '32GB',\n                brand_preference: 'NVidia, Intel',\n                min_budget: 200,\n                max_budget: 1000,\n                rating_preference: 3,\n                country: 'US',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            const existingProfileData = {\n                _id: 'test id',\n                userId: 'userId123',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(existingProfileData);\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'updateProfile').resolves(fakeProfileData);\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Profile updated successfully',\n                data: fakeProfileData\n            });\n        })",
                  "err": {},
                  "uuid": "6db4f308-8223-4b2b-95d0-bb203fc90a3f",
                  "parentUUID": "be72c4af-d145-414d-862d-afe9566567f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a013bf0-7ab1-4103-b79c-b440eca519df",
                "671258bd-7f09-4eda-a204-f7b2040b61a8",
                "da0064e6-b1be-4d3c-81da-b41f3ff12f4e",
                "66847014-b2b8-41df-83e3-21ca7d9a386b",
                "99428d12-84f7-4f23-a2df-aee0a3ef8690",
                "4dc64eb3-74fb-4ecf-bb6b-d4ffd71619e8",
                "a08a327c-3547-4447-a0e3-cfe5f45fd93f",
                "9cf7b3c8-a534-49a2-afb1-a5c9ab3ec781",
                "89d4e7d6-59d1-4ee2-aac7-248f7c65ec43",
                "6db4f308-8223-4b2b-95d0-bb203fc90a3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 59,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
              "title": "/api/profiles/passwords/:userId",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"/api/profiles/passwords/:userId\"",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId \"before each\" hook in \"/api/profiles/passwords/:userId\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "originalSecret = process.env.JWT_SECRET;",
                  "err": {},
                  "uuid": "8e0a9206-3c24-4584-b706-27b9321243da",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"/api/profiles/passwords/:userId\"",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId \"after each\" hook in \"/api/profiles/passwords/:userId\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.JWT_SECRET = originalSecret; // restore",
                  "err": {},
                  "uuid": "2362f9de-5b9a-418c-a034-e515554ca62b",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return 401 for no auth token on header",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 401 for no auth token on header",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords')\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No auth token in header'\n            });\n        })",
                  "err": {},
                  "uuid": "785b1537-5f81-41e0-a66b-ff5545ac51af",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unconfigured JWT",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 500 for unconfigured JWT",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            delete process.env.JWT_SECRET;\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'JWT not configured'\n            });\n        })",
                  "err": {},
                  "uuid": "f7304fb1-92e1-4898-9080-9c27790ec288",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for JWT verification error",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 401 for JWT verification error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new jsonwebtoken_1.JsonWebTokenError(\"Some JWT verification error\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid JWT'\n            });\n        })",
                  "err": {},
                  "uuid": "bce87620-8beb-4acb-b631-5e48076ff440",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error JWT",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 500 for unknown error JWT",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new Error(\"Some other error during JWT verification\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error'\n            });\n        })",
                  "err": {},
                  "uuid": "090d8e57-ce94-4bc5-a395-09b5d0029a28",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for userId missing from params",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for userId missing from params",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "99d4996f-305d-4ec0-bb58-08ea5c1026c2",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing newPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for missing newPassword",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/test123')\n                .send({\n                currentPassword: 'currentPassword'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'currentPassword and newPassword required'\n            });\n        })",
                  "err": {},
                  "uuid": "f75f0062-b774-4633-bbeb-787f7f818558",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing currentPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for missing currentPassword",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/test123')\n                .send({\n                newPassword: 'newPassword'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'currentPassword and newPassword required'\n            });\n        })",
                  "err": {},
                  "uuid": "0d1b69b1-4804-480a-922f-3c5c3ee53b2a",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string currentPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for non string currentPassword",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/test123')\n                .send({\n                currentPassword: 123,\n                newPassword: 'newPassword'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'currentPassword and newPassword need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "12828cf9-af06-4d44-85fb-668c1d5308ea",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string currentPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for non string currentPassword",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/test123')\n                .send({\n                currentPassword: 'test current',\n                newPassword: 123\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'currentPassword and newPassword need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "fcd818f2-c685-4ec1-90bd-efed9b4e5efd",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error during getting user",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 500 for unknown error during getting user",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').throws(new Error('Some error during fetching user'));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test current',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error during getting user'\n            });\n        })",
                  "err": {},
                  "uuid": "1be6f3ba-f544-410e-81dd-dca9211c64fc",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for unknown user",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 404 for unknown user",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test current',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No user found'\n            });\n        })",
                  "err": {},
                  "uuid": "3ba80239-1155-46d6-8a3e-cc71ffcc00f8",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid currentPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 401 for invalid currentPassword",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                name: 'test name',\n                email: 'test@example.com',\n                password: 'test1234',\n                isEmailVerified: true,\n                verificationToken: 'test token',\n                verificationTokenExpires: (new Date()).toISOString(),\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').resolves(userWithPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'comparePassword').resolves(false);\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test4321',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Password incorrect'\n            });\n        })",
                  "err": {},
                  "uuid": "ebaf1833-36b3-4c4a-981d-aeb8d89960d4",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed password update",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 500 for failed password update",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                name: 'test name',\n                email: 'test@example.com',\n                password: 'test1234',\n                isEmailVerified: true,\n                verificationToken: 'test token',\n                verificationTokenExpires: (new Date()).toISOString(),\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').resolves(userWithPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'comparePassword').resolves(true);\n            sinon_1.default.stub(UserService_1.UserService, 'updatePassword').throws(new Error(\"Some error related to updating password\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test1234',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to update password'\n            });\n        })",
                  "err": {},
                  "uuid": "6c9f4f92-6403-44b4-8f83-08a4e0caeaee",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successful password update",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 200 for successful password update",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                name: 'test name',\n                email: 'test@example.com',\n                password: 'test1234',\n                isEmailVerified: true,\n                verificationToken: 'test token',\n                verificationTokenExpires: (new Date()).toISOString(),\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').resolves(userWithPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'comparePassword').resolves(true);\n            sinon_1.default.stub(UserService_1.UserService, 'updatePassword').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test1234',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Password updated successfully'\n            });\n        })",
                  "err": {},
                  "uuid": "79332f73-3bb8-4934-82ee-ce3e66c4a324",
                  "parentUUID": "fe5220a1-b299-4da4-b4b8-9302fe7280e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "785b1537-5f81-41e0-a66b-ff5545ac51af",
                "f7304fb1-92e1-4898-9080-9c27790ec288",
                "bce87620-8beb-4acb-b631-5e48076ff440",
                "090d8e57-ce94-4bc5-a395-09b5d0029a28",
                "99d4996f-305d-4ec0-bb58-08ea5c1026c2",
                "f75f0062-b774-4633-bbeb-787f7f818558",
                "0d1b69b1-4804-480a-922f-3c5c3ee53b2a",
                "12828cf9-af06-4d44-85fb-668c1d5308ea",
                "fcd818f2-c685-4ec1-90bd-efed9b4e5efd",
                "1be6f3ba-f544-410e-81dd-dca9211c64fc",
                "3ba80239-1155-46d6-8a3e-cc71ffcc00f8",
                "ebaf1833-36b3-4c4a-981d-aeb8d89960d4",
                "6c9f4f92-6403-44b4-8f83-08a4e0caeaee",
                "79332f73-3bb8-4934-82ee-ce3e66c4a324"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 92,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "integration-tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-integration",
        "reportFilename": "integration-tests"
      },
      "version": "6.2.0"
    }
  }
}