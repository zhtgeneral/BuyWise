{
  "stats": {
    "suites": 11,
    "tests": 53,
    "passes": 44,
    "pending": 0,
    "failures": 9,
    "start": "2025-07-03T04:52:52.810Z",
    "end": "2025-07-03T04:53:00.549Z",
    "duration": 7739,
    "testsRegistered": 53,
    "passPercent": 83.01886792452831,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3ebc1154-a977-4466-98eb-816753bef945",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1938f52b-67e0-4934-8a9b-9069f27011f6",
          "title": "Auth API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\auth.test.ts",
          "file": "\\src\\tests\\integration\\auth.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"before all\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/auth', auth_1.default);",
              "err": {},
              "uuid": "cc3e48a2-5e50-469c-8408-d0d37e3cc766",
              "parentUUID": "1938f52b-67e0-4934-8a9b-9069f27011f6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"after each\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "f5ce9463-5303-4ae7-8d98-2371d7f0a24a",
              "parentUUID": "1938f52b-67e0-4934-8a9b-9069f27011f6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "0e444b2d-5719-45ef-bae4-679975da47c4",
              "title": "/api/auth/register POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\auth.test.ts",
              "file": "\\src\\tests\\integration\\auth.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing name",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing name",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "83077fb4-b6e1-414f-838b-f600024b04da",
                  "parentUUID": "0e444b2d-5719-45ef-bae4-679975da47c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "9380d305-61bb-4d13-a3e2-23e037009cbb",
                  "parentUUID": "0e444b2d-5719-45ef-bae4-679975da47c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing password",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing password",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 'test@example.com',\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "fd0653bb-1922-4069-ba68-b857575feb7c",
                  "parentUUID": "0e444b2d-5719-45ef-bae4-679975da47c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string name",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string name",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 123,\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "23e2215c-f3fe-4211-83e5-b5256bdbd590",
                  "parentUUID": "0e444b2d-5719-45ef-bae4-679975da47c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 123,\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "b5a311c8-7125-46fa-af95-e79f8f566aac",
                  "parentUUID": "0e444b2d-5719-45ef-bae4-679975da47c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string password",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string password",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 'test@example.com',\n                password: 123\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "2703b1a2-3dcc-4e0a-8e1f-d71375cbc42f",
                  "parentUUID": "0e444b2d-5719-45ef-bae4-679975da47c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed email validation",
                  "fullTitle": "Auth API /api/auth/register POST should return 500 for failed email validation",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').throws(new Error(\"Error related to searching user with email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to determine validity of email'\n            });\n        })",
                  "err": {},
                  "uuid": "345cd7f5-9624-4ebb-9a50-584432ee1903",
                  "parentUUID": "0e444b2d-5719-45ef-bae4-679975da47c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for existing account",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for existing account",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves({\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: true\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'existing@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Email already exists. Pleast try logging in instead'\n            });\n        })",
                  "err": {},
                  "uuid": "8783397d-23f6-4b54-b9a7-9b09fcc59661",
                  "parentUUID": "0e444b2d-5719-45ef-bae4-679975da47c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed register",
                  "fullTitle": "Auth API /api/auth/register POST should return 500 for failed register",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            sinon_1.default.stub(authService_1.AuthService, 'register').throws(new Error(\"Unknown error in register\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Registration failed. Please try again'\n            });\n        })",
                  "err": {},
                  "uuid": "d9a2599b-c03f-44cd-8f51-d8dff70b5a26",
                  "parentUUID": "0e444b2d-5719-45ef-bae4-679975da47c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 201 on successful register",
                  "fullTitle": "Auth API /api/auth/register POST should return 201 on successful register",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUser = {\n                _id: 'test user id',\n                name: 'test user',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test token',\n                verificationTokenExpires: (new Date(Date.now() + 24 * 60 * 60 * 1000)).toISOString(),\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            sinon_1.default.stub(authService_1.AuthService, 'register').resolves({\n                token: '123abc',\n                user: fakeUser\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(201);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Registration successful! Your account has been created and verified',\n                data: fakeUser,\n                token: '123abc'\n            });\n        })",
                  "err": {},
                  "uuid": "39075b47-9c48-40cb-9523-d36bf019425b",
                  "parentUUID": "0e444b2d-5719-45ef-bae4-679975da47c4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83077fb4-b6e1-414f-838b-f600024b04da",
                "9380d305-61bb-4d13-a3e2-23e037009cbb",
                "fd0653bb-1922-4069-ba68-b857575feb7c",
                "23e2215c-f3fe-4211-83e5-b5256bdbd590",
                "b5a311c8-7125-46fa-af95-e79f8f566aac",
                "2703b1a2-3dcc-4e0a-8e1f-d71375cbc42f",
                "345cd7f5-9624-4ebb-9a50-584432ee1903",
                "8783397d-23f6-4b54-b9a7-9b09fcc59661",
                "d9a2599b-c03f-44cd-8f51-d8dff70b5a26",
                "39075b47-9c48-40cb-9523-d36bf019425b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 122,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "6b837507-4f12-40fa-807b-5a4a27c1d893",
              "title": "/api/auth/login POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\auth.test.ts",
              "file": "\\src\\tests\\integration\\auth.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                password: 'hashed-password'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password are required\"\n            });\n        })",
                  "err": {},
                  "uuid": "f3b363ff-9251-4fa0-9d69-1ce11174165f",
                  "parentUUID": "6b837507-4f12-40fa-807b-5a4a27c1d893",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing password",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for missing password",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: \"test@example.com\"\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password are required\"\n            });\n        })",
                  "err": {},
                  "uuid": "88e153f0-5597-4961-97e6-a5a383a6d490",
                  "parentUUID": "6b837507-4f12-40fa-807b-5a4a27c1d893",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 123,\n                password: 'test-hash'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password must be strings\"\n            });\n        })",
                  "err": {},
                  "uuid": "184d9347-f3f2-495a-8fe3-79575f67c9a8",
                  "parentUUID": "6b837507-4f12-40fa-807b-5a4a27c1d893",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string password",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for non string password",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 123\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password must be strings\"\n            });\n        })",
                  "err": {},
                  "uuid": "fce84cfd-0cb3-479d-9437-c5405db450a7",
                  "parentUUID": "6b837507-4f12-40fa-807b-5a4a27c1d893",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for bad email",
                  "fullTitle": "Auth API /api/auth/login POST should return 401 for bad email",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Invalid email or password\"\n            });\n        })",
                  "err": {},
                  "uuid": "616cfc7d-2a55-40c7-84f1-edfba5a04df0",
                  "parentUUID": "6b837507-4f12-40fa-807b-5a4a27c1d893",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for unverified email",
                  "fullTitle": "Auth API /api/auth/login POST should return 401 for unverified email",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const unverifiedUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                password: 'test-hash',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(unverifiedUser);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Please verify your email before logging in\"\n            });\n        })",
                  "err": {},
                  "uuid": "f6dfcb7a-84ba-470c-8cb3-9150cfe950db",
                  "parentUUID": "6b837507-4f12-40fa-807b-5a4a27c1d893",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error during login",
                  "fullTitle": "Auth API /api/auth/login POST should return 500 for unknown error during login",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                _id: 'test_id',\n                email: 'test@example.com',\n                password: 'test-hash',\n                isEmailVerified: true\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(userWithPassword);\n            sinon_1.default.stub(authService_1.AuthService, 'login').throws(new Error(\"Some error during login\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Unknown authentication error\"\n            });\n        })",
                  "err": {},
                  "uuid": "2fd7b15a-15e1-4d14-ba6a-8fc8fcf35053",
                  "parentUUID": "6b837507-4f12-40fa-807b-5a4a27c1d893",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 with token and user for successful login",
                  "fullTitle": "Auth API /api/auth/login POST should return 200 with token and user for successful login",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                email: 'test@example.com',\n                password: 'hashed-password',\n                isEmailVerified: true,\n            };\n            const { password } = userWithPassword, userWithoutPassword = __rest(userWithPassword, [\"password\"]);\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(userWithPassword);\n            sinon_1.default.stub(authService_1.AuthService, 'login').resolves({\n                token: 'token123',\n                user: userWithoutPassword\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'hashed-password'\n            })\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Login successful',\n                data: userWithoutPassword,\n                token: 'token123'\n            });\n        })",
                  "err": {},
                  "uuid": "d484693b-a336-4063-923f-b505c3e3e5e3",
                  "parentUUID": "6b837507-4f12-40fa-807b-5a4a27c1d893",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f3b363ff-9251-4fa0-9d69-1ce11174165f",
                "88e153f0-5597-4961-97e6-a5a383a6d490",
                "184d9347-f3f2-495a-8fe3-79575f67c9a8",
                "fce84cfd-0cb3-479d-9437-c5405db450a7",
                "616cfc7d-2a55-40c7-84f1-edfba5a04df0",
                "f6dfcb7a-84ba-470c-8cb3-9150cfe950db",
                "2fd7b15a-15e1-4d14-ba6a-8fc8fcf35053",
                "d484693b-a336-4063-923f-b505c3e3e5e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "edc7eaac-c5d4-467a-8321-957840386a45",
          "title": "Chat API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chat.test.ts",
          "file": "\\src\\tests\\integration\\chat.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Chat API\"",
              "fullTitle": "Chat API \"before all\" hook in \"Chat API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/chat', chat_1.default);",
              "err": {},
              "uuid": "163679c5-bb42-41a5-b1f9-34380434160f",
              "parentUUID": "edc7eaac-c5d4-467a-8321-957840386a45",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Chat API\"",
              "fullTitle": "Chat API \"after each\" hook in \"Chat API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "32af6a1b-8a34-4b28-892e-bab5090546a3",
              "parentUUID": "edc7eaac-c5d4-467a-8321-957840386a45",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "796ceae7-b1e7-40f1-b171-f33d0448f8bf",
              "title": "/api/chat POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chat.test.ts",
              "file": "\\src\\tests\\integration\\chat.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing messages",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'test@example.com'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages and email required'\n            });\n        })",
                  "err": {},
                  "uuid": "516b0fb0-90a4-4999-888f-e827ed801590",
                  "parentUUID": "796ceae7-b1e7-40f1-b171-f33d0448f8bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                messages: [\n                    {\n                        speaker: 'user',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'bot',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages and email required'\n            });\n        })",
                  "err": {},
                  "uuid": "3193d759-c151-4911-8129-8ee4c7bb620a",
                  "parentUUID": "796ceae7-b1e7-40f1-b171-f33d0448f8bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 123,\n                messages: [\n                    {\n                        speaker: 'user',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'bot',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email needs to be a string'\n            });\n        })",
                  "err": {},
                  "uuid": "ccb5ff8a-024d-445f-a787-596a99248c09",
                  "parentUUID": "796ceae7-b1e7-40f1-b171-f33d0448f8bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non array messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non array messages",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: 'filler'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages needs to be an array'\n            });\n        })",
                  "err": {},
                  "uuid": "cc96e4ce-3595-4752-8e8e-f7b53fcc1d33",
                  "parentUUID": "796ceae7-b1e7-40f1-b171-f33d0448f8bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing text in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing text in messages",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                    },\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "4700fe77-4a95-431b-8911-72fc34fe5c18",
                  "parentUUID": "796ceae7-b1e7-40f1-b171-f33d0448f8bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing speaker in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing speaker in messages",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        text: 'first reply'\n                    },\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "c990f740-0d61-47aa-9710-c668b23bed8a",
                  "parentUUID": "796ceae7-b1e7-40f1-b171-f33d0448f8bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid speaker in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for invalid speaker in messages",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'NOT A BOT OR A USER',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "295557ad-bf57-4f37-9788-c7c558ad25e6",
                  "parentUUID": "796ceae7-b1e7-40f1-b171-f33d0448f8bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string text in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non string text in messages",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                        text: 12345\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "2afc718e-82b6-4a9f-8a9f-468637a2d8e7",
                  "parentUUID": "796ceae7-b1e7-40f1-b171-f33d0448f8bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed save chat",
                  "fullTitle": "Chat API /api/chat POST should return 500 for failed save chat",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(ChatService_1.ChatService, 'saveChat').throws(new Error(\"Some error in save chat\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to save chat'\n            });\n        })",
                  "err": {},
                  "uuid": "d2872182-a07c-42e4-a169-5ae1821203fc",
                  "parentUUID": "796ceae7-b1e7-40f1-b171-f33d0448f8bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for working save chat",
                  "fullTitle": "Chat API /api/chat POST should return 200 for working save chat",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const testDate = new Date('2025-06-30T01:14:27.853Z').toISOString();\n            const messagesData = [\n                {\n                    speaker: 'bot',\n                    text: 'first message',\n                    timestamp: testDate\n                },\n                {\n                    speaker: 'user',\n                    text: 'first reply',\n                    timestamp: testDate\n                }\n            ];\n            const mockChat = {\n                messages: messagesData,\n                email: 'text@example.com',\n                createdAt: testDate\n            };\n            sinon_1.default.stub(ChatService_1.ChatService, 'saveChat').resolves(mockChat);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: messagesData\n            })\n                .expect(201);\n            (0, chai_1.expect)(response.body).to.deep.equal(mockChat);\n        })",
                  "err": {},
                  "uuid": "d1774ba7-b448-43e7-bfc7-88c755f31354",
                  "parentUUID": "796ceae7-b1e7-40f1-b171-f33d0448f8bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "516b0fb0-90a4-4999-888f-e827ed801590",
                "3193d759-c151-4911-8129-8ee4c7bb620a",
                "ccb5ff8a-024d-445f-a787-596a99248c09",
                "cc96e4ce-3595-4752-8e8e-f7b53fcc1d33",
                "4700fe77-4a95-431b-8911-72fc34fe5c18",
                "c990f740-0d61-47aa-9710-c668b23bed8a",
                "295557ad-bf57-4f37-9788-c7c558ad25e6",
                "2afc718e-82b6-4a9f-8a9f-468637a2d8e7",
                "d2872182-a07c-42e4-a169-5ae1821203fc",
                "d1774ba7-b448-43e7-bfc7-88c755f31354"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "ac48914e-f40c-4521-918c-e5ce491fe869",
          "title": "Chatbot API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts",
          "file": "\\src\\tests\\integration\\chatbot.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Chatbot API\"",
              "fullTitle": "Chatbot API \"before all\" hook in \"Chatbot API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.post('/api/chatbot', chatbot_1.postChat);",
              "err": {},
              "uuid": "e3e20295-9e26-4dea-b6c9-6c5508581921",
              "parentUUID": "ac48914e-f40c-4521-918c-e5ce491fe869",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Chatbot API\"",
              "fullTitle": "Chatbot API \"after each\" hook in \"Chatbot API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "1a49c683-4ed4-4772-a2b8-914ad18714c4",
              "parentUUID": "ac48914e-f40c-4521-918c-e5ce491fe869",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b563e3d2-f4f6-4dd8-a7ee-caa0c576a903",
              "title": "/api/chatbot POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts",
              "file": "\\src\\tests\\integration\\chatbot.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 400 code for missing message",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for missing message",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({})\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message is required' });\n        })",
                  "err": {},
                  "uuid": "b5468bc2-c8aa-4606-ba11-2a2a8d2305d9",
                  "parentUUID": "b563e3d2-f4f6-4dd8-a7ee-caa0c576a903",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 400 code for wrong data type",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for wrong data type",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: 0 })\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message is required' });\n        })",
                  "err": {},
                  "uuid": "6da2ff0f-9619-442c-94eb-74f72aaf1acb",
                  "parentUUID": "b563e3d2-f4f6-4dd8-a7ee-caa0c576a903",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 400 code for empty message",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for empty message",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"\" })\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message is required' });\n        })",
                  "err": {},
                  "uuid": "149672eb-558d-4249-9119-f673d8e33f8a",
                  "parentUUID": "b563e3d2-f4f6-4dd8-a7ee-caa0c576a903",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 500 code for failed chatbot API call",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 500 code for failed chatbot API call",
                  "timedOut": false,
                  "duration": 1371,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').throws(new Error(\"some API error message\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"hi\" })\n                .expect(500);\n            expect(response.body).to.deep.equal({ error: 'Unable to call chatbot API' });\n        })",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:68:10\n    at Generator.next (<anonymous>)\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:41:71\n    at new Promise (<anonymous>)\n    at __awaiter (src\\tests\\integration\\chatbot.test.ts:37:12)\n    at Context.<anonymous> (src\\tests\\integration\\chatbot.test.ts:63:67)\n    at processImmediate (node:internal/timers:485:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:267:14)\n    at D:\\Uni\\C455\\Project\\team10\\server\\node_modules\\supertest\\lib\\test.js:323:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:300:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:179:23)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:135:14)\n    at Object.onceWrapper (node:events:632:28)\n    at Server.emit (node:events:518:28)\n    at Server.emit (node:domain:489:12)\n    at emitCloseNT (node:net:2419:8)\n    at processTicksAndRejections (node:internal/process/task_queues:89:21)",
                    "diff": null
                  },
                  "uuid": "a81f0b0a-d928-4bf8-8d1e-ac3f91fe6d54",
                  "parentUUID": "b563e3d2-f4f6-4dd8-a7ee-caa0c576a903",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 500 code for incomplete chatbot response",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 500 code for incomplete chatbot response",
                  "timedOut": false,
                  "duration": 1707,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"\",\n                productRequested: false,\n                productQuery: \"\"\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"give me an incomplete response\" })\n                .expect(500);\n            expect(response.body).to.deep.equal({ error: 'AI unable to respond' });\n        })",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:83:10\n    at Generator.next (<anonymous>)\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:41:71\n    at new Promise (<anonymous>)\n    at __awaiter (src\\tests\\integration\\chatbot.test.ts:37:12)\n    at Context.<anonymous> (src\\tests\\integration\\chatbot.test.ts:73:71)\n    at processImmediate (node:internal/timers:485:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:267:14)\n    at D:\\Uni\\C455\\Project\\team10\\server\\node_modules\\supertest\\lib\\test.js:323:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:300:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:179:23)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:135:14)\n    at Object.onceWrapper (node:events:632:28)\n    at Server.emit (node:events:518:28)\n    at Server.emit (node:domain:489:12)\n    at emitCloseNT (node:net:2419:8)\n    at processTicksAndRejections (node:internal/process/task_queues:89:21)",
                    "diff": null
                  },
                  "uuid": "765414fd-c542-4811-8dec-c70d35402299",
                  "parentUUID": "b563e3d2-f4f6-4dd8-a7ee-caa0c576a903",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API without products",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API without products",
                  "timedOut": false,
                  "duration": 1171,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"What would you like to search for?\",\n                productRequested: false,\n                productQuery: \"\"\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"test message\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"What would you like to search for?\",\n                productData: null\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:99:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"I'm BuyWise, your shopping assistant for laptops, phones, and computers. I can help you find the perfect tech products, compare prices, and get recommendations. What device are you looking for?\"\n+   \"chatbotMessage\": \"What would you like to search for?\"\n   \"productData\": [null]\n }\n"
                  },
                  "uuid": "90541209-5f4d-426d-90f9-4265f40ca03e",
                  "parentUUID": "b563e3d2-f4f6-4dd8-a7ee-caa0c576a903",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API and failed product API",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API and failed product API",
                  "timedOut": false,
                  "duration": 1318,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productRequested: true,\n                productQuery: \"macbook\"\n            });\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').throws(new Error(\"some API error message\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"I want some macbooks\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productData: null\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:118:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"I found some MacBook options for you! Would you like to see the latest models, or are you interested in specific features or budget range? Let me know so I can help you find the perfect MacBook!\"\n+   \"chatbotMessage\": \"Here are some macbooks I found.\"\n   \"productData\": [null]\n }\n"
                  },
                  "uuid": "60962929-6b67-4d26-81ec-1c32e60f08e2",
                  "parentUUID": "b563e3d2-f4f6-4dd8-a7ee-caa0c576a903",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API and product API",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API and product API",
                  "timedOut": false,
                  "duration": 1681,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const mockProduct = {\n                product_id: \"123\",\n                source: \"Best Buy\",\n                title: \"MacBook Pro\",\n                thumbnail: \"image.jpg\",\n                extracted_price: 1299,\n                seller_details: { direct_link: \"http://example.com\" },\n                rating: 4.5,\n                reviews: 120\n            };\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productRequested: true,\n                productQuery: \"macbook\"\n            });\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').resolves([mockProduct]);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"I want some macbooks\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productData: [{\n                        id: mockProduct.product_id,\n                        source: mockProduct.source,\n                        title: mockProduct.title,\n                        image: mockProduct.thumbnail,\n                        price: mockProduct.extracted_price,\n                        url: mockProduct.seller_details.direct_link,\n                        rating: mockProduct.rating,\n                        reviews: mockProduct.reviews\n                    }]\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chatbot.test.ts:147:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"I found a MacBook Pro available for $1299 with a good rating. Would you like more options or details about this model?\"\n+   \"chatbotMessage\": \"Here are some macbooks I found.\"\n   \"productData\": [\n     {\n       \"id\": \"123\"\n       \"image\": \"image.jpg\"\n"
                  },
                  "uuid": "b7951fde-1f41-4fed-91dc-5b97a42091bb",
                  "parentUUID": "b563e3d2-f4f6-4dd8-a7ee-caa0c576a903",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5468bc2-c8aa-4606-ba11-2a2a8d2305d9",
                "6da2ff0f-9619-442c-94eb-74f72aaf1acb",
                "149672eb-558d-4249-9119-f673d8e33f8a"
              ],
              "failures": [
                "a81f0b0a-d928-4bf8-8d1e-ac3f91fe6d54",
                "765414fd-c542-4811-8dec-c70d35402299",
                "90541209-5f4d-426d-90f9-4265f40ca03e",
                "60962929-6b67-4d26-81ec-1c32e60f08e2",
                "b7951fde-1f41-4fed-91dc-5b97a42091bb"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7267,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "14116ba0-37f1-4102-80da-d5e58ddd685c",
          "title": "Products API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\products.test.ts",
          "file": "\\src\\tests\\integration\\products.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Products API\"",
              "fullTitle": "Products API \"before all\" hook in \"Products API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use('/api/products', products_1.default);",
              "err": {},
              "uuid": "30c9d91a-d103-4860-944e-3e989e1dfbba",
              "parentUUID": "14116ba0-37f1-4102-80da-d5e58ddd685c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Products API\"",
              "fullTitle": "Products API \"after each\" hook in \"Products API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "3ac3c5a6-db68-4ebc-81c0-fde594332781",
              "parentUUID": "14116ba0-37f1-4102-80da-d5e58ddd685c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "a68ecccf-a95b-4cb7-ad13-7177c76fe902",
              "title": "GET /api/products/search",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\products.test.ts",
              "file": "\\src\\tests\\integration\\products.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 and products for a valid search query",
                  "fullTitle": "Products API GET /api/products/search should return 200 and products for a valid search query",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProducts = [\n                {\n                    category: 'Popular products',\n                    thumbnail: 'https://example.com/image.jpg',\n                    source_logo: 'https://example.com/logo.png',\n                    source: 'Best Buy',\n                    title: 'HP 14\" Intel Celeron Laptop',\n                    rating: 4.2,\n                    reviews: 148,\n                    price: '$199.99',\n                    extracted_price: 199.99,\n                    location: 'Nearby, 13 mi',\n                    product_id: '2197135960910078338',\n                    seller_details: [\n                        {\n                            position: 1,\n                            name: 'Best Buy',\n                            top_quality_store: true,\n                            payment_methods: 'PayPal, Zip accepted',\n                            rating: 4.6,\n                            reviews: 532,\n                            reviews_original: '(532)',\n                            link: 'https://google.com/redirect',\n                            direct_link: 'https://bestbuy.com/product',\n                            details_and_offers: [{ text: '5.3 mi · In stock at GainesvilleToday: 10:00 AM - 8:00 PM' }],\n                            base_price: '$199.99',\n                            additional_price: { shipping: 'See website' },\n                            total_price: '$199.99',\n                        }\n                    ],\n                },\n            ];\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').resolves(fakeProducts);\n            const res = yield (0, supertest_1.default)(app)\n                .get('/api/products/search')\n                .query({ q: 'Laptop under $400', device: 'desktop', location: 'Canada' });\n            (0, chai_1.expect)(res.status).to.equal(200);\n            (0, chai_1.expect)(res.body.success).to.be.true;\n            (0, chai_1.expect)(res.body.products).to.deep.equal(fakeProducts);\n        })",
                  "err": {},
                  "uuid": "2a735c04-0e59-4d79-8984-fec2fbbd1568",
                  "parentUUID": "a68ecccf-a95b-4cb7-ad13-7177c76fe902",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if the search query is missing",
                  "fullTitle": "Products API GET /api/products/search should return 400 if the search query is missing",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const res = yield (0, supertest_1.default)(app).get('/api/products/search');\n            (0, chai_1.expect)(res.status).to.equal(400);\n            (0, chai_1.expect)(res.body.success).to.be.false;\n            (0, chai_1.expect)(res.body.error).to.equal('Search query is required');\n        })",
                  "err": {},
                  "uuid": "b742ce63-8420-4cfa-a5a6-11a711497190",
                  "parentUUID": "a68ecccf-a95b-4cb7-ad13-7177c76fe902",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if the ProductService throws an error",
                  "fullTitle": "Products API GET /api/products/search should return 500 if the ProductService throws an error",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').throws(new Error('SerpAPI error'));\n            const res = yield (0, supertest_1.default)(app)\n                .get('/api/products/search')\n                .query({ q: 'Laptop' });\n            (0, chai_1.expect)(res.status).to.equal(500);\n            (0, chai_1.expect)(res.body.success).to.be.false;\n            (0, chai_1.expect)(res.body.error).to.equal('SerpAPI error');\n        })",
                  "err": {},
                  "uuid": "67057c38-ce23-4328-b6d3-8fac8c5851aa",
                  "parentUUID": "a68ecccf-a95b-4cb7-ad13-7177c76fe902",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a735c04-0e59-4d79-8984-fec2fbbd1568",
                "b742ce63-8420-4cfa-a5a6-11a711497190",
                "67057c38-ce23-4328-b6d3-8fac8c5851aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 33,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "4e78938c-80a0-473e-a73b-b1b791140d1c",
          "title": "Profile API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
          "file": "\\src\\tests\\integration\\profile.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"before all\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/profiles', profile_1.default);",
              "err": {},
              "uuid": "62a0874a-1a38-411c-861b-3a93db8a9b60",
              "parentUUID": "4e78938c-80a0-473e-a73b-b1b791140d1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"after each\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "58023bdd-e843-4754-b0e7-10fdd7674ecf",
              "parentUUID": "4e78938c-80a0-473e-a73b-b1b791140d1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
              "title": "/api/profiles/passwords/:userId",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"/api/profiles/passwords/:userId\"",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId \"before each\" hook in \"/api/profiles/passwords/:userId\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "originalSecret = process.env.JWT_SECRET;",
                  "err": {},
                  "uuid": "db748188-5ef7-44f2-be16-089a0708ac2d",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"/api/profiles/passwords/:userId\"",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId \"after each\" hook in \"/api/profiles/passwords/:userId\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.JWT_SECRET = originalSecret; // restore",
                  "err": {},
                  "uuid": "4127a7b8-5cbb-498d-9c41-e8fbc6511038",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return 401 for no auth token on header",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 401 for no auth token on header",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords')\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No auth token in header'\n            });\n        })",
                  "err": {},
                  "uuid": "8654e0e0-8708-4bb7-9ef8-1e7ed5d597d7",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unconfigured JWT",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 500 for unconfigured JWT",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            delete process.env.JWT_SECRET;\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'JWT not configured'\n            });\n        })",
                  "err": {},
                  "uuid": "3524395a-c583-4ff7-b04d-f54f2bc64494",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for JWT verification error",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 401 for JWT verification error",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new jsonwebtoken_1.JsonWebTokenError(\"Some JWT verification error\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid JWT'\n            });\n        })",
                  "err": {},
                  "uuid": "8f20bfd7-b7c5-4ce0-8a2b-7af6bcbfda1b",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error JWT",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 500 for unknown error JWT",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new Error(\"Some other error during JWT verification\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error'\n            });\n        })",
                  "err": {},
                  "uuid": "9bef0405-8a8d-4256-bcec-3fd58619cc71",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for userId missing from params",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for userId missing from params",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "854910de-7825-44f1-b36c-d39021051456",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing newPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for missing newPassword",
                  "timedOut": false,
                  "duration": 16,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords')\n                .send({\n                currentPassword: 'currentPassword'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'currentPassword and newPassword required'\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { success: false, …(1) } to deeply equal { success: false, …(1) }",
                    "estack": "AssertionError: expected { success: false, …(1) } to deeply equal { success: false, …(1) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts:773:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\profile.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"error\": \"userId missing from params\"\n+   \"error\": \"currentPassword and newPassword required\"\n   \"success\": false\n }\n"
                  },
                  "uuid": "30a2f23d-d3db-4f0c-8477-c99a81bf5a14",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing currentPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for missing currentPassword",
                  "timedOut": false,
                  "duration": 10,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords')\n                .send({\n                newPassword: 'newPassword'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'currentPassword and newPassword required'\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { success: false, …(1) } to deeply equal { success: false, …(1) }",
                    "estack": "AssertionError: expected { success: false, …(1) } to deeply equal { success: false, …(1) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts:788:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\profile.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"error\": \"userId missing from params\"\n+   \"error\": \"currentPassword and newPassword required\"\n   \"success\": false\n }\n"
                  },
                  "uuid": "60073d09-1033-4f90-a828-6fc6c6c8d945",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string currentPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for non string currentPassword",
                  "timedOut": false,
                  "duration": 11,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords')\n                .send({\n                currentPassword: 123,\n                newPassword: 'newPassword'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'currentPassword and newPassword need to be strings'\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { success: false, …(1) } to deeply equal { success: false, …(1) }",
                    "estack": "AssertionError: expected { success: false, …(1) } to deeply equal { success: false, …(1) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts:804:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\profile.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"error\": \"userId missing from params\"\n+   \"error\": \"currentPassword and newPassword need to be strings\"\n   \"success\": false\n }\n"
                  },
                  "uuid": "174438cb-1a61-40f8-9251-5ef246e36d3c",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string currentPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for non string currentPassword",
                  "timedOut": false,
                  "duration": 10,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords')\n                .send({\n                currentPassword: 'test current',\n                newPassword: 123\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'currentPassword and newPassword need to be strings'\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { success: false, …(1) } to deeply equal { success: false, …(1) }",
                    "estack": "AssertionError: expected { success: false, …(1) } to deeply equal { success: false, …(1) }\n    at D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts:820:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\integration\\profile.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"error\": \"userId missing from params\"\n+   \"error\": \"currentPassword and newPassword need to be strings\"\n   \"success\": false\n }\n"
                  },
                  "uuid": "37b2e1fa-f1ca-48ae-b8ea-a06c38649ba9",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error during getting user",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 500 for unknown error during getting user",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').throws(new Error('Some error during fetching user'));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test current',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error during getting user'\n            });\n        })",
                  "err": {},
                  "uuid": "734504ee-922a-494d-91e4-a31731925649",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for unknown user",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 404 for unknown user",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test current',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No user found'\n            });\n        })",
                  "err": {},
                  "uuid": "fc3bc323-6706-4c7f-a785-128782bc4675",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid currentPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 401 for invalid currentPassword",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                name: 'test name',\n                email: 'test@example.com',\n                password: 'test1234',\n                isEmailVerified: true,\n                verificationToken: 'test token',\n                verificationTokenExpires: (new Date()).toISOString(),\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').resolves(userWithPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'comparePassword').resolves(false);\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test4321',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Password incorrect'\n            });\n        })",
                  "err": {},
                  "uuid": "587f4b98-070b-4a49-8186-26612eeb6bdf",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed password update",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 500 for failed password update",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                name: 'test name',\n                email: 'test@example.com',\n                password: 'test1234',\n                isEmailVerified: true,\n                verificationToken: 'test token',\n                verificationTokenExpires: (new Date()).toISOString(),\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').resolves(userWithPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'comparePassword').resolves(true);\n            sinon_1.default.stub(UserService_1.UserService, 'updatePassword').throws(new Error(\"Some error related to updating password\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test1234',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to update password'\n            });\n        })",
                  "err": {},
                  "uuid": "e76774a2-4864-400e-9dcc-4d79607aef4b",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successful password update",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 200 for successful password update",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                name: 'test name',\n                email: 'test@example.com',\n                password: 'test1234',\n                isEmailVerified: true,\n                verificationToken: 'test token',\n                verificationTokenExpires: (new Date()).toISOString(),\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').resolves(userWithPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'comparePassword').resolves(true);\n            sinon_1.default.stub(UserService_1.UserService, 'updatePassword').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test1234',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Password updated successfully'\n            });\n        })",
                  "err": {},
                  "uuid": "ca041b40-d45a-42cb-a647-9ad31c212b64",
                  "parentUUID": "77c68d1b-aa21-473b-a8aa-f0e20fb71b22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8654e0e0-8708-4bb7-9ef8-1e7ed5d597d7",
                "3524395a-c583-4ff7-b04d-f54f2bc64494",
                "8f20bfd7-b7c5-4ce0-8a2b-7af6bcbfda1b",
                "9bef0405-8a8d-4256-bcec-3fd58619cc71",
                "854910de-7825-44f1-b36c-d39021051456",
                "734504ee-922a-494d-91e4-a31731925649",
                "fc3bc323-6706-4c7f-a785-128782bc4675",
                "587f4b98-070b-4a49-8186-26612eeb6bdf",
                "e76774a2-4864-400e-9dcc-4d79607aef4b",
                "ca041b40-d45a-42cb-a647-9ad31c212b64"
              ],
              "failures": [
                "30a2f23d-d3db-4f0c-8477-c99a81bf5a14",
                "60073d09-1033-4f90-a828-6fc6c6c8d945",
                "174438cb-1a61-40f8-9251-5ef246e36d3c",
                "37b2e1fa-f1ca-48ae-b8ea-a06c38649ba9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 140,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "integration-tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-integration",
        "reportFilename": "integration-tests"
      },
      "version": "6.2.0"
    }
  }
}