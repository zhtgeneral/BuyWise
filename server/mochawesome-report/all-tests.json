{
  "stats": {
    "suites": 12,
    "tests": 46,
    "passes": 37,
    "pending": 0,
    "failures": 9,
    "start": "2025-07-02T00:06:44.636Z",
    "end": "2025-07-02T00:06:52.449Z",
    "duration": 7813,
    "testsRegistered": 46,
    "passPercent": 80.43478260869566,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7d182020-9e30-4b20-9889-fa036b7d74f3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "792390e9-74c8-4daf-9dd5-6c60a3b3cb73",
          "title": "Auth API",
          "fullFile": "/app/src/tests/integration/auth.test.ts",
          "file": "/src/tests/integration/auth.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"before all\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/auth', auth_1.default);",
              "err": {},
              "uuid": "3c8c7d94-9054-4d56-8dae-f7a4d3f2882b",
              "parentUUID": "792390e9-74c8-4daf-9dd5-6c60a3b3cb73",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"after each\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "357d78c6-072f-4041-84fe-bdc534768cd5",
              "parentUUID": "792390e9-74c8-4daf-9dd5-6c60a3b3cb73",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "7d3d5081-fbfb-4fa3-894d-1833d1f7f4fc",
              "title": "/api/auth/register POST",
              "fullFile": "/app/src/tests/integration/auth.test.ts",
              "file": "/src/tests/integration/auth.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing name",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing name",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "40165c6c-8337-4eec-a012-84a4e4f51d7e",
                  "parentUUID": "7d3d5081-fbfb-4fa3-894d-1833d1f7f4fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "f35fe51b-71f4-4d48-8ea4-dee1c1d582ca",
                  "parentUUID": "7d3d5081-fbfb-4fa3-894d-1833d1f7f4fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing password",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for missing password",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 'test@example.com',\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password are required'\n            });\n        })",
                  "err": {},
                  "uuid": "185224d4-40fb-4e54-a408-b94bf088ba00",
                  "parentUUID": "7d3d5081-fbfb-4fa3-894d-1833d1f7f4fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string name",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string name",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 123,\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "3e3cc3e4-5c68-46f4-a5e9-186dfcb8eaf1",
                  "parentUUID": "7d3d5081-fbfb-4fa3-894d-1833d1f7f4fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 123,\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "94a0081d-859a-4f96-8a30-c5d0fcd2b607",
                  "parentUUID": "7d3d5081-fbfb-4fa3-894d-1833d1f7f4fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string password",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for non string password",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test name',\n                email: 'test@example.com',\n                password: 123\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'name, email and password need to be strings'\n            });\n        })",
                  "err": {},
                  "uuid": "04770e7e-66e3-4862-93f6-07433c2097fa",
                  "parentUUID": "7d3d5081-fbfb-4fa3-894d-1833d1f7f4fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed email validation",
                  "fullTitle": "Auth API /api/auth/register POST should return 500 for failed email validation",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').throws(new Error(\"Error related to searching user with email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to determine validity of email'\n            });\n        })",
                  "err": {},
                  "uuid": "8f9c9970-2f7c-47fe-8094-4954554dfece",
                  "parentUUID": "7d3d5081-fbfb-4fa3-894d-1833d1f7f4fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for existing account",
                  "fullTitle": "Auth API /api/auth/register POST should return 400 for existing account",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves({\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: true\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'existing@example.com',\n                password: 'password123'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Email already exists. Pleast try logging in instead'\n            });\n        })",
                  "err": {},
                  "uuid": "4478c0f2-9784-4290-8d07-ed8eef3219b5",
                  "parentUUID": "7d3d5081-fbfb-4fa3-894d-1833d1f7f4fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed register",
                  "fullTitle": "Auth API /api/auth/register POST should return 500 for failed register",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            sinon_1.default.stub(authService_1.AuthService, 'register').throws(new Error(\"Unknown error in register\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Registration failed. Please try again'\n            });\n        })",
                  "err": {},
                  "uuid": "a11bf9c9-fd50-4cfa-ac1e-734272a4df69",
                  "parentUUID": "7d3d5081-fbfb-4fa3-894d-1833d1f7f4fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 201 on successful register",
                  "fullTitle": "Auth API /api/auth/register POST should return 201 on successful register",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUser = {\n                _id: 'test user id',\n                name: 'test user',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test token',\n                verificationTokenExpires: (new Date(Date.now() + 24 * 60 * 60 * 1000)).toISOString(),\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            sinon_1.default.stub(authService_1.AuthService, 'register').resolves({\n                token: '123abc',\n                user: fakeUser\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/register')\n                .send({\n                name: 'test user',\n                email: 'test@example.com',\n                password: 'password123'\n            })\n                .expect(201);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Registration successful! Your account has been created and verified',\n                data: fakeUser,\n                token: '123abc'\n            });\n        })",
                  "err": {},
                  "uuid": "903ef047-479a-4877-9e82-1423adea5124",
                  "parentUUID": "7d3d5081-fbfb-4fa3-894d-1833d1f7f4fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40165c6c-8337-4eec-a012-84a4e4f51d7e",
                "f35fe51b-71f4-4d48-8ea4-dee1c1d582ca",
                "185224d4-40fb-4e54-a408-b94bf088ba00",
                "3e3cc3e4-5c68-46f4-a5e9-186dfcb8eaf1",
                "94a0081d-859a-4f96-8a30-c5d0fcd2b607",
                "04770e7e-66e3-4862-93f6-07433c2097fa",
                "8f9c9970-2f7c-47fe-8094-4954554dfece",
                "4478c0f2-9784-4290-8d07-ed8eef3219b5",
                "a11bf9c9-fd50-4cfa-ac1e-734272a4df69",
                "903ef047-479a-4877-9e82-1423adea5124"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c75272a3-52aa-444e-8f0b-ae5a48264438",
              "title": "/api/auth/login POST",
              "fullFile": "/app/src/tests/integration/auth.test.ts",
              "file": "/src/tests/integration/auth.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                password: 'hashed-password'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password are required\"\n            });\n        })",
                  "err": {},
                  "uuid": "677a3065-17b1-434c-8932-4e1ff6d9183b",
                  "parentUUID": "c75272a3-52aa-444e-8f0b-ae5a48264438",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing password",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for missing password",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: \"test@example.com\"\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password are required\"\n            });\n        })",
                  "err": {},
                  "uuid": "fe9be5e6-95b7-48aa-84c3-f74284f1255e",
                  "parentUUID": "c75272a3-52aa-444e-8f0b-ae5a48264438",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 123,\n                password: 'test-hash'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password must be strings\"\n            });\n        })",
                  "err": {},
                  "uuid": "3358cc26-222e-4f1d-a424-bdb9d2407fca",
                  "parentUUID": "c75272a3-52aa-444e-8f0b-ae5a48264438",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string password",
                  "fullTitle": "Auth API /api/auth/login POST should return 400 for non string password",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 123\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Email and password must be strings\"\n            });\n        })",
                  "err": {},
                  "uuid": "be4bbf9c-6d3f-432d-ad6b-787d275a6b54",
                  "parentUUID": "c75272a3-52aa-444e-8f0b-ae5a48264438",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for bad email",
                  "fullTitle": "Auth API /api/auth/login POST should return 401 for bad email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Invalid email or password\"\n            });\n        })",
                  "err": {},
                  "uuid": "ee2abe6c-b5fb-4bea-81fc-23e075b36412",
                  "parentUUID": "c75272a3-52aa-444e-8f0b-ae5a48264438",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for unverified email",
                  "fullTitle": "Auth API /api/auth/login POST should return 401 for unverified email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const unverifiedUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                password: 'test-hash',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(unverifiedUser);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Please verify your email before logging in\"\n            });\n        })",
                  "err": {},
                  "uuid": "ea254e3a-e362-4251-beb8-f02aeb242b38",
                  "parentUUID": "c75272a3-52aa-444e-8f0b-ae5a48264438",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error during login",
                  "fullTitle": "Auth API /api/auth/login POST should return 500 for unknown error during login",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                _id: 'test_id',\n                email: 'test@example.com',\n                password: 'test-hash',\n                isEmailVerified: true\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(userWithPassword);\n            sinon_1.default.stub(authService_1.AuthService, 'login').throws(new Error(\"Some error during login\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'test-hash'\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: \"Unknown authentication error\"\n            });\n        })",
                  "err": {},
                  "uuid": "6e6d5646-3129-4995-8712-504354ec522c",
                  "parentUUID": "c75272a3-52aa-444e-8f0b-ae5a48264438",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 with token and user for successful login",
                  "fullTitle": "Auth API /api/auth/login POST should return 200 with token and user for successful login",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                email: 'test@example.com',\n                password: 'hashed-password',\n                isEmailVerified: true,\n            };\n            const { password } = userWithPassword, userWithoutPassword = __rest(userWithPassword, [\"password\"]);\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(userWithPassword);\n            sinon_1.default.stub(authService_1.AuthService, 'login').resolves({\n                token: 'token123',\n                user: userWithoutPassword\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/auth/login')\n                .send({\n                email: 'test@example.com',\n                password: 'hashed-password'\n            })\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Login successful',\n                data: userWithoutPassword,\n                token: 'token123'\n            });\n        })",
                  "err": {},
                  "uuid": "9ef34e02-1519-4aa9-be6b-e9f97f0d4c80",
                  "parentUUID": "c75272a3-52aa-444e-8f0b-ae5a48264438",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "677a3065-17b1-434c-8932-4e1ff6d9183b",
                "fe9be5e6-95b7-48aa-84c3-f74284f1255e",
                "3358cc26-222e-4f1d-a424-bdb9d2407fca",
                "be4bbf9c-6d3f-432d-ad6b-787d275a6b54",
                "ee2abe6c-b5fb-4bea-81fc-23e075b36412",
                "ea254e3a-e362-4251-beb8-f02aeb242b38",
                "6e6d5646-3129-4995-8712-504354ec522c",
                "9ef34e02-1519-4aa9-be6b-e9f97f0d4c80"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "03125a97-f4e7-47ec-a8e7-f92e02a5878f",
          "title": "Chat API",
          "fullFile": "/app/src/tests/integration/chat.test.ts",
          "file": "/src/tests/integration/chat.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Chat API\"",
              "fullTitle": "Chat API \"before all\" hook in \"Chat API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/chat', chat_1.default);",
              "err": {},
              "uuid": "fea3054f-9549-490b-851c-9e3012fb3d43",
              "parentUUID": "03125a97-f4e7-47ec-a8e7-f92e02a5878f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Chat API\"",
              "fullTitle": "Chat API \"after each\" hook in \"Chat API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "c0325504-81fc-4885-8220-3a11c9959f7e",
              "parentUUID": "03125a97-f4e7-47ec-a8e7-f92e02a5878f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "05affa79-2a72-4c7d-8d1f-d17367cfffe6",
              "title": "/api/chat POST",
              "fullFile": "/app/src/tests/integration/chat.test.ts",
              "file": "/src/tests/integration/chat.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing messages",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'test@example.com'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages and email required'\n            });\n        })",
                  "err": {},
                  "uuid": "5ff754c1-ac7d-4666-98bc-eb02165b96da",
                  "parentUUID": "05affa79-2a72-4c7d-8d1f-d17367cfffe6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                messages: [\n                    {\n                        speaker: 'user',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'bot',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages and email required'\n            });\n        })",
                  "err": {},
                  "uuid": "a8d61dcf-40f5-4563-af8b-756c14565919",
                  "parentUUID": "05affa79-2a72-4c7d-8d1f-d17367cfffe6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 123,\n                messages: [\n                    {\n                        speaker: 'user',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'bot',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email needs to be a string'\n            });\n        })",
                  "err": {},
                  "uuid": "09eed30e-8e19-422d-9129-9e88ff544116",
                  "parentUUID": "05affa79-2a72-4c7d-8d1f-d17367cfffe6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non array messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non array messages",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: 'filler'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages needs to be an array'\n            });\n        })",
                  "err": {},
                  "uuid": "c136503d-2040-46b6-ad2e-d2570a410638",
                  "parentUUID": "05affa79-2a72-4c7d-8d1f-d17367cfffe6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing text in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing text in messages",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                    },\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "5fa18518-164b-4e2e-9444-43dde437324c",
                  "parentUUID": "05affa79-2a72-4c7d-8d1f-d17367cfffe6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing speaker in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for missing speaker in messages",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        text: 'first reply'\n                    },\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "845a9f79-abe2-4b54-a70c-77f81fd8e9d9",
                  "parentUUID": "05affa79-2a72-4c7d-8d1f-d17367cfffe6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid speaker in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for invalid speaker in messages",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'NOT A BOT OR A USER',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "e712d9b1-7d78-4a31-b8b3-315ec9523af2",
                  "parentUUID": "05affa79-2a72-4c7d-8d1f-d17367cfffe6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string text in messages",
                  "fullTitle": "Chat API /api/chat POST should return 400 for non string text in messages",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                        text: 12345\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "37bdea78-9476-4332-9c37-118d4e4c3f3c",
                  "parentUUID": "05affa79-2a72-4c7d-8d1f-d17367cfffe6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed save chat",
                  "fullTitle": "Chat API /api/chat POST should return 500 for failed save chat",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(ChatService_1.ChatService, 'saveChat').throws(new Error(\"Some error in save chat\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to save chat'\n            });\n        })",
                  "err": {},
                  "uuid": "0b21994d-4d24-41a9-8833-c7649b377954",
                  "parentUUID": "05affa79-2a72-4c7d-8d1f-d17367cfffe6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for working save chat",
                  "fullTitle": "Chat API /api/chat POST should return 200 for working save chat",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const testDate = new Date('2025-06-30T01:14:27.853Z').toISOString();\n            const messagesData = [\n                {\n                    speaker: 'bot',\n                    text: 'first message',\n                    timestamp: testDate\n                },\n                {\n                    speaker: 'user',\n                    text: 'first reply',\n                    timestamp: testDate\n                }\n            ];\n            const mockChat = {\n                messages: messagesData,\n                email: 'text@example.com',\n                createdAt: testDate\n            };\n            sinon_1.default.stub(ChatService_1.ChatService, 'saveChat').resolves(mockChat);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chat')\n                .send({\n                email: 'text@example.com',\n                messages: messagesData\n            })\n                .expect(201);\n            (0, chai_1.expect)(response.body).to.deep.equal(mockChat);\n        })",
                  "err": {},
                  "uuid": "bfe86976-c63f-4c24-bbd4-e84b4c03246e",
                  "parentUUID": "05affa79-2a72-4c7d-8d1f-d17367cfffe6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ff754c1-ac7d-4666-98bc-eb02165b96da",
                "a8d61dcf-40f5-4563-af8b-756c14565919",
                "09eed30e-8e19-422d-9129-9e88ff544116",
                "c136503d-2040-46b6-ad2e-d2570a410638",
                "5fa18518-164b-4e2e-9444-43dde437324c",
                "845a9f79-abe2-4b54-a70c-77f81fd8e9d9",
                "e712d9b1-7d78-4a31-b8b3-315ec9523af2",
                "37bdea78-9476-4332-9c37-118d4e4c3f3c",
                "0b21994d-4d24-41a9-8833-c7649b377954",
                "bfe86976-c63f-4c24-bbd4-e84b4c03246e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "d1778a3c-b8be-4d9e-b0ba-69c2007fa991",
          "title": "Chatbot API",
          "fullFile": "/app/src/tests/integration/chatbot.test.ts",
          "file": "/src/tests/integration/chatbot.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Chatbot API\"",
              "fullTitle": "Chatbot API \"before all\" hook in \"Chatbot API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.post('/api/chatbot', chatbot_1.postChat);",
              "err": {},
              "uuid": "cd58265a-9b84-4a9d-bcec-8d059186bd5f",
              "parentUUID": "d1778a3c-b8be-4d9e-b0ba-69c2007fa991",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Chatbot API\"",
              "fullTitle": "Chatbot API \"after each\" hook in \"Chatbot API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "4bb7eec9-cf40-4aa7-b182-6f7690167e48",
              "parentUUID": "d1778a3c-b8be-4d9e-b0ba-69c2007fa991",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1987a21a-68e9-423f-aef9-c14203bb39f6",
              "title": "/api/chatbot POST",
              "fullFile": "/app/src/tests/integration/chatbot.test.ts",
              "file": "/src/tests/integration/chatbot.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns 400 code for missing message",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for missing message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({})\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message is required' });\n        })",
                  "err": {},
                  "uuid": "c8cd7762-9ccb-4631-af57-f145560bfdd6",
                  "parentUUID": "1987a21a-68e9-423f-aef9-c14203bb39f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 400 code for wrong data type",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for wrong data type",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: 0 })\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message must be a string' });\n        })",
                  "err": {
                    "message": "AssertionError: expected { error: 'Message is required' } to deeply equal { error: 'Message must be a string' }",
                    "estack": "AssertionError: expected { error: 'Message is required' } to deeply equal { error: 'Message must be a string' }\n    at /app/src/tests/integration/chatbot.test.ts:51:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src/tests/integration/chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"error\": \"Message is required\"\n+   \"error\": \"Message must be a string\"\n }\n"
                  },
                  "uuid": "24c1e716-56c8-4359-928c-aa5772ee69b6",
                  "parentUUID": "1987a21a-68e9-423f-aef9-c14203bb39f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 400 code for empty message",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 400 code for empty message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"\" })\n                .expect(400);\n            expect(response.body).to.deep.equal({ error: 'Message cannot be empty' });\n        })",
                  "err": {
                    "message": "AssertionError: expected { error: 'Message is required' } to deeply equal { error: 'Message cannot be empty' }",
                    "estack": "AssertionError: expected { error: 'Message is required' } to deeply equal { error: 'Message cannot be empty' }\n    at /app/src/tests/integration/chatbot.test.ts:60:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src/tests/integration/chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"error\": \"Message is required\"\n+   \"error\": \"Message cannot be empty\"\n }\n"
                  },
                  "uuid": "a5036797-f472-489b-9b69-5ae7bee4af47",
                  "parentUUID": "1987a21a-68e9-423f-aef9-c14203bb39f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 500 code for failed chatbot API call",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 500 code for failed chatbot API call",
                  "timedOut": false,
                  "duration": 1555,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').throws(new Error(\"some API error message\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"hi\" })\n                .expect(500);\n            expect(response.body).to.deep.equal({ error: 'Unable to call chatbot API' });\n        })",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"\n    at /app/src/tests/integration/chatbot.test.ts:68:10\n    at Generator.next (<anonymous>)\n    at /app/src/tests/integration/chatbot.test.ts:41:71\n    at new Promise (<anonymous>)\n    at __awaiter (src/tests/integration/chatbot.test.ts:37:12)\n    at Context.<anonymous> (src/tests/integration/chatbot.test.ts:63:67)\n    at processImmediate (node:internal/timers:485:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /app/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:632:28)\n    at Server.emit (node:events:518:28)\n    at Server.emit (node:domain:489:12)\n    at emitCloseNT (node:net:2419:8)\n    at processTicksAndRejections (node:internal/process/task_queues:89:21)",
                    "diff": null
                  },
                  "uuid": "cfd7b19c-a597-49d2-aec7-7dde1e90618f",
                  "parentUUID": "1987a21a-68e9-423f-aef9-c14203bb39f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 500 code for incomplete chatbot response",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 500 code for incomplete chatbot response",
                  "timedOut": false,
                  "duration": 1435,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"\",\n                productRequested: false,\n                productQuery: \"\"\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"give me an incomplete response\" })\n                .expect(500);\n            expect(response.body).to.deep.equal({ error: 'AI unable to respond' });\n        })",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 200 \"OK\"\n    at /app/src/tests/integration/chatbot.test.ts:83:10\n    at Generator.next (<anonymous>)\n    at /app/src/tests/integration/chatbot.test.ts:41:71\n    at new Promise (<anonymous>)\n    at __awaiter (src/tests/integration/chatbot.test.ts:37:12)\n    at Context.<anonymous> (src/tests/integration/chatbot.test.ts:73:71)\n    at processImmediate (node:internal/timers:485:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /app/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:632:28)\n    at Server.emit (node:events:518:28)\n    at Server.emit (node:domain:489:12)\n    at emitCloseNT (node:net:2419:8)\n    at processTicksAndRejections (node:internal/process/task_queues:89:21)",
                    "diff": null
                  },
                  "uuid": "05dcfb56-0136-4e36-a61c-fd4f4e5279da",
                  "parentUUID": "1987a21a-68e9-423f-aef9-c14203bb39f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API without products",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API without products",
                  "timedOut": false,
                  "duration": 1605,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"What would you like to search for?\",\n                productRequested: false,\n                productQuery: \"\"\n            });\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"test message\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"What would you like to search for?\",\n                productData: null\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at /app/src/tests/integration/chatbot.test.ts:99:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src/tests/integration/chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"I'm BuyWise, your shopping assistant for laptops, phones, and computers. I can help you find the perfect tech products, compare prices, and get recommendations. What device are you looking for?\"\n+   \"chatbotMessage\": \"What would you like to search for?\"\n   \"productData\": [null]\n }\n"
                  },
                  "uuid": "b96d9191-9eff-472f-af83-c6a0dbae7841",
                  "parentUUID": "1987a21a-68e9-423f-aef9-c14203bb39f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API and failed product API",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API and failed product API",
                  "timedOut": false,
                  "duration": 1341,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productRequested: true,\n                productQuery: \"macbook\"\n            });\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').throws(new Error(\"some API error message\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"I want some macbooks\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productData: []\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at /app/src/tests/integration/chatbot.test.ts:118:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src/tests/integration/chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"I found some MacBook options for you! Would you like to see the latest models, or do you have a specific budget or use case in mind?\"\n-   \"productData\": [null]\n+   \"chatbotMessage\": \"Here are some macbooks I found.\"\n+   \"productData\": []\n }\n"
                  },
                  "uuid": "a7eca34b-d026-44b5-aff7-c32dc1e19a94",
                  "parentUUID": "1987a21a-68e9-423f-aef9-c14203bb39f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns 200 code for working chatbot API and product API",
                  "fullTitle": "Chatbot API /api/chatbot POST returns 200 code for working chatbot API and product API",
                  "timedOut": false,
                  "duration": 1202,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const mockProduct = {\n                product_id: \"123\",\n                source: \"Best Buy\",\n                title: \"MacBook Pro\",\n                thumbnail: \"image.jpg\",\n                extracted_price: 1299,\n                seller_details: { direct_link: \"http://example.com\" },\n                rating: 4.5,\n                reviews: 120\n            };\n            sinon_1.default.stub(AIService_1.AIService, 'chatCompletionGithubModel').resolves({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productRequested: true,\n                productQuery: \"macbook\"\n            });\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').resolves([mockProduct]);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chatbot')\n                .send({ message: \"I want some macbooks\" })\n                .expect(200);\n            expect(response.body).to.deep.equal({\n                chatbotMessage: \"Here are some macbooks I found.\",\n                productData: [{\n                        id: mockProduct.product_id,\n                        source: mockProduct.source,\n                        title: mockProduct.title,\n                        image: mockProduct.thumbnail,\n                        price: mockProduct.extracted_price,\n                        url: mockProduct.seller_details.direct_link,\n                        rating: mockProduct.rating,\n                        reviews: mockProduct.reviews\n                    }]\n            });\n        })",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { …(2) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { …(2) }\n    at /app/src/tests/integration/chatbot.test.ts:147:37\n    at Generator.next (<anonymous>)\n    at fulfilled (src/tests/integration/chatbot.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": " {\n-   \"chatbotMessage\": \"I found a MacBook Pro available for $1299 at Best Buy. Would you like more options or details about this model?\"\n+   \"chatbotMessage\": \"Here are some macbooks I found.\"\n   \"productData\": [\n     {\n       \"id\": \"123\"\n       \"image\": \"image.jpg\"\n"
                  },
                  "uuid": "a7890293-526c-41a7-9192-07dc90523325",
                  "parentUUID": "1987a21a-68e9-423f-aef9-c14203bb39f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8cd7762-9ccb-4631-af57-f145560bfdd6"
              ],
              "failures": [
                "24c1e716-56c8-4359-928c-aa5772ee69b6",
                "a5036797-f472-489b-9b69-5ae7bee4af47",
                "cfd7b19c-a597-49d2-aec7-7dde1e90618f",
                "05dcfb56-0136-4e36-a61c-fd4f4e5279da",
                "b96d9191-9eff-472f-af83-c6a0dbae7841",
                "a7eca34b-d026-44b5-aff7-c32dc1e19a94",
                "a7890293-526c-41a7-9192-07dc90523325"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7142,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "51fb5589-447b-439d-bfae-96e6196a5263",
          "title": "Products API",
          "fullFile": "/app/src/tests/integration/products.test.ts",
          "file": "/src/tests/integration/products.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Products API\"",
              "fullTitle": "Products API \"before all\" hook in \"Products API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use('/api/products', products_1.default);",
              "err": {},
              "uuid": "3b7e1ca1-e76a-461a-a25e-4294f7d9c980",
              "parentUUID": "51fb5589-447b-439d-bfae-96e6196a5263",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Products API\"",
              "fullTitle": "Products API \"after each\" hook in \"Products API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "0127f90c-6849-4885-a9e9-bec842c6072f",
              "parentUUID": "51fb5589-447b-439d-bfae-96e6196a5263",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "d1157d74-91fb-4f63-a119-63a980f2d056",
              "title": "GET /api/products/search",
              "fullFile": "/app/src/tests/integration/products.test.ts",
              "file": "/src/tests/integration/products.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return products for a valid search query",
                  "fullTitle": "Products API GET /api/products/search should return products for a valid search query",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProducts = [\n                {\n                    category: 'Popular products',\n                    thumbnail: 'https://example.com/image.jpg',\n                    source_logo: 'https://example.com/logo.png',\n                    source: 'Best Buy',\n                    title: 'HP 14\" Intel Celeron Laptop',\n                    rating: 4.2,\n                    reviews: 148,\n                    price: '$199.99',\n                    extracted_price: 199.99,\n                    location: 'Nearby, 13 mi',\n                    product_id: '2197135960910078338',\n                    seller_details: [\n                        {\n                            position: 1,\n                            name: 'Best Buy',\n                            top_quality_store: true,\n                            payment_methods: 'PayPal, Zip accepted',\n                            rating: 4.6,\n                            reviews: 532,\n                            reviews_original: '(532)',\n                            link: 'https://google.com/redirect',\n                            direct_link: 'https://bestbuy.com/product',\n                            details_and_offers: [{ text: '5.3 mi · In stock at GainesvilleToday: 10:00 AM - 8:00 PM' }],\n                            base_price: '$199.99',\n                            additional_price: { shipping: 'See website' },\n                            total_price: '$199.99',\n                        }\n                    ],\n                },\n            ];\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').resolves(fakeProducts);\n            const res = yield (0, supertest_1.default)(app)\n                .get('/api/products/search')\n                .query({ q: 'Laptop under $400', device: 'desktop', location: 'Canada' });\n            (0, chai_1.expect)(res.status).to.equal(200);\n            (0, chai_1.expect)(res.body.success).to.be.true;\n            (0, chai_1.expect)(res.body.products).to.deep.equal(fakeProducts);\n        })",
                  "err": {},
                  "uuid": "9d7ce12f-3403-4423-95df-7a12d40e971c",
                  "parentUUID": "d1157d74-91fb-4f63-a119-63a980f2d056",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if the search query is missing",
                  "fullTitle": "Products API GET /api/products/search should return 400 if the search query is missing",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const res = yield (0, supertest_1.default)(app).get('/api/products/search');\n            (0, chai_1.expect)(res.status).to.equal(400);\n            (0, chai_1.expect)(res.body.success).to.be.false;\n            (0, chai_1.expect)(res.body.error).to.equal('Search query is required');\n        })",
                  "err": {},
                  "uuid": "da0e0af8-8b9d-4f69-a082-aadbd248844f",
                  "parentUUID": "d1157d74-91fb-4f63-a119-63a980f2d056",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if the ProductService throws an error",
                  "fullTitle": "Products API GET /api/products/search should return 500 if the ProductService throws an error",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(ProductService_1.ProductService, 'searchProducts').throws(new Error('SerpAPI error'));\n            const res = yield (0, supertest_1.default)(app)\n                .get('/api/products/search')\n                .query({ q: 'Laptop' });\n            (0, chai_1.expect)(res.status).to.equal(500);\n            (0, chai_1.expect)(res.body.success).to.be.false;\n            (0, chai_1.expect)(res.body.error).to.equal('SerpAPI error');\n        })",
                  "err": {},
                  "uuid": "f7913506-c8d9-4dc8-9fb0-a3d50574d5ad",
                  "parentUUID": "d1157d74-91fb-4f63-a119-63a980f2d056",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d7ce12f-3403-4423-95df-7a12d40e971c",
                "da0e0af8-8b9d-4f69-a082-aadbd248844f",
                "f7913506-c8d9-4dc8-9fb0-a3d50574d5ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "06b86806-4751-432f-8a19-7a7cd3e09984",
          "title": "Profile API",
          "fullFile": "/app/src/tests/integration/profile.test.ts",
          "file": "/src/tests/integration/profile.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"before all\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/profiles', profile_1.default);",
              "err": {},
              "uuid": "1584ca5a-afda-4b2c-9f48-ef9f721cccba",
              "parentUUID": "06b86806-4751-432f-8a19-7a7cd3e09984",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"after each\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "c5a9dd25-e07b-4b08-9bfb-8ab44fb116ce",
              "parentUUID": "06b86806-4751-432f-8a19-7a7cd3e09984",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "4c28ebb8-741d-4966-92df-1f77734e00d0",
              "title": "/api/profiles/verify/:token GET",
              "fullFile": "/app/src/tests/integration/profile.test.ts",
              "file": "/src/tests/integration/profile.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing token",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 400 for missing token",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify')\n                .query({})\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'token missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "1b10bc4d-8b0a-4e91-bd9f-45bcdaab967a",
                  "parentUUID": "4c28ebb8-741d-4966-92df-1f77734e00d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failing to get user",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 500 for failing to get user",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get user'\n            });\n        })",
                  "err": {},
                  "uuid": "893be12e-41f2-49eb-a71b-6c16ea1bc3cc",
                  "parentUUID": "4c28ebb8-741d-4966-92df-1f77734e00d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for not finding valid user",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 404 for not finding valid user",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid or expired verification token'\n            });\n        })",
                  "err": {},
                  "uuid": "e2e6b56f-0074-4e00-81c8-40ffb70cffb9",
                  "parentUUID": "4c28ebb8-741d-4966-92df-1f77734e00d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failing to verify email",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 500 for failing to verify email",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeDate = new Date();\n            const fakeUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test123',\n                verificationTokenExpires: fakeDate,\n                createdAt: fakeDate,\n                updatedAt: fakeDate,\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(fakeUser);\n            sinon_1.default.stub(UserService_1.UserService, 'verifyEmail').throws(new Error(\"Some error related to verifying email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to verify email'\n            });\n        })",
                  "err": {},
                  "uuid": "9b3f936f-f872-4e20-8d9c-88a5d962c370",
                  "parentUUID": "4c28ebb8-741d-4966-92df-1f77734e00d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failing to verify email",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 500 for failing to verify email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeDate = new Date();\n            const fakeUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test123',\n                verificationTokenExpires: fakeDate,\n                createdAt: fakeDate,\n                updatedAt: fakeDate,\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(fakeUser);\n            sinon_1.default.stub(UserService_1.UserService, 'verifyEmail').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Email verified successfully'\n            });\n        })",
                  "err": {},
                  "uuid": "2139b1ca-8013-4651-be24-06d4c2275c72",
                  "parentUUID": "4c28ebb8-741d-4966-92df-1f77734e00d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b10bc4d-8b0a-4e91-bd9f-45bcdaab967a",
                "893be12e-41f2-49eb-a71b-6c16ea1bc3cc",
                "e2e6b56f-0074-4e00-81c8-40ffb70cffb9",
                "9b3f936f-f872-4e20-8d9c-88a5d962c370",
                "2139b1ca-8013-4651-be24-06d4c2275c72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "adfb367d-4a8a-4fc3-b506-8624b744680c",
          "title": "EmailService",
          "fullFile": "/app/src/tests/unit/EmailService.test.ts",
          "file": "/src/tests/unit/EmailService.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"EmailService\"",
              "fullTitle": "EmailService \"before each\" hook in \"EmailService\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sendMailStub = sinon_1.default.stub().resolves();\ncreateTransportStub = sinon_1.default.stub(nodemailer_1.default, 'createTransport').returns({\n    sendMail: sendMailStub\n});",
              "err": {},
              "uuid": "d67d3a51-e548-4f27-b45e-af7bded8e191",
              "parentUUID": "adfb367d-4a8a-4fc3-b506-8624b744680c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"EmailService\"",
              "fullTitle": "EmailService \"after each\" hook in \"EmailService\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "7e23f07f-59f9-4707-8a8a-421f0e79cc7b",
              "parentUUID": "adfb367d-4a8a-4fc3-b506-8624b744680c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should send email with correct options",
              "fullTitle": "EmailService should send email with correct options",
              "timedOut": false,
              "duration": 416,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const email = 'test@example.com';\n        const token = 'dummy-token';\n        process.env.FRONTEND_URL = 'http://localhost:3000';\n        process.env.EMAIL_USER = 'testuser@gmail.com';\n        yield emailService.sendVerificationEmail(email, token);\n        (0, chai_1.expect)(sendMailStub.calledOnce).to.be.true;\n        const mailOptions = sendMailStub.firstCall.args[0];\n        (0, chai_1.expect)(mailOptions.to).to.equal(email);\n        (0, chai_1.expect)(mailOptions.from).to.equal(process.env.EMAIL_USER);\n        (0, chai_1.expect)(mailOptions.subject).to.include('Verify your BuyWise account');\n        (0, chai_1.expect)(mailOptions.html).to.include(`${process.env.FRONTEND_URL}/verify-email?token=${token}`);\n    })",
              "err": {
                "message": "AssertionError: expected false to be true",
                "estack": "AssertionError: expected false to be true\n    at /app/src/tests/unit/EmailService.test.ts:31:42\n    at Generator.next (<anonymous>)\n    at fulfilled (src/tests/unit/EmailService.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "6bb6cc1d-1891-4efe-a2da-accdce89a446",
              "parentUUID": "adfb367d-4a8a-4fc3-b506-8624b744680c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when sending email fails",
              "fullTitle": "EmailService should throw an error when sending email fails",
              "timedOut": false,
              "duration": 141,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        sendMailStub.rejects(new Error('SMTP error'));\n        try {\n            yield emailService.sendVerificationEmail('fail@example.com', 'token');\n            throw new Error('Expected method to throw.');\n        }\n        catch (err) {\n            (0, chai_1.expect)(err.message).to.equal('Failed to send verification email');\n        }\n    })",
              "err": {
                "message": "AssertionError: expected 'Expected method to throw.' to equal 'Failed to send verification email'",
                "estack": "AssertionError: expected 'Expected method to throw.' to equal 'Failed to send verification email'\n    at /app/src/tests/unit/EmailService.test.ts:47:30\n    at Generator.next (<anonymous>)\n    at fulfilled (src/tests/unit/EmailService.test.ts:38:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- Expected method to throw.\n+ Failed to send verification email\n"
              },
              "uuid": "154991c9-6047-443b-ab02-b51b496ab92e",
              "parentUUID": "adfb367d-4a8a-4fc3-b506-8624b744680c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6bb6cc1d-1891-4efe-a2da-accdce89a446",
            "154991c9-6047-443b-ab02-b51b496ab92e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 557,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "all-tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "reportFilename": "all-tests"
      },
      "version": "6.2.0"
    }
  }
}