{
  "stats": {
    "suites": 3,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-04T02:40:21.324Z",
    "end": "2025-07-04T02:40:21.538Z",
    "duration": 214,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1185cebc-b296-4c7f-8e68-63b1dc64e1cb",
      "title": "",
      "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chats.test.ts",
      "file": "\\src\\tests\\integration\\chats.test.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "01b53479-9985-4e6b-be74-398edff6b99e",
          "title": "Chat API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chats.test.ts",
          "file": "\\src\\tests\\integration\\chats.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Chat API\"",
              "fullTitle": "Chat API \"before all\" hook in \"Chat API\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/chats', chat_1.default);",
              "err": {},
              "uuid": "6eb25166-274b-4e16-b9bc-3c1fa7d14265",
              "parentUUID": "01b53479-9985-4e6b-be74-398edff6b99e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Chat API\"",
              "fullTitle": "Chat API \"after each\" hook in \"Chat API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "cf6870a7-617f-4a61-8455-c7f749b1c2c1",
              "parentUUID": "01b53479-9985-4e6b-be74-398edff6b99e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "719812a4-c472-46d2-a5a4-3df8dec2cb28",
              "title": "/api/chats POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chats.test.ts",
              "file": "\\src\\tests\\integration\\chats.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing messages",
                  "fullTitle": "Chat API /api/chats POST should return 400 for missing messages",
                  "timedOut": false,
                  "duration": 65,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chats')\n                .send({\n                email: 'test@example.com'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages and email required'\n            });\n        })",
                  "err": {},
                  "uuid": "e35b1904-8f3f-4961-89e6-207e17428748",
                  "parentUUID": "719812a4-c472-46d2-a5a4-3df8dec2cb28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Chat API /api/chats POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chats')\n                .send({\n                messages: [\n                    {\n                        speaker: 'user',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'bot',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages and email required'\n            });\n        })",
                  "err": {},
                  "uuid": "feba5875-ca93-4fc9-b631-6fd207ee398f",
                  "parentUUID": "719812a4-c472-46d2-a5a4-3df8dec2cb28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Chat API /api/chats POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chats')\n                .send({\n                email: 123,\n                messages: [\n                    {\n                        speaker: 'user',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'bot',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email needs to be a string'\n            });\n        })",
                  "err": {},
                  "uuid": "0a7e4b73-e51f-4f8e-a550-1a5b7cb16e8d",
                  "parentUUID": "719812a4-c472-46d2-a5a4-3df8dec2cb28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non array messages",
                  "fullTitle": "Chat API /api/chats POST should return 400 for non array messages",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chats')\n                .send({\n                email: 'text@example.com',\n                messages: 'filler'\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'messages needs to be an array'\n            });\n        })",
                  "err": {},
                  "uuid": "55aa535f-e4ff-4c80-9b19-4c5fb4531291",
                  "parentUUID": "719812a4-c472-46d2-a5a4-3df8dec2cb28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing text in messages",
                  "fullTitle": "Chat API /api/chats POST should return 400 for missing text in messages",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chats')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                    },\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "22c36fac-cf38-4b16-97cb-b4d960cdd6d3",
                  "parentUUID": "719812a4-c472-46d2-a5a4-3df8dec2cb28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing speaker in messages",
                  "fullTitle": "Chat API /api/chats POST should return 400 for missing speaker in messages",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chats')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        text: 'first reply'\n                    },\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "589229d1-8602-45fc-8107-6602208ea4dd",
                  "parentUUID": "719812a4-c472-46d2-a5a4-3df8dec2cb28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid speaker in messages",
                  "fullTitle": "Chat API /api/chats POST should return 400 for invalid speaker in messages",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chats')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'NOT A BOT OR A USER',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "69cdcfc9-d37b-488d-8fb1-32765190ab36",
                  "parentUUID": "719812a4-c472-46d2-a5a4-3df8dec2cb28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string text in messages",
                  "fullTitle": "Chat API /api/chats POST should return 400 for non string text in messages",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chats')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                        text: 12345\n                    }\n                ]\n            })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid speaker or text found on message'\n            });\n        })",
                  "err": {},
                  "uuid": "1705d427-d4cb-49cf-928c-0791aa5f0f74",
                  "parentUUID": "719812a4-c472-46d2-a5a4-3df8dec2cb28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed save chat",
                  "fullTitle": "Chat API /api/chats POST should return 500 for failed save chat",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(ChatService_1.ChatService, 'saveChat').throws(new Error(\"Some error in save chat\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chats')\n                .send({\n                email: 'text@example.com',\n                messages: [\n                    {\n                        speaker: 'bot',\n                        text: 'first message'\n                    },\n                    {\n                        speaker: 'user',\n                        text: 'first reply'\n                    }\n                ]\n            })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to save chat'\n            });\n        })",
                  "err": {},
                  "uuid": "9724ba87-5aa4-435e-b7a6-ac94f9212282",
                  "parentUUID": "719812a4-c472-46d2-a5a4-3df8dec2cb28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 201 for working save chat",
                  "fullTitle": "Chat API /api/chats POST should return 201 for working save chat",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const testDate = new Date('2025-06-30T01:14:27.853Z').toISOString();\n            const messagesData = [\n                {\n                    speaker: 'bot',\n                    text: 'first message',\n                    timestamp: testDate\n                },\n                {\n                    speaker: 'user',\n                    text: 'first reply',\n                    timestamp: testDate\n                }\n            ];\n            const mockChat = {\n                messages: messagesData,\n                email: 'text@example.com',\n                createdAt: testDate\n            };\n            sinon_1.default.stub(ChatService_1.ChatService, 'saveChat').resolves(mockChat);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/chats')\n                .send({\n                email: 'text@example.com',\n                messages: messagesData\n            })\n                .expect(201);\n            (0, chai_1.expect)(response.body).to.deep.equal(mockChat);\n        })",
                  "err": {},
                  "uuid": "bd3e4b0d-bd09-4554-84ac-21b1ec2ada45",
                  "parentUUID": "719812a4-c472-46d2-a5a4-3df8dec2cb28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e35b1904-8f3f-4961-89e6-207e17428748",
                "feba5875-ca93-4fc9-b631-6fd207ee398f",
                "0a7e4b73-e51f-4f8e-a550-1a5b7cb16e8d",
                "55aa535f-e4ff-4c80-9b19-4c5fb4531291",
                "22c36fac-cf38-4b16-97cb-b4d960cdd6d3",
                "589229d1-8602-45fc-8107-6602208ea4dd",
                "69cdcfc9-d37b-488d-8fb1-32765190ab36",
                "1705d427-d4cb-49cf-928c-0791aa5f0f74",
                "9724ba87-5aa4-435e-b7a6-ac94f9212282",
                "bd3e4b0d-bd09-4554-84ac-21b1ec2ada45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 149,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "57fbd00e-21b1-4274-9572-852c95479d28",
              "title": "/api/chats GET",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\chats.test.ts",
              "file": "\\src\\tests\\integration\\chats.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing email on query params",
                  "fullTitle": "Chat API /api/chats GET should return 400 for missing email on query params",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/chats')\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email missing from query params'\n            });\n        })",
                  "err": {},
                  "uuid": "651be417-0efc-4f12-8e3c-c6231cc4e0f5",
                  "parentUUID": "57fbd00e-21b1-4274-9572-852c95479d28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error during fetch",
                  "fullTitle": "Chat API /api/chats GET should return 500 for unknown error during fetch",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(ChatService_1.ChatService, 'getChatsByEmail').throws(new Error(\"Some error related to fetching chats\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/chats?email=test@example.com')\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Failed to fetch chats'\n            });\n        })",
                  "err": {},
                  "uuid": "db5e6f3f-584a-46f5-9d33-d2541a91c13a",
                  "parentUUID": "57fbd00e-21b1-4274-9572-852c95479d28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successful fetch",
                  "fullTitle": "Chat API /api/chats GET should return 200 for successful fetch",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const testDate = new Date('2025-06-30T01:14:27.853Z').toISOString();\n            const fakeChats = [\n                {\n                    \"_id\": \"507f1f77bcf86cd799439011\",\n                    \"email\": \"test@example.com\",\n                    \"messages\": [\n                        {\n                            \"speaker\": \"user\",\n                            \"text\": \"I want macbooks\",\n                            \"timestamp\": testDate\n                        },\n                        {\n                            \"speaker\": \"bot\",\n                            \"text\": \"Here are some macbooks I found!\",\n                            \"timestamp\": testDate,\n                            \"recommendedProducts\": [\n                                {\n                                    id: 'product id',\n                                    source: 'Apple',\n                                    title: 'macbook air',\n                                    image: 'some image url',\n                                    price: 1400,\n                                    url: 'some url',\n                                    rating: 4.5,\n                                    reviews: 220\n                                },\n                                {\n                                    id: 'product id',\n                                    source: 'Apple',\n                                    title: 'macbook mini',\n                                    image: 'some image url',\n                                    price: 1300,\n                                    url: 'some url',\n                                    rating: 4.0,\n                                    reviews: 30\n                                }\n                            ]\n                        }\n                    ],\n                    \"createdAt\": testDate,\n                    \"updatedAt\": testDate\n                },\n                {\n                    \"_id\": \"507f1f77bcf86cd799439012\",\n                    \"email\": \"test@example.com\",\n                    \"messages\": [\n                        {\n                            \"speaker\": \"user\",\n                            \"text\": \"How are you?\",\n                            \"timestamp\": testDate\n                        },\n                        {\n                            \"speaker\": \"bot\",\n                            \"text\": \"Let's keep this chat focused on electronics!\",\n                            \"timestamp\": testDate,\n                            \"recommendedProducts\": []\n                        }\n                    ],\n                    \"createdAt\": testDate,\n                    \"updatedAt\": testDate\n                }\n            ];\n            sinon_1.default.stub(ChatService_1.ChatService, 'getChatsByEmail').resolves(fakeChats);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/chats?email=test@example.com')\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                chats: fakeChats\n            });\n        })",
                  "err": {},
                  "uuid": "d45f4df4-21a2-4a86-bcb3-6df86a914472",
                  "parentUUID": "57fbd00e-21b1-4274-9572-852c95479d28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "651be417-0efc-4f12-8e3c-c6231cc4e0f5",
                "db5e6f3f-584a-46f5-9d33-d2541a91c13a",
                "d45f4df4-21a2-4a86-bcb3-6df86a914472"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 25,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "chat-test",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-chat",
        "reportFilename": "chat-test"
      },
      "version": "6.2.0"
    }
  }
}