{
  "stats": {
    "suites": 2,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-02T01:50:50.218Z",
    "end": "2025-07-02T01:50:50.410Z",
    "duration": 192,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "84e99be0-76bf-4357-aa62-9705b6f888e2",
      "title": "",
      "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
      "file": "\\src\\tests\\integration\\profile.test.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cb7b0b4f-3279-405e-8064-896b923e4b21",
          "title": "Profile API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
          "file": "\\src\\tests\\integration\\profile.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"before all\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/profiles', profile_1.default);",
              "err": {},
              "uuid": "8e5ed382-ba55-47a7-b775-e6d643e0fb35",
              "parentUUID": "cb7b0b4f-3279-405e-8064-896b923e4b21",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"after each\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "3a2330a0-0801-4a53-a75a-716c1dad6aae",
              "parentUUID": "cb7b0b4f-3279-405e-8064-896b923e4b21",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e9b927ab-c5b4-4947-ad5c-9f878268e648",
              "title": "/api/profiles/resend-verification POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({})\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email is required'\n            });\n        })",
                  "err": {},
                  "uuid": "3b6d7f52-9a42-43d0-a69b-d5cac2b646c4",
                  "parentUUID": "e9b927ab-c5b4-4947-ad5c-9f878268e648",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 123 })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email must be a string'\n            });\n        })",
                  "err": {},
                  "uuid": "e46cbbe1-a156-4aff-8d6b-13bf6e1dcda7",
                  "parentUUID": "e9b927ab-c5b4-4947-ad5c-9f878268e648",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error while getting user",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 500 for unknown error while getting user",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get user while verifying email'\n            });\n        })",
                  "err": {},
                  "uuid": "e03df11f-2fdd-4946-afd8-14d67d46502e",
                  "parentUUID": "e9b927ab-c5b4-4947-ad5c-9f878268e648",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for unknown user",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 404 for unknown user",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'user cannot be found'\n            });\n        })",
                  "err": {},
                  "uuid": "c9c88b54-81be-4419-abb2-7e14acd15bd2",
                  "parentUUID": "e9b927ab-c5b4-4947-ad5c-9f878268e648",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for user with verified email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for user with verified email",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: true\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email is already verified'\n            });\n        })",
                  "err": {},
                  "uuid": "59873609-f6ce-4c1b-855a-6c5b8df4a3c7",
                  "parentUUID": "e9b927ab-c5b4-4947-ad5c-9f878268e648",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error during resending verification email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 500 for unknown error during resending verification email",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'resendVerificationEmail').throws(new Error(\"Some error related to resending verification email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to resend verification email'\n            });\n        })",
                  "err": {},
                  "uuid": "7bcae0e8-cb7f-4170-b39c-674257d4487f",
                  "parentUUID": "e9b927ab-c5b4-4947-ad5c-9f878268e648",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully resending email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 200 for successfully resending email",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'resendVerificationEmail').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Verification email sent'\n            });\n        })",
                  "err": {},
                  "uuid": "c742e2d7-b6e3-426f-be0d-fac0a5c89d33",
                  "parentUUID": "e9b927ab-c5b4-4947-ad5c-9f878268e648",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b6d7f52-9a42-43d0-a69b-d5cac2b646c4",
                "e46cbbe1-a156-4aff-8d6b-13bf6e1dcda7",
                "e03df11f-2fdd-4946-afd8-14d67d46502e",
                "c9c88b54-81be-4419-abb2-7e14acd15bd2",
                "59873609-f6ce-4c1b-855a-6c5b8df4a3c7",
                "7bcae0e8-cb7f-4170-b39c-674257d4487f",
                "c742e2d7-b6e3-426f-be0d-fac0a5c89d33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 167,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "profile-test",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-profile",
        "reportFilename": "profile-test"
      },
      "version": "6.2.0"
    }
  }
}