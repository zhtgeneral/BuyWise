{
  "stats": {
    "suites": 6,
    "tests": 44,
    "passes": 44,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-02T21:40:53.869Z",
    "end": "2025-07-02T21:40:54.478Z",
    "duration": 609,
    "testsRegistered": 44,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3f166cf3-d70e-48f9-ae43-d2c419d8f74e",
      "title": "",
      "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
      "file": "\\src\\tests\\integration\\profile.test.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3f0c3017-e388-4b61-8d7e-671d3c4ae82a",
          "title": "Profile API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
          "file": "\\src\\tests\\integration\\profile.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"before all\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/profiles', profile_1.default);",
              "err": {},
              "uuid": "4f2a38a5-c938-4128-930f-e6d5c1510e2d",
              "parentUUID": "3f0c3017-e388-4b61-8d7e-671d3c4ae82a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"after each\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "97c2d236-6bd4-4cc4-8e4e-65cb90756f76",
              "parentUUID": "3f0c3017-e388-4b61-8d7e-671d3c4ae82a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "f5ba72bb-db38-4ac6-b555-feba6ca52ef2",
              "title": "/api/profiles/verify/:token GET",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing token",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 400 for missing token",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify')\n                .query({})\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'token missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "26e78852-b8ea-4701-87d8-f7cd81b395a1",
                  "parentUUID": "f5ba72bb-db38-4ac6-b555-feba6ca52ef2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failing to get user",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 500 for failing to get user",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get user'\n            });\n        })",
                  "err": {},
                  "uuid": "df7af527-2b6c-47b9-9e2b-9921703696ba",
                  "parentUUID": "f5ba72bb-db38-4ac6-b555-feba6ca52ef2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for not finding valid user",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 404 for not finding valid user",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid or expired verification token'\n            });\n        })",
                  "err": {},
                  "uuid": "b583ced4-9981-4263-b059-92834f463c16",
                  "parentUUID": "f5ba72bb-db38-4ac6-b555-feba6ca52ef2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failing to verify email",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 500 for failing to verify email",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeDate = (new Date()).toISOString();\n            const fakeUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test123',\n                verificationTokenExpires: fakeDate,\n                createdAt: fakeDate,\n                updatedAt: fakeDate,\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(fakeUser);\n            sinon_1.default.stub(UserService_1.UserService, 'verifyEmail').throws(new Error(\"Some error related to verifying email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to verify email'\n            });\n        })",
                  "err": {},
                  "uuid": "f83f5c9a-edf7-4fb8-9325-fa462f3e1577",
                  "parentUUID": "f5ba72bb-db38-4ac6-b555-feba6ca52ef2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully verifying email",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 200 for successfully verifying email",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeDate = (new Date()).toISOString();\n            const fakeUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test123',\n                verificationTokenExpires: fakeDate,\n                createdAt: fakeDate,\n                updatedAt: fakeDate,\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(fakeUser);\n            sinon_1.default.stub(UserService_1.UserService, 'verifyEmail').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Email verified successfully'\n            });\n        })",
                  "err": {},
                  "uuid": "8dce89d6-a72f-4654-a4aa-993798588495",
                  "parentUUID": "f5ba72bb-db38-4ac6-b555-feba6ca52ef2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26e78852-b8ea-4701-87d8-f7cd81b395a1",
                "df7af527-2b6c-47b9-9e2b-9921703696ba",
                "b583ced4-9981-4263-b059-92834f463c16",
                "f83f5c9a-edf7-4fb8-9325-fa462f3e1577",
                "8dce89d6-a72f-4654-a4aa-993798588495"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "244d9890-584d-4e71-b564-078d104e1db1",
              "title": "/api/profiles/resend-verification POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({})\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email is required'\n            });\n        })",
                  "err": {},
                  "uuid": "d96bae79-3fe0-41b4-92bc-644f70d29edb",
                  "parentUUID": "244d9890-584d-4e71-b564-078d104e1db1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 123 })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email must be a string'\n            });\n        })",
                  "err": {},
                  "uuid": "e42ad5cd-4e56-4c95-839d-53826c2996e9",
                  "parentUUID": "244d9890-584d-4e71-b564-078d104e1db1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error while getting user",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 500 for unknown error while getting user",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get user while verifying email'\n            });\n        })",
                  "err": {},
                  "uuid": "3ddfbedb-0bda-473d-a810-5aa8c9d3006c",
                  "parentUUID": "244d9890-584d-4e71-b564-078d104e1db1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for unknown user",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 404 for unknown user",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'user cannot be found'\n            });\n        })",
                  "err": {},
                  "uuid": "72334e37-368d-4738-8da8-542a19626a7f",
                  "parentUUID": "244d9890-584d-4e71-b564-078d104e1db1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for user with verified email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for user with verified email",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: true\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email is already verified'\n            });\n        })",
                  "err": {},
                  "uuid": "fb178fa8-9ab1-41e2-a947-aff1ab28ac0d",
                  "parentUUID": "244d9890-584d-4e71-b564-078d104e1db1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error during resending verification email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 500 for unknown error during resending verification email",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'resendVerificationEmail').throws(new Error(\"Some error related to resending verification email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to resend verification email'\n            });\n        })",
                  "err": {},
                  "uuid": "41c91f2b-419a-4103-8635-32c40000b8d1",
                  "parentUUID": "244d9890-584d-4e71-b564-078d104e1db1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully resending email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 200 for successfully resending email",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'resendVerificationEmail').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Verification email sent'\n            });\n        })",
                  "err": {},
                  "uuid": "e7da5761-5643-465d-b524-c2218abbf1b4",
                  "parentUUID": "244d9890-584d-4e71-b564-078d104e1db1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d96bae79-3fe0-41b4-92bc-644f70d29edb",
                "e42ad5cd-4e56-4c95-839d-53826c2996e9",
                "3ddfbedb-0bda-473d-a810-5aa8c9d3006c",
                "72334e37-368d-4738-8da8-542a19626a7f",
                "fb178fa8-9ab1-41e2-a947-aff1ab28ac0d",
                "41c91f2b-419a-4103-8635-32c40000b8d1",
                "e7da5761-5643-465d-b524-c2218abbf1b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "517cfc43-6b61-49e6-a3bf-d53f11fbe745",
              "title": "/api/profiles/:userId GET",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"/api/profiles/:userId GET\"",
                  "fullTitle": "Profile API /api/profiles/:userId GET \"before each\" hook in \"/api/profiles/:userId GET\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "originalSecret = process.env.JWT_SECRET;",
                  "err": {},
                  "uuid": "6432e138-2abb-4411-813c-2cf6814ba599",
                  "parentUUID": "517cfc43-6b61-49e6-a3bf-d53f11fbe745",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"/api/profiles/:userId GET\"",
                  "fullTitle": "Profile API /api/profiles/:userId GET \"after each\" hook in \"/api/profiles/:userId GET\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.JWT_SECRET = originalSecret; // restore",
                  "err": {},
                  "uuid": "3445801c-bc2c-447e-9ee0-d580797c03f6",
                  "parentUUID": "517cfc43-6b61-49e6-a3bf-d53f11fbe745",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return 401 for no auth token on header",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 401 for no auth token on header",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/')\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No auth token in header'\n            });\n        })",
                  "err": {},
                  "uuid": "7661dd00-2ff8-44da-9f99-cc6ada8545e2",
                  "parentUUID": "517cfc43-6b61-49e6-a3bf-d53f11fbe745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unconfigured JWT",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for unconfigured JWT",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            delete process.env.JWT_SECRET;\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'JWT not configured'\n            });\n        })",
                  "err": {},
                  "uuid": "f2d1e66e-bedb-45f1-82ef-d7ec5a519a74",
                  "parentUUID": "517cfc43-6b61-49e6-a3bf-d53f11fbe745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for JWT verification error",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 401 for JWT verification error",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new jsonwebtoken_1.JsonWebTokenError(\"Some JWT verification error\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid JWT'\n            });\n        })",
                  "err": {},
                  "uuid": "68c3c33d-42dd-487d-bd92-7f096f073569",
                  "parentUUID": "517cfc43-6b61-49e6-a3bf-d53f11fbe745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error JWT",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for unknown error JWT",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new Error(\"Some other error during JWT verification\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error'\n            });\n        })",
                  "err": {},
                  "uuid": "eb7562cb-6ecc-4857-a24c-d58b1a9401c3",
                  "parentUUID": "517cfc43-6b61-49e6-a3bf-d53f11fbe745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing userId on params",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 400 for missing userId on params",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "4ce61ed5-1d19-4664-8dd4-71cc9577b8f7",
                  "parentUUID": "517cfc43-6b61-49e6-a3bf-d53f11fbe745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for error during getting profile",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for error during getting profile",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error during getting profile'\n            });\n        })",
                  "err": {},
                  "uuid": "1b51b95a-d60d-47af-9edd-898732c5e17f",
                  "parentUUID": "517cfc43-6b61-49e6-a3bf-d53f11fbe745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for missing profile for userId",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 404 for missing profile for userId",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get profile with userId'\n            });\n        })",
                  "err": {},
                  "uuid": "8aa130e2-b552-4360-939c-8649e2308581",
                  "parentUUID": "517cfc43-6b61-49e6-a3bf-d53f11fbe745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully getting profile",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 200 for successfully getting profile",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            const fakeProfile = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(fakeProfile);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Successfully retrieved profile',\n                data: fakeProfile\n            });\n        })",
                  "err": {},
                  "uuid": "4489f482-6908-4e71-8119-7e23d309278d",
                  "parentUUID": "517cfc43-6b61-49e6-a3bf-d53f11fbe745",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7661dd00-2ff8-44da-9f99-cc6ada8545e2",
                "f2d1e66e-bedb-45f1-82ef-d7ec5a519a74",
                "68c3c33d-42dd-487d-bd92-7f096f073569",
                "eb7562cb-6ecc-4857-a24c-d58b1a9401c3",
                "4ce61ed5-1d19-4664-8dd4-71cc9577b8f7",
                "1b51b95a-d60d-47af-9edd-898732c5e17f",
                "8aa130e2-b552-4360-939c-8649e2308581",
                "4489f482-6908-4e71-8119-7e23d309278d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 78,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "9373620a-cade-471a-976b-442153ce547b",
              "title": "/api/profiles/:userId PATCH",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"/api/profiles/:userId PATCH\"",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH \"before each\" hook in \"/api/profiles/:userId PATCH\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "originalSecret = process.env.JWT_SECRET;",
                  "err": {},
                  "uuid": "3d813cc2-e363-40db-8b4b-ac0f06c865e4",
                  "parentUUID": "9373620a-cade-471a-976b-442153ce547b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"/api/profiles/:userId PATCH\"",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH \"after each\" hook in \"/api/profiles/:userId PATCH\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.JWT_SECRET = originalSecret; // restore",
                  "err": {},
                  "uuid": "e82bc807-6b29-4681-ad97-27a619bdb90e",
                  "parentUUID": "9373620a-cade-471a-976b-442153ce547b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return 401 for no auth token on header",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 401 for no auth token on header",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/')\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No auth token in header'\n            });\n        })",
                  "err": {},
                  "uuid": "fc706346-2e6c-4f09-979e-8a868b11641e",
                  "parentUUID": "9373620a-cade-471a-976b-442153ce547b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unconfigured JWT",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for unconfigured JWT",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            delete process.env.JWT_SECRET;\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'JWT not configured'\n            });\n        })",
                  "err": {},
                  "uuid": "2361af4a-35d7-4c6f-a919-c89a784833ff",
                  "parentUUID": "9373620a-cade-471a-976b-442153ce547b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for JWT verification error",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 401 for JWT verification error",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new jsonwebtoken_1.JsonWebTokenError(\"Some JWT verification error\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid JWT'\n            });\n        })",
                  "err": {},
                  "uuid": "ec217a9b-efca-4383-9a30-783f0655ec36",
                  "parentUUID": "9373620a-cade-471a-976b-442153ce547b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error JWT",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for unknown error JWT",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new Error(\"Some other error during JWT verification\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error'\n            });\n        })",
                  "err": {},
                  "uuid": "b366159b-e9c1-4be1-aafa-a649c3455519",
                  "parentUUID": "9373620a-cade-471a-976b-442153ce547b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing userId on params",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 400 for missing userId on params",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "176c06b8-c821-42f8-8620-6b15aa6e4813",
                  "parentUUID": "9373620a-cade-471a-976b-442153ce547b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing profileData in body",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 400 for missing profileData in body",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: null })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'profileData missing from body'\n            });\n        })",
                  "err": {},
                  "uuid": "49f4e9b3-1381-4081-9a1d-94a78087650d",
                  "parentUUID": "9373620a-cade-471a-976b-442153ce547b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for error during getting profile",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for error during getting profile",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error during getting profile'\n            });\n        })",
                  "err": {},
                  "uuid": "50b2cbb7-2dff-4dd4-b067-92c2c42ccd68",
                  "parentUUID": "9373620a-cade-471a-976b-442153ce547b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for missing profile for userId",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 404 for missing profile for userId",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(null);\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No profile found'\n            });\n        })",
                  "err": {},
                  "uuid": "efe5c0ea-7414-4982-a93f-5822b5e4d0f2",
                  "parentUUID": "9373620a-cade-471a-976b-442153ce547b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for error with updating profile",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for error with updating profile",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '1TB',\n                RAM_preference: '32GB',\n                brand_preference: 'NVidia, Intel',\n                min_budget: 200,\n                max_budget: 1000,\n                rating_preference: 3,\n                country: 'US',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            const existingProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(existingProfileData);\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'updateProfile').throws(new Error(\"Some error related to updating profile\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to update profile'\n            });\n        })",
                  "err": {},
                  "uuid": "49df1ad2-b17d-40ee-aa3d-9bbade8db6d2",
                  "parentUUID": "9373620a-cade-471a-976b-442153ce547b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully updating profile",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 200 for successfully updating profile",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'userId123',\n                storage_preference: '1TB',\n                RAM_preference: '32GB',\n                brand_preference: 'NVidia, Intel',\n                min_budget: 200,\n                max_budget: 1000,\n                rating_preference: 3,\n                country: 'US',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            const existingProfileData = {\n                _id: 'test id',\n                userId: 'userId123',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(existingProfileData);\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'updateProfile').resolves(fakeProfileData);\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Profile updated successfully',\n                data: fakeProfileData\n            });\n        })",
                  "err": {},
                  "uuid": "9becf533-8940-4284-8142-5e8ff565b8cd",
                  "parentUUID": "9373620a-cade-471a-976b-442153ce547b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc706346-2e6c-4f09-979e-8a868b11641e",
                "2361af4a-35d7-4c6f-a919-c89a784833ff",
                "ec217a9b-efca-4383-9a30-783f0655ec36",
                "b366159b-e9c1-4be1-aafa-a649c3455519",
                "176c06b8-c821-42f8-8620-6b15aa6e4813",
                "49f4e9b3-1381-4081-9a1d-94a78087650d",
                "50b2cbb7-2dff-4dd4-b067-92c2c42ccd68",
                "efe5c0ea-7414-4982-a93f-5822b5e4d0f2",
                "49df1ad2-b17d-40ee-aa3d-9bbade8db6d2",
                "9becf533-8940-4284-8142-5e8ff565b8cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 107,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
              "title": "/api/profiles/passwords/:userId",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"/api/profiles/passwords/:userId\"",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId \"before each\" hook in \"/api/profiles/passwords/:userId\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "originalSecret = process.env.JWT_SECRET;",
                  "err": {},
                  "uuid": "b936abf9-8ba2-4b32-93d1-9e67d90e36a4",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"/api/profiles/passwords/:userId\"",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId \"after each\" hook in \"/api/profiles/passwords/:userId\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.JWT_SECRET = originalSecret; // restore",
                  "err": {},
                  "uuid": "b7aa096e-0720-4e42-963d-a351ed8f1c15",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return 401 for no auth token on header",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 401 for no auth token on header",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords')\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No auth token in header'\n            });\n        })",
                  "err": {},
                  "uuid": "7cd179fd-64f0-4c33-b4a5-239bea331bf3",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unconfigured JWT",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 500 for unconfigured JWT",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            delete process.env.JWT_SECRET;\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'JWT not configured'\n            });\n        })",
                  "err": {},
                  "uuid": "514612bf-83e4-4b30-b3a0-6ee89695f6cf",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for JWT verification error",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 401 for JWT verification error",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new jsonwebtoken_1.JsonWebTokenError(\"Some JWT verification error\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid JWT'\n            });\n        })",
                  "err": {},
                  "uuid": "156f46e1-32cd-49c6-a381-422d4d3b9ad4",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error JWT",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 500 for unknown error JWT",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new Error(\"Some other error during JWT verification\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error'\n            });\n        })",
                  "err": {},
                  "uuid": "5fccb3a9-52f9-409d-b434-0c267861b716",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for userId missing from params",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for userId missing from params",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "ddcfbacc-9444-45ce-8cf1-b10011a96d8e",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing newPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for missing newPassword",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords')\n                .send({\n                currentPassword: 'currentPassword'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "fb2a6a08-c912-4139-9881-d4c558f68009",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing currentPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for missing currentPassword",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords')\n                .send({\n                newPassword: 'newPassword'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "f1290769-6083-41c9-a834-7d94dcd96435",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string currentPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for non string currentPassword",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords')\n                .send({\n                currentPassword: 123,\n                newPassword: 'newPassword'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "53c459e9-e733-4070-aed6-630aeb296332",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string currentPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 400 for non string currentPassword",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords')\n                .send({\n                currentPassword: 'test current',\n                newPassword: 123\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "ce677382-b75c-4de7-92d4-b4afffc97a19",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error during getting user",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 500 for unknown error during getting user",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').throws(new Error('Some error during fetching user'));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test current',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error during getting user'\n            });\n        })",
                  "err": {},
                  "uuid": "b6be78cb-73b0-4432-81f9-057ca0f226c0",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for unknown user",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 404 for unknown user",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test current',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No user found'\n            });\n        })",
                  "err": {},
                  "uuid": "85179d0b-3f22-41b3-b5d5-0fcc8ccb32e8",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid currentPassword",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 401 for invalid currentPassword",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                name: 'test name',\n                email: 'test@example.com',\n                password: 'test1234',\n                isEmailVerified: true,\n                verificationToken: 'test token',\n                verificationTokenExpires: (new Date()).toISOString(),\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').resolves(userWithPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'comparePassword').resolves(false);\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test4321',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Password incorrect'\n            });\n        })",
                  "err": {},
                  "uuid": "60a0b3f2-3db9-4f5a-b762-a2003dc0a65b",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failed password update",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 500 for failed password update",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                name: 'test name',\n                email: 'test@example.com',\n                password: 'test1234',\n                isEmailVerified: true,\n                verificationToken: 'test token',\n                verificationTokenExpires: (new Date()).toISOString(),\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').resolves(userWithPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'comparePassword').resolves(true);\n            sinon_1.default.stub(UserService_1.UserService, 'updatePassword').throws(new Error(\"Some error related to updating password\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test1234',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to update password'\n            });\n        })",
                  "err": {},
                  "uuid": "d79f1748-c03b-404c-9904-c6346aede5e1",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successful password update",
                  "fullTitle": "Profile API /api/profiles/passwords/:userId should return 200 for successful password update",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const userWithPassword = {\n                name: 'test name',\n                email: 'test@example.com',\n                password: 'test1234',\n                isEmailVerified: true,\n                verificationToken: 'test token',\n                verificationTokenExpires: (new Date()).toISOString(),\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserById').resolves(userWithPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'comparePassword').resolves(true);\n            sinon_1.default.stub(UserService_1.UserService, 'updatePassword').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/passwords/userId123')\n                .send({\n                currentPassword: 'test1234',\n                newPassword: 'test new'\n            })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Password updated successfully'\n            });\n        })",
                  "err": {},
                  "uuid": "3674cc64-c079-4a0d-a482-99e83ac397f0",
                  "parentUUID": "f7f41180-14c7-4abc-b6ce-cb5ff2ec5b2a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7cd179fd-64f0-4c33-b4a5-239bea331bf3",
                "514612bf-83e4-4b30-b3a0-6ee89695f6cf",
                "156f46e1-32cd-49c6-a381-422d4d3b9ad4",
                "5fccb3a9-52f9-409d-b434-0c267861b716",
                "ddcfbacc-9444-45ce-8cf1-b10011a96d8e",
                "fb2a6a08-c912-4139-9881-d4c558f68009",
                "f1290769-6083-41c9-a834-7d94dcd96435",
                "53c459e9-e733-4070-aed6-630aeb296332",
                "ce677382-b75c-4de7-92d4-b4afffc97a19",
                "b6be78cb-73b0-4432-81f9-057ca0f226c0",
                "85179d0b-3f22-41b3-b5d5-0fcc8ccb32e8",
                "60a0b3f2-3db9-4f5a-b762-a2003dc0a65b",
                "d79f1748-c03b-404c-9904-c6346aede5e1",
                "3674cc64-c079-4a0d-a482-99e83ac397f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 128,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "profile-test",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-profile",
        "reportFilename": "profile-test"
      },
      "version": "6.2.0"
    }
  }
}