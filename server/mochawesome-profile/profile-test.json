{
  "stats": {
    "suites": 5,
    "tests": 30,
    "passes": 30,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-02T20:35:48.861Z",
    "end": "2025-07-02T20:35:49.275Z",
    "duration": 414,
    "testsRegistered": 30,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1d708ab6-390b-44eb-8b13-818917027643",
      "title": "",
      "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
      "file": "\\src\\tests\\integration\\profile.test.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ddc55942-c04a-450b-8ea0-20ad6d78541b",
          "title": "Profile API",
          "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
          "file": "\\src\\tests\\integration\\profile.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"before all\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = (0, express_1.default)();\napp.use(express_1.default.json());\napp.use('/api/profiles', profile_1.default);",
              "err": {},
              "uuid": "3d62845c-0a98-43b9-8d40-d92e828b9250",
              "parentUUID": "ddc55942-c04a-450b-8ea0-20ad6d78541b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Profile API\"",
              "fullTitle": "Profile API \"after each\" hook in \"Profile API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon_1.default.restore();",
              "err": {},
              "uuid": "d265a7ae-df2e-4de5-bffa-b812d3376064",
              "parentUUID": "ddc55942-c04a-450b-8ea0-20ad6d78541b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "3f2bac4f-f9f4-4bea-8c8c-c0d725333d8c",
              "title": "/api/profiles/verify/:token GET",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing token",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 400 for missing token",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify')\n                .query({})\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'token missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "b9eb1348-cc32-4aaa-8fa2-91448cb4221d",
                  "parentUUID": "3f2bac4f-f9f4-4bea-8c8c-c0d725333d8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failing to get user",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 500 for failing to get user",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get user'\n            });\n        })",
                  "err": {},
                  "uuid": "3318387a-1dc7-47cb-b429-fbfdfb1715a2",
                  "parentUUID": "3f2bac4f-f9f4-4bea-8c8c-c0d725333d8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for not finding valid user",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 404 for not finding valid user",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid or expired verification token'\n            });\n        })",
                  "err": {},
                  "uuid": "9978d068-91a1-4596-8502-31830133fd3c",
                  "parentUUID": "3f2bac4f-f9f4-4bea-8c8c-c0d725333d8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for failing to verify email",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 500 for failing to verify email",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeDate = new Date();\n            const fakeUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test123',\n                verificationTokenExpires: fakeDate,\n                createdAt: fakeDate,\n                updatedAt: fakeDate,\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(fakeUser);\n            sinon_1.default.stub(UserService_1.UserService, 'verifyEmail').throws(new Error(\"Some error related to verifying email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to verify email'\n            });\n        })",
                  "err": {},
                  "uuid": "7c9422e3-580e-468c-b9df-87981493a828",
                  "parentUUID": "3f2bac4f-f9f4-4bea-8c8c-c0d725333d8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully verifying email",
                  "fullTitle": "Profile API /api/profiles/verify/:token GET should return 200 for successfully verifying email",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeDate = new Date();\n            const fakeUser = {\n                name: 'test name',\n                email: 'test@example.com',\n                isEmailVerified: true,\n                verificationToken: 'test123',\n                verificationTokenExpires: fakeDate,\n                createdAt: fakeDate,\n                updatedAt: fakeDate,\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByToken').resolves(fakeUser);\n            sinon_1.default.stub(UserService_1.UserService, 'verifyEmail').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/verify/test123')\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Email verified successfully'\n            });\n        })",
                  "err": {},
                  "uuid": "392eee70-91a1-41ea-8bf8-4bd454500f24",
                  "parentUUID": "3f2bac4f-f9f4-4bea-8c8c-c0d725333d8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9eb1348-cc32-4aaa-8fa2-91448cb4221d",
                "3318387a-1dc7-47cb-b429-fbfdfb1715a2",
                "9978d068-91a1-4596-8502-31830133fd3c",
                "7c9422e3-580e-468c-b9df-87981493a828",
                "392eee70-91a1-41ea-8bf8-4bd454500f24"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "507b39c8-3dfc-4579-b344-05ecd5057900",
              "title": "/api/profiles/resend-verification POST",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for missing email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for missing email",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({})\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email is required'\n            });\n        })",
                  "err": {},
                  "uuid": "8316babc-c6ac-4e58-96b4-e191760f0e32",
                  "parentUUID": "507b39c8-3dfc-4579-b344-05ecd5057900",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for non string email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for non string email",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 123 })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email must be a string'\n            });\n        })",
                  "err": {},
                  "uuid": "e1c1d973-1ad6-42b1-9cec-dcc29e1d3055",
                  "parentUUID": "507b39c8-3dfc-4579-b344-05ecd5057900",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error while getting user",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 500 for unknown error while getting user",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get user while verifying email'\n            });\n        })",
                  "err": {},
                  "uuid": "ca5fae2a-7d73-4874-abff-6ab2aba4453b",
                  "parentUUID": "507b39c8-3dfc-4579-b344-05ecd5057900",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for unknown user",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 404 for unknown user",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'user cannot be found'\n            });\n        })",
                  "err": {},
                  "uuid": "18d2e195-5592-4b77-9ddb-6ca5f1dba5da",
                  "parentUUID": "507b39c8-3dfc-4579-b344-05ecd5057900",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for user with verified email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 400 for user with verified email",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: true\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'email is already verified'\n            });\n        })",
                  "err": {},
                  "uuid": "e31bc441-a163-44b2-a1ab-b0490ded96bb",
                  "parentUUID": "507b39c8-3dfc-4579-b344-05ecd5057900",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error during resending verification email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 500 for unknown error during resending verification email",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'resendVerificationEmail').throws(new Error(\"Some error related to resending verification email\"));\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to resend verification email'\n            });\n        })",
                  "err": {},
                  "uuid": "1a7e58f3-c221-4df7-925d-22f9608b1d92",
                  "parentUUID": "507b39c8-3dfc-4579-b344-05ecd5057900",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully resending email",
                  "fullTitle": "Profile API /api/profiles/resend-verification POST should return 200 for successfully resending email",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeUserWithoutPassword = {\n                _id: 'existing_id',\n                name: 'Existing User',\n                email: 'existing@example.com',\n                password: 'hashed_password',\n                isEmailVerified: false\n            };\n            sinon_1.default.stub(UserService_1.UserService, 'getUserByEmail').resolves(fakeUserWithoutPassword);\n            sinon_1.default.stub(UserService_1.UserService, 'resendVerificationEmail').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .post('/api/profiles/resend-verification')\n                .send({ email: 'test@example.com' })\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Verification email sent'\n            });\n        })",
                  "err": {},
                  "uuid": "1405d8d5-55cc-47fa-ba81-a2564e8f8a09",
                  "parentUUID": "507b39c8-3dfc-4579-b344-05ecd5057900",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8316babc-c6ac-4e58-96b4-e191760f0e32",
                "e1c1d973-1ad6-42b1-9cec-dcc29e1d3055",
                "ca5fae2a-7d73-4874-abff-6ab2aba4453b",
                "18d2e195-5592-4b77-9ddb-6ca5f1dba5da",
                "e31bc441-a163-44b2-a1ab-b0490ded96bb",
                "1a7e58f3-c221-4df7-925d-22f9608b1d92",
                "1405d8d5-55cc-47fa-ba81-a2564e8f8a09"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 87,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "a235c1fd-38fa-4b08-8b1d-3ac85b5ec100",
              "title": "/api/profiles/:userId GET",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"/api/profiles/:userId GET\"",
                  "fullTitle": "Profile API /api/profiles/:userId GET \"before each\" hook in \"/api/profiles/:userId GET\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "originalSecret = process.env.JWT_SECRET;",
                  "err": {},
                  "uuid": "3eaa1b97-9753-4c3e-8e88-aad4f121e473",
                  "parentUUID": "a235c1fd-38fa-4b08-8b1d-3ac85b5ec100",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"/api/profiles/:userId GET\"",
                  "fullTitle": "Profile API /api/profiles/:userId GET \"after each\" hook in \"/api/profiles/:userId GET\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.JWT_SECRET = originalSecret; // restore",
                  "err": {},
                  "uuid": "8a994b7a-3ebb-4b8c-817d-622803c706c4",
                  "parentUUID": "a235c1fd-38fa-4b08-8b1d-3ac85b5ec100",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return 401 for no auth token on header",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 401 for no auth token on header",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/')\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No auth token in header'\n            });\n        })",
                  "err": {},
                  "uuid": "6c74e721-1c4e-4e62-8d88-18343d19b08c",
                  "parentUUID": "a235c1fd-38fa-4b08-8b1d-3ac85b5ec100",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unconfigured JWT",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for unconfigured JWT",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            delete process.env.JWT_SECRET;\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'JWT not configured'\n            });\n        })",
                  "err": {},
                  "uuid": "32208d87-2bfe-483f-8768-466c4e8149c7",
                  "parentUUID": "a235c1fd-38fa-4b08-8b1d-3ac85b5ec100",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for JWT verification error",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 401 for JWT verification error",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new jsonwebtoken_1.JsonWebTokenError(\"Some JWT verification error\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid JWT'\n            });\n        })",
                  "err": {},
                  "uuid": "5b129574-64e6-4de2-acb6-fea23227d1f7",
                  "parentUUID": "a235c1fd-38fa-4b08-8b1d-3ac85b5ec100",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error JWT",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for unknown error JWT",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new Error(\"Some other error during JWT verification\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error'\n            });\n        })",
                  "err": {},
                  "uuid": "ecb36b4c-6666-48f7-aad2-da25547b9447",
                  "parentUUID": "a235c1fd-38fa-4b08-8b1d-3ac85b5ec100",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing userId on params",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 400 for missing userId on params",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "6af1e9df-14cc-4982-b147-ddebab7a79d1",
                  "parentUUID": "a235c1fd-38fa-4b08-8b1d-3ac85b5ec100",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for error during getting profile",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 500 for error during getting profile",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error during getting profile'\n            });\n        })",
                  "err": {},
                  "uuid": "a7320c47-8081-405f-986c-dd553177ef1f",
                  "parentUUID": "a235c1fd-38fa-4b08-8b1d-3ac85b5ec100",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for missing profile for userId",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 404 for missing profile for userId",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(null);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to get profile with userId'\n            });\n        })",
                  "err": {},
                  "uuid": "122f6182-20cb-4adc-b3eb-9dc501f5f577",
                  "parentUUID": "a235c1fd-38fa-4b08-8b1d-3ac85b5ec100",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully getting profile",
                  "fullTitle": "Profile API /api/profiles/:userId GET should return 200 for successfully getting profile",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            const fakeProfile = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(fakeProfile);\n            const response = yield (0, supertest_1.default)(app)\n                .get('/api/profiles/userId123')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Successfully retrieved profile',\n                data: fakeProfile\n            });\n        })",
                  "err": {},
                  "uuid": "ccfd6928-9ceb-4021-b1c8-fa5ed9793b44",
                  "parentUUID": "a235c1fd-38fa-4b08-8b1d-3ac85b5ec100",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c74e721-1c4e-4e62-8d88-18343d19b08c",
                "32208d87-2bfe-483f-8768-466c4e8149c7",
                "5b129574-64e6-4de2-acb6-fea23227d1f7",
                "ecb36b4c-6666-48f7-aad2-da25547b9447",
                "6af1e9df-14cc-4982-b147-ddebab7a79d1",
                "a7320c47-8081-405f-986c-dd553177ef1f",
                "122f6182-20cb-4adc-b3eb-9dc501f5f577",
                "ccfd6928-9ceb-4021-b1c8-fa5ed9793b44"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 74,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "d05c054b-e0b4-4189-a4d7-9c0c8c4d054a",
              "title": "/api/profiles/:userId PATCH",
              "fullFile": "D:\\Uni\\C455\\Project\\team10\\server\\src\\tests\\integration\\profile.test.ts",
              "file": "\\src\\tests\\integration\\profile.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"/api/profiles/:userId PATCH\"",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH \"before each\" hook in \"/api/profiles/:userId PATCH\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "originalSecret = process.env.JWT_SECRET;",
                  "err": {},
                  "uuid": "75fd9b13-8403-4a86-90b1-c1f32cea106a",
                  "parentUUID": "d05c054b-e0b4-4189-a4d7-9c0c8c4d054a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"/api/profiles/:userId PATCH\"",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH \"after each\" hook in \"/api/profiles/:userId PATCH\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.JWT_SECRET = originalSecret; // restore",
                  "err": {},
                  "uuid": "8f28d334-e318-4938-ac76-1b45b3acb9fb",
                  "parentUUID": "d05c054b-e0b4-4189-a4d7-9c0c8c4d054a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return 401 for no auth token on header",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 401 for no auth token on header",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/')\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No auth token in header'\n            });\n        })",
                  "err": {},
                  "uuid": "ccaa3935-71e0-4ffe-96bd-8bfe3e7d90a9",
                  "parentUUID": "d05c054b-e0b4-4189-a4d7-9c0c8c4d054a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unconfigured JWT",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for unconfigured JWT",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            delete process.env.JWT_SECRET;\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'JWT not configured'\n            });\n        })",
                  "err": {},
                  "uuid": "84942352-bfb6-4b4f-9168-96b70df05ef2",
                  "parentUUID": "d05c054b-e0b4-4189-a4d7-9c0c8c4d054a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for JWT verification error",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 401 for JWT verification error",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new jsonwebtoken_1.JsonWebTokenError(\"Some JWT verification error\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(401);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Invalid JWT'\n            });\n        })",
                  "err": {},
                  "uuid": "ab88a9d7-e64d-4752-b00d-b9e4c9064319",
                  "parentUUID": "d05c054b-e0b4-4189-a4d7-9c0c8c4d054a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for unknown error JWT",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for unknown error JWT",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').throws(new Error(\"Some other error during JWT verification\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .set('Authorization', `Bearer sometoken`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error'\n            });\n        })",
                  "err": {},
                  "uuid": "3d91ed6f-01f8-4a03-9413-7a6beaac0557",
                  "parentUUID": "d05c054b-e0b4-4189-a4d7-9c0c8c4d054a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing userId on params",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 400 for missing userId on params",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/')\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'userId missing from params'\n            });\n        })",
                  "err": {},
                  "uuid": "9bb2cfb1-2bdf-43df-8bf0-f0a2ccc58c47",
                  "parentUUID": "d05c054b-e0b4-4189-a4d7-9c0c8c4d054a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing updateData in body",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 400 for missing updateData in body",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            sinon_1.default.stub(jsonwebtoken_1.default, 'verify').resolves();\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: null })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(400);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'updated profile missing from body'\n            });\n        })",
                  "err": {},
                  "uuid": "eafbfa82-fa4d-4398-972c-cd9a68d67d76",
                  "parentUUID": "d05c054b-e0b4-4189-a4d7-9c0c8c4d054a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for error during getting profile",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for error during getting profile",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').throws(new Error(\"Some error related to getting user\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unknown error during getting profile'\n            });\n        })",
                  "err": {},
                  "uuid": "d1d9ac33-5534-43d2-a346-9b26316dc5d9",
                  "parentUUID": "d05c054b-e0b4-4189-a4d7-9c0c8c4d054a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for missing profile for userId",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 404 for missing profile for userId",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(null);\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(404);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'No profile found'\n            });\n        })",
                  "err": {},
                  "uuid": "a2fa808a-153c-41c2-b3a2-2cc8e7f7bb26",
                  "parentUUID": "d05c054b-e0b4-4189-a4d7-9c0c8c4d054a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for error with updating profile",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 500 for error with updating profile",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '1TB',\n                RAM_preference: '32GB',\n                brand_preference: 'NVidia, Intel',\n                min_budget: 200,\n                max_budget: 1000,\n                rating_preference: 3,\n                country: 'US',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            const existingProfileData = {\n                _id: 'test id',\n                userId: 'test userId',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(existingProfileData);\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'updateProfile').throws(new Error(\"Some error related to updating profile\"));\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(500);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: false,\n                error: 'Unable to update profile'\n            });\n        })",
                  "err": {},
                  "uuid": "9d26e031-d185-4afb-9f98-4169195e7735",
                  "parentUUID": "d05c054b-e0b4-4189-a4d7-9c0c8c4d054a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 200 for successfully updating profile",
                  "fullTitle": "Profile API /api/profiles/:userId PATCH should return 200 for successfully updating profile",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const fakeProfileData = {\n                _id: 'test id',\n                userId: 'userId123',\n                storage_preference: '1TB',\n                RAM_preference: '32GB',\n                brand_preference: 'NVidia, Intel',\n                min_budget: 200,\n                max_budget: 1000,\n                rating_preference: 3,\n                country: 'US',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            const existingProfileData = {\n                _id: 'test id',\n                userId: 'userId123',\n                storage_preference: '123GB',\n                RAM_preference: '8GB',\n                brand_preference: 'Apple, Samsung, Sony',\n                min_budget: 50,\n                max_budget: 500,\n                rating_preference: 5,\n                country: 'Canada',\n                address: {\n                    street: 'test street',\n                    city: 'test city',\n                    state: 'test state',\n                    zipCode: 'test zip code',\n                    country: 'test country',\n                },\n                createdAt: (new Date()).toISOString(),\n                updatedAt: (new Date()).toISOString(),\n                email: 'test@example.com',\n            };\n            /** Physically verify token without mocking */\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'getProfileByUserId').resolves(existingProfileData);\n            sinon_1.default.stub(ProfileService_1.ProfileService, 'updateProfile').resolves(fakeProfileData);\n            const response = yield (0, supertest_1.default)(app)\n                .patch('/api/profiles/userId123')\n                .send({ profileData: fakeProfileData })\n                .set('Authorization', `Bearer ${validToken}`)\n                .expect(200);\n            (0, chai_1.expect)(response.body).to.deep.equal({\n                success: true,\n                message: 'Profile updated successfully',\n                data: fakeProfileData\n            });\n        })",
                  "err": {},
                  "uuid": "880cd953-d068-4665-8ae9-aaa0b1ffdef6",
                  "parentUUID": "d05c054b-e0b4-4189-a4d7-9c0c8c4d054a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ccaa3935-71e0-4ffe-96bd-8bfe3e7d90a9",
                "84942352-bfb6-4b4f-9168-96b70df05ef2",
                "ab88a9d7-e64d-4752-b00d-b9e4c9064319",
                "3d91ed6f-01f8-4a03-9413-7a6beaac0557",
                "9bb2cfb1-2bdf-43df-8bf0-f0a2ccc58c47",
                "eafbfa82-fa4d-4398-972c-cd9a68d67d76",
                "d1d9ac33-5534-43d2-a346-9b26316dc5d9",
                "a2fa808a-153c-41c2-b3a2-2cc8e7f7bb26",
                "9d26e031-d185-4afb-9f98-4169195e7735",
                "880cd953-d068-4665-8ae9-aaa0b1ffdef6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 105,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "profile-test",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-profile",
        "reportFilename": "profile-test"
      },
      "version": "6.2.0"
    }
  }
}